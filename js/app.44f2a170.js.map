{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/HelloWorld.vue?14c4","webpack:///./src/api/spotify/base.ts","webpack:///./src/api/spotify/api.ts","webpack:///./src/api/spotify/index.ts","webpack:///./src/App.vue?c650","webpack:///./src/api/omdb/base.ts","webpack:///./src/api/omdb/api.ts","webpack:///./src/api/custom/api.ts","webpack:///./src/api/custom/base.ts","webpack:///./src/api/index.ts","webpack:///./src/App.vue?de30","webpack:///./src/App.vue?bff9","webpack:///./src/views/Home.vue?b56a","webpack:///./src/components/HelloWorld.vue?e42c","webpack:///./src/components/HelloWorld.vue","webpack:///./src/components/HelloWorld.vue?0596","webpack:///./src/components/HelloWorld.vue?f177","webpack:///src/views/Home.vue","webpack:///./src/views/Home.vue?493c","webpack:///./src/views/Home.vue","webpack:///./src/router/index.ts","webpack:///./src/main.ts","webpack:///./src/assets/logo.png"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","installedCssChunks","jsonpScriptSrc","p","exports","module","l","e","promises","cssChunks","Promise","resolve","reject","href","fullhref","existingLinkTags","document","getElementsByTagName","tag","dataHref","getAttribute","rel","existingStyleTags","linkTag","createElement","type","onload","onerror","event","request","target","src","err","Error","code","parentNode","removeChild","head","appendChild","then","installedChunkData","promise","onScriptComplete","script","charset","timeout","nc","setAttribute","error","clearTimeout","chunk","errorType","realSrc","message","name","undefined","setTimeout","all","m","c","d","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","console","jsonpArray","window","oldJsonpFunction","slice","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","albumsGet","ids","market","options","baseOptions","localVarPath","localVarUrlObj","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","query","search","headers","url","albumsIdGet","id","encodeURIComponent","String","albumsIdTracksGet","limit","offset","artistsGet","artistsIdAlbumsGet","albumType","artistsIdGet","artistsIdRelatedArtistsGet","artistsIdTopTracksGet","country","browseCategoriesCategoryIdGet","categoryId","locale","accept","browseCategoriesCategoryIdPlaylistsGet","browseCategoriesGet","browseFeaturedPlaylistsGet","timestamp","browseNewReleasesGet","meFollowingContainsGet","meFollowingDelete","meFollowingGet","after","meFollowingPut","meGet","meTracksContainsGet","meTracksDelete","meTracksGet","meTracksPut","searchGet","q","tracksGet","tracksIdGet","usersUserIdGet","userId","usersUserIdPlaylistsGet","usersUserIdPlaylistsPlaylistIdFollowersContainsGet","playlistId","usersUserIdPlaylistsPlaylistIdFollowersDelete","usersUserIdPlaylistsPlaylistIdFollowersPut","body","needsSerialization","JSON","stringify","usersUserIdPlaylistsPlaylistIdGet","fields","usersUserIdPlaylistsPlaylistIdPut","usersUserIdPlaylistsPlaylistIdTracksDelete","usersUserIdPlaylistsPlaylistIdTracksGet","usersUserIdPlaylistsPlaylistIdTracksPost","uris","position","usersUserIdPlaylistsPlaylistIdTracksPut","usersUserIdPlaylistsPost","localVarAxiosArgs","axiosRequestArgs","CandidatePartyEnum","ModelAndViewStatusEnum","getOMDbSearch","y","plot","tomatoes","v","page","callback","addCandidate","candidate","deleteCandidate","getCandidates","helloWorld","searchForCandidatesByLastName","lastName","ombdApi","customCandidateApi","_vm","_h","$createElement","_c","_self","attrs","_v","staticRenderFns","component","staticClass","_s","_m","ombdApiKey","extend","props","created","apiKey","ombdResponse","log","components","HelloWorld","use","routes","path","Home","router","beforeEach","to","from","next","accessTokenString","includes","accessToken","match","RegExp","params","config","productionTip","render","h","App","$mount"],"mappings":"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","file":"js/app.44f2a170.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded CSS chunks\n \tvar installedCssChunks = {\n \t\t\"app\": 0\n \t}\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"js/\" + ({\"custom\":\"custom\",\"spotify\":\"spotify\"}[chunkId]||chunkId) + \".\" + {\"custom\":\"c7ec4e80\",\"spotify\":\"6cfa8279\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// mini-css-extract-plugin CSS loading\n \t\tvar cssChunks = {\"custom\":1,\"spotify\":1};\n \t\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n \t\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n \t\t\tpromises.push(installedCssChunks[chunkId] = new Promise(function(resolve, reject) {\n \t\t\t\tvar href = \"css/\" + ({\"custom\":\"custom\",\"spotify\":\"spotify\"}[chunkId]||chunkId) + \".\" + {\"custom\":\"3c07b0f0\",\"spotify\":\"31dfab7b\"}[chunkId] + \".css\";\n \t\t\t\tvar fullhref = __webpack_require__.p + href;\n \t\t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n \t\t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n \t\t\t\t\tvar tag = existingLinkTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n \t\t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return resolve();\n \t\t\t\t}\n \t\t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n \t\t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n \t\t\t\t\tvar tag = existingStyleTags[i];\n \t\t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n \t\t\t\t\tif(dataHref === href || dataHref === fullhref) return resolve();\n \t\t\t\t}\n \t\t\t\tvar linkTag = document.createElement(\"link\");\n \t\t\t\tlinkTag.rel = \"stylesheet\";\n \t\t\t\tlinkTag.type = \"text/css\";\n \t\t\t\tlinkTag.onload = resolve;\n \t\t\t\tlinkTag.onerror = function(event) {\n \t\t\t\t\tvar request = event && event.target && event.target.src || fullhref;\n \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + request + \")\");\n \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n \t\t\t\t\terr.request = request;\n \t\t\t\t\tdelete installedCssChunks[chunkId]\n \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n \t\t\t\t\treject(err);\n \t\t\t\t};\n \t\t\t\tlinkTag.href = fullhref;\n\n \t\t\t\tvar head = document.getElementsByTagName(\"head\")[0];\n \t\t\t\thead.appendChild(linkTag);\n \t\t\t}).then(function() {\n \t\t\t\tinstalledCssChunks[chunkId] = 0;\n \t\t\t}));\n \t\t}\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\t// create error before stack unwound to get useful stacktrace later\n \t\t\t\tvar error = new Error();\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n \t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\tdocument.head.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"https://jackkoppa.github.io/typesafe-api-clients-demo/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HelloWorld.vue?vue&type=style&index=0&id=4802edfa&scoped=true&lang=scss&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HelloWorld.vue?vue&type=style&index=0&id=4802edfa&scoped=true&lang=scss&\"","// tslint:disable\n/**\n * Spotify\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.spotify.com/v1\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Spotify\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Album\n */\nexport interface Album {\n    /**\n     * The type of the album: one of \\'album\\', \\'single\\', or \\'compilation\\'.\n     * @type {string}\n     * @memberof Album\n     */\n    albumType?: string;\n    /**\n     * The artists of the album. Each artist object includes a link in href to more detailed information about the artist.\n     * @type {Array<Artist>}\n     * @memberof Album\n     */\n    artists?: Array<Artist>;\n    /**\n     * The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.\n     * @type {Array<string>}\n     * @memberof Album\n     */\n    availableMarkets?: Array<string>;\n    /**\n     * The copyright statements of the album.\n     * @type {Array<AlbumCopyrights>}\n     * @memberof Album\n     */\n    copyrights?: Array<AlbumCopyrights>;\n    /**\n     * Known external IDs for this album.\n     * @type {{ [key: string]: string; }}\n     * @memberof Album\n     */\n    externalIds?: { [key: string]: string; };\n    /**\n     * Known external URLs for this album.\n     * @type {{ [key: string]: string; }}\n     * @memberof Album\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * A list of the genres used to classify the album. For example: \\'Prog Rock\\', \\'Post-Grunge\\'. (If not yet classified, the array is empty.)\n     * @type {Array<string>}\n     * @memberof Album\n     */\n    genres?: Array<string>;\n    /**\n     * A link to the Web API endpoint providing full details of the album.\n     * @type {string}\n     * @memberof Album\n     */\n    href?: string;\n    /**\n     * The Spotify ID for the album.\n     * @type {string}\n     * @memberof Album\n     */\n    id?: string;\n    /**\n     * The cover art for the album in various sizes, widest first.\n     * @type {Array<Image>}\n     * @memberof Album\n     */\n    images?: Array<Image>;\n    /**\n     * The name of the album.\n     * @type {string}\n     * @memberof Album\n     */\n    name?: string;\n    /**\n     * The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album\\'s individual tracks.\n     * @type {number}\n     * @memberof Album\n     */\n    popularity?: number;\n    /**\n     * The date the album was first released, for example \\'1981-12-15\\'. Depending on the precision, it might be shown as \\'1981\\' or \\'1981-12\\'.\n     * @type {string}\n     * @memberof Album\n     */\n    releaseDate?: string;\n    /**\n     * The precision with which release_date value is known: \\'year\\', \\'month\\', or \\'day\\'.\n     * @type {string}\n     * @memberof Album\n     */\n    releaseDatePrecision?: string;\n    /**\n     * \n     * @type {TrackSimplePage}\n     * @memberof Album\n     */\n    tracks?: TrackSimplePage;\n    /**\n     * The object type: \\'album\\'.\n     * @type {string}\n     * @memberof Album\n     */\n    type?: string;\n    /**\n     * The Spotify URI for the album.\n     * @type {string}\n     * @memberof Album\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface AlbumCopyrights\n */\nexport interface AlbumCopyrights {\n    /**\n     * The copyright text for this album.\n     * @type {string}\n     * @memberof AlbumCopyrights\n     */\n    text?: string;\n    /**\n     * The type of copyright: C = the copyright, P = the sound recording (performance) copyright.\n     * @type {string}\n     * @memberof AlbumCopyrights\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface AlbumSimple\n */\nexport interface AlbumSimple {\n    /**\n     * The type of the album: one of \\'album\\', \\'single\\', or \\'compilation\\'.\n     * @type {string}\n     * @memberof AlbumSimple\n     */\n    albumType?: string;\n    /**\n     * The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.\n     * @type {Array<string>}\n     * @memberof AlbumSimple\n     */\n    availableMarkets?: Array<string>;\n    /**\n     * Known external URLs for this album.\n     * @type {{ [key: string]: string; }}\n     * @memberof AlbumSimple\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * A link to the Web API endpoint providing full details of the album.\n     * @type {string}\n     * @memberof AlbumSimple\n     */\n    href?: string;\n    /**\n     * The Spotify ID for the album.\n     * @type {string}\n     * @memberof AlbumSimple\n     */\n    id?: string;\n    /**\n     * The cover art for the album in various sizes, widest first.\n     * @type {Array<Image>}\n     * @memberof AlbumSimple\n     */\n    images?: Array<Image>;\n    /**\n     * The name of the album.\n     * @type {string}\n     * @memberof AlbumSimple\n     */\n    name?: string;\n    /**\n     * The object type: \\'album\\'.\n     * @type {string}\n     * @memberof AlbumSimple\n     */\n    type?: string;\n    /**\n     * The Spotify URI for the album.\n     * @type {string}\n     * @memberof AlbumSimple\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface AlbumSimplePage\n */\nexport interface AlbumSimplePage {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof AlbumSimplePage\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<AlbumSimple>}\n     * @memberof AlbumSimplePage\n     */\n    items?: Array<AlbumSimple>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof AlbumSimplePage\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof AlbumSimplePage\n     */\n    next?: string;\n    /**\n     * The offset of the items returned (as set in the query or by default).\n     * @type {number}\n     * @memberof AlbumSimplePage\n     */\n    offset?: number;\n    /**\n     * URL to the previous page of items. (null if none)\n     * @type {string}\n     * @memberof AlbumSimplePage\n     */\n    previous?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof AlbumSimplePage\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface AlbumTrackPage\n */\nexport interface AlbumTrackPage {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof AlbumTrackPage\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<TrackSimple>}\n     * @memberof AlbumTrackPage\n     */\n    items?: Array<TrackSimple>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof AlbumTrackPage\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof AlbumTrackPage\n     */\n    next?: string;\n    /**\n     * The offset of the items returned (as set in the query or by default).\n     * @type {number}\n     * @memberof AlbumTrackPage\n     */\n    offset?: number;\n    /**\n     * URL to the previous page of items. (null if none)\n     * @type {string}\n     * @memberof AlbumTrackPage\n     */\n    previous?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof AlbumTrackPage\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface Artist\n */\nexport interface Artist {\n    /**\n     * Known external URLs for this artist.\n     * @type {{ [key: string]: string; }}\n     * @memberof Artist\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * \n     * @type {Followers}\n     * @memberof Artist\n     */\n    followers?: Followers;\n    /**\n     * A list of the genres the artist is associated with. For example: \\'Prog Rock\\', \\'Post-Grunge\\'. (If not yet classified, the array is empty.)\n     * @type {Array<string>}\n     * @memberof Artist\n     */\n    genres?: Array<string>;\n    /**\n     * A link to the Web API endpoint providing full details of the artist.\n     * @type {string}\n     * @memberof Artist\n     */\n    href?: string;\n    /**\n     * The Spotify ID for the artist.\n     * @type {string}\n     * @memberof Artist\n     */\n    id?: string;\n    /**\n     * Images of the artist in various sizes, widest first.\n     * @type {Array<Image>}\n     * @memberof Artist\n     */\n    images?: Array<Image>;\n    /**\n     * The name of the artist.\n     * @type {string}\n     * @memberof Artist\n     */\n    name?: string;\n    /**\n     * The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist\\'s popularity is calculated from the popularity of all the artist\\'s tracks.\n     * @type {number}\n     * @memberof Artist\n     */\n    popularity?: number;\n    /**\n     * The object type: \\'artist\\'\n     * @type {string}\n     * @memberof Artist\n     */\n    type?: string;\n    /**\n     * The Spotify URI for the artist.\n     * @type {string}\n     * @memberof Artist\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface ArtistSimple\n */\nexport interface ArtistSimple {\n    /**\n     * Known external URLs for this artist.\n     * @type {{ [key: string]: string; }}\n     * @memberof ArtistSimple\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * A link to the Web API endpoint providing full details of the artist.\n     * @type {string}\n     * @memberof ArtistSimple\n     */\n    href?: string;\n    /**\n     * The Spotify ID for the artist.\n     * @type {string}\n     * @memberof ArtistSimple\n     */\n    id?: string;\n    /**\n     * The name of the artist.\n     * @type {string}\n     * @memberof ArtistSimple\n     */\n    name?: string;\n    /**\n     * The object type: \\'artist\\'\n     * @type {string}\n     * @memberof ArtistSimple\n     */\n    type?: string;\n    /**\n     * The Spotify URI for the artist.\n     * @type {string}\n     * @memberof ArtistSimple\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface Category\n */\nexport interface Category {\n    /**\n     * A link to the Web API endpoint returning full details of the category.\n     * @type {string}\n     * @memberof Category\n     */\n    href?: string;\n    /**\n     * \n     * @type {Array<Image>}\n     * @memberof Category\n     */\n    icons?: Array<Image>;\n    /**\n     * The Spotify category ID of the category.\n     * @type {string}\n     * @memberof Category\n     */\n    id?: string;\n    /**\n     * The name of the category.\n     * @type {string}\n     * @memberof Category\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface CategoryPage\n */\nexport interface CategoryPage {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof CategoryPage\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<Category>}\n     * @memberof CategoryPage\n     */\n    items?: Array<Category>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof CategoryPage\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof CategoryPage\n     */\n    next?: string;\n    /**\n     * The offset of the items returned (as set in the query or by default).\n     * @type {number}\n     * @memberof CategoryPage\n     */\n    offset?: number;\n    /**\n     * URL to the previous page of items. (null if none)\n     * @type {string}\n     * @memberof CategoryPage\n     */\n    previous?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof CategoryPage\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface CurrentUserProfile\n */\nexport interface CurrentUserProfile {\n    /**\n     * The user\\'s date-of-birth. This field is only available when the current user has granted access to the user-read-birthdate scope.\n     * @type {string}\n     * @memberof CurrentUserProfile\n     */\n    birthdate?: string;\n    /**\n     * The country of the user, as set in the user\\'s account profile. An ISO 3166-1 alpha-2 country code. This field is only available when the current user has granted access to the user-read-private scope.\n     * @type {string}\n     * @memberof CurrentUserProfile\n     */\n    country?: string;\n    /**\n     * The name displayed on the user\\'s profile.\n     * @type {string}\n     * @memberof CurrentUserProfile\n     */\n    displayName?: string;\n    /**\n     * The user\\'s email address, as entered by the user when creating their account. This email address is unverified; there is no proof that it actually belongs to the user. This field is only available when the current user has granted access to the user-read-email scope.\n     * @type {string}\n     * @memberof CurrentUserProfile\n     */\n    email?: string;\n    /**\n     * Known external URLs for this user.\n     * @type {{ [key: string]: string; }}\n     * @memberof CurrentUserProfile\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * \n     * @type {Followers}\n     * @memberof CurrentUserProfile\n     */\n    followers?: Followers;\n    /**\n     * A link to the Web API endpoint for this user.\n     * @type {string}\n     * @memberof CurrentUserProfile\n     */\n    href?: string;\n    /**\n     * The Spotify ID for this user.\n     * @type {string}\n     * @memberof CurrentUserProfile\n     */\n    id?: string;\n    /**\n     * The user\\'s Spotify subscription level: \\'premium\\', \\'free\\', etc. (The subscription level \\'open\\' can be considered the same as \\'free\\'.) This field is only available when the current user has granted access to the user-read-private scope.\n     * @type {string}\n     * @memberof CurrentUserProfile\n     */\n    product?: string;\n    /**\n     * The object type: \\'user\\'\n     * @type {string}\n     * @memberof CurrentUserProfile\n     */\n    type?: string;\n    /**\n     * The Spotify URI for the user.\n     * @type {string}\n     * @memberof CurrentUserProfile\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface FeaturedPlaylists\n */\nexport interface FeaturedPlaylists {\n    /**\n     * A sentence describing the context for the featured playlists.\n     * @type {string}\n     * @memberof FeaturedPlaylists\n     */\n    message?: string;\n    /**\n     * \n     * @type {PlaylistSimplePage}\n     * @memberof FeaturedPlaylists\n     */\n    playlists?: PlaylistSimplePage;\n}\n/**\n * Information about the followers of the artist.\n * @export\n * @interface Followers\n */\nexport interface Followers {\n    /**\n     * A link to the Web API endpoint providing full details of the followers; null if not available.\n     * @type {string}\n     * @memberof Followers\n     */\n    href?: string;\n    /**\n     * The total number of followers.\n     * @type {number}\n     * @memberof Followers\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface Image\n */\nexport interface Image {\n    /**\n     * The image height in pixels. If unknown: null or not returned.\n     * @type {number}\n     * @memberof Image\n     */\n    height?: number;\n    /**\n     * The source URL of the image.\n     * @type {string}\n     * @memberof Image\n     */\n    url?: string;\n    /**\n     * The image width in pixels. If unknown: null or not returned.\n     * @type {number}\n     * @memberof Image\n     */\n    width?: number;\n}\n/**\n * \n * @export\n * @interface InlineObject\n */\nexport interface InlineObject {\n    /**\n     * \n     * @type {string}\n     * @memberof InlineObject\n     */\n    name: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof InlineObject\n     */\n    _public?: boolean;\n}\n/**\n * \n * @export\n * @interface InlineObject1\n */\nexport interface InlineObject1 {\n    /**\n     * \n     * @type {string}\n     * @memberof InlineObject1\n     */\n    name?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof InlineObject1\n     */\n    _public?: boolean;\n}\n/**\n * \n * @export\n * @interface InlineObject2\n */\nexport interface InlineObject2 {\n    /**\n     * \n     * @type {boolean}\n     * @memberof InlineObject2\n     */\n    _public?: boolean;\n}\n/**\n * \n * @export\n * @interface InlineObject3\n */\nexport interface InlineObject3 {\n    /**\n     * \n     * @type {Array<object>}\n     * @memberof InlineObject3\n     */\n    uris: Array<object>;\n}\n/**\n * \n * @export\n * @interface InlineObject4\n */\nexport interface InlineObject4 {\n    /**\n     * \n     * @type {Array<object>}\n     * @memberof InlineObject4\n     */\n    tracks: Array<object>;\n}\n/**\n * \n * @export\n * @interface InlineResponse200\n */\nexport interface InlineResponse200 {\n    /**\n     * \n     * @type {Array<Album>}\n     * @memberof InlineResponse200\n     */\n    albums?: Array<Album>;\n}\n/**\n * \n * @export\n * @interface InlineResponse2001\n */\nexport interface InlineResponse2001 {\n    /**\n     * \n     * @type {Array<Artist>}\n     * @memberof InlineResponse2001\n     */\n    artists?: Array<Artist>;\n}\n/**\n * \n * @export\n * @interface InlineResponse2002\n */\nexport interface InlineResponse2002 {\n    /**\n     * \n     * @type {Array<Track>}\n     * @memberof InlineResponse2002\n     */\n    tracks?: Array<Track>;\n}\n/**\n * \n * @export\n * @interface InlineResponse2003\n */\nexport interface InlineResponse2003 {\n    /**\n     * \n     * @type {PlaylistSimplePage}\n     * @memberof InlineResponse2003\n     */\n    playlists?: PlaylistSimplePage;\n}\n/**\n * \n * @export\n * @interface Playlist\n */\nexport interface Playlist {\n    /**\n     * True if the owner allows other users to modify the playlist.\n     * @type {boolean}\n     * @memberof Playlist\n     */\n    collaborative?: boolean;\n    /**\n     * The playlist description. Only returned for modified, verified playlists, otherwise null.\n     * @type {string}\n     * @memberof Playlist\n     */\n    description?: string;\n    /**\n     * Known external URLs for this album.\n     * @type {{ [key: string]: string; }}\n     * @memberof Playlist\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * \n     * @type {PlaylistFollowers}\n     * @memberof Playlist\n     */\n    followers?: PlaylistFollowers;\n    /**\n     * A link to the Web API endpoint providing full details of the playlist.\n     * @type {string}\n     * @memberof Playlist\n     */\n    href?: string;\n    /**\n     * The Spotify ID of the playlist.\n     * @type {string}\n     * @memberof Playlist\n     */\n    id?: string;\n    /**\n     * The cover art for the album in various sizes, widest first.\n     * @type {Array<Image>}\n     * @memberof Playlist\n     */\n    images?: Array<Image>;\n    /**\n     * The name of the playlist.\n     * @type {string}\n     * @memberof Playlist\n     */\n    name?: string;\n    /**\n     * \n     * @type {UserProfile}\n     * @memberof Playlist\n     */\n    owner?: UserProfile;\n    /**\n     * The playlist\\'s public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists.\n     * @type {boolean}\n     * @memberof Playlist\n     */\n    _public?: boolean;\n    /**\n     * The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version\n     * @type {string}\n     * @memberof Playlist\n     */\n    snapshotId?: string;\n    /**\n     * \n     * @type {PlaylistTrackPage}\n     * @memberof Playlist\n     */\n    tracks?: PlaylistTrackPage;\n    /**\n     * The object type: \\'playlist\\'.\n     * @type {string}\n     * @memberof Playlist\n     */\n    type?: string;\n    /**\n     * Spotify URI of the playlist.\n     * @type {string}\n     * @memberof Playlist\n     */\n    uri?: string;\n}\n/**\n * Information about the followers of the playlist.\n * @export\n * @interface PlaylistFollowers\n */\nexport interface PlaylistFollowers {\n    /**\n     * A link to the Web API endpoint providing full details of the followers; null if not available.\n     * @type {string}\n     * @memberof PlaylistFollowers\n     */\n    href?: string;\n    /**\n     * The total number of followers.\n     * @type {number}\n     * @memberof PlaylistFollowers\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface PlaylistSimple\n */\nexport interface PlaylistSimple {\n    /**\n     * True if the owner allows other users to modify the playlist.\n     * @type {boolean}\n     * @memberof PlaylistSimple\n     */\n    collaborative?: boolean;\n    /**\n     * Known external URLs for this album.\n     * @type {{ [key: string]: string; }}\n     * @memberof PlaylistSimple\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * A link to the Web API endpoint providing full details of the playlist.\n     * @type {string}\n     * @memberof PlaylistSimple\n     */\n    href?: string;\n    /**\n     * The Spotify ID of the playlist.\n     * @type {string}\n     * @memberof PlaylistSimple\n     */\n    id?: string;\n    /**\n     * The cover art for the album in various sizes, widest first.\n     * @type {Array<Image>}\n     * @memberof PlaylistSimple\n     */\n    images?: Array<Image>;\n    /**\n     * The name of the playlist.\n     * @type {string}\n     * @memberof PlaylistSimple\n     */\n    name?: string;\n    /**\n     * \n     * @type {UserProfile}\n     * @memberof PlaylistSimple\n     */\n    owner?: UserProfile;\n    /**\n     * The playlist\\'s public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists.\n     * @type {boolean}\n     * @memberof PlaylistSimple\n     */\n    _public?: boolean;\n    /**\n     * The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version\n     * @type {string}\n     * @memberof PlaylistSimple\n     */\n    snapshotId?: string;\n    /**\n     * \n     * @type {PlaylistSimpleTracks}\n     * @memberof PlaylistSimple\n     */\n    tracks?: PlaylistSimpleTracks;\n    /**\n     * The object type: \\'playlist\\'.\n     * @type {string}\n     * @memberof PlaylistSimple\n     */\n    type?: string;\n    /**\n     * Spotify URI of the playlist.\n     * @type {string}\n     * @memberof PlaylistSimple\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface PlaylistSimplePage\n */\nexport interface PlaylistSimplePage {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof PlaylistSimplePage\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<PlaylistSimple>}\n     * @memberof PlaylistSimplePage\n     */\n    items?: Array<PlaylistSimple>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof PlaylistSimplePage\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof PlaylistSimplePage\n     */\n    next?: string;\n    /**\n     * The offset of the items returned (as set in the query or by default).\n     * @type {number}\n     * @memberof PlaylistSimplePage\n     */\n    offset?: number;\n    /**\n     * URL to the previous page of items. (null if none)\n     * @type {string}\n     * @memberof PlaylistSimplePage\n     */\n    previous?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof PlaylistSimplePage\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface PlaylistSimpleTracks\n */\nexport interface PlaylistSimpleTracks {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof PlaylistSimpleTracks\n     */\n    href?: string;\n    /**\n     * The total number of tracks available to return.\n     * @type {number}\n     * @memberof PlaylistSimpleTracks\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface PlaylistSnapshot\n */\nexport interface PlaylistSnapshot {\n    /**\n     * The version identifier for the modified playlist. Can be supplied in other requests to target a specific playlist version.\n     * @type {string}\n     * @memberof PlaylistSnapshot\n     */\n    snapshotId?: string;\n}\n/**\n * \n * @export\n * @interface PlaylistTrack\n */\nexport interface PlaylistTrack {\n    /**\n     * The date and time the track was added in ISO 8601 format. Note that some very old playlists may return null in this field.\n     * @type {string}\n     * @memberof PlaylistTrack\n     */\n    addedAt?: string;\n    /**\n     * \n     * @type {UserProfile}\n     * @memberof PlaylistTrack\n     */\n    addedBy?: UserProfile;\n    /**\n     * Whether this track is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.\n     * @type {boolean}\n     * @memberof PlaylistTrack\n     */\n    isLocal?: boolean;\n    /**\n     * \n     * @type {Track}\n     * @memberof PlaylistTrack\n     */\n    track?: Track;\n}\n/**\n * \n * @export\n * @interface PlaylistTrackPage\n */\nexport interface PlaylistTrackPage {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof PlaylistTrackPage\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<PlaylistTrack>}\n     * @memberof PlaylistTrackPage\n     */\n    items?: Array<PlaylistTrack>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof PlaylistTrackPage\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof PlaylistTrackPage\n     */\n    next?: string;\n    /**\n     * The offset of the items returned (as set in the query or by default).\n     * @type {number}\n     * @memberof PlaylistTrackPage\n     */\n    offset?: number;\n    /**\n     * URL to the previous page of items. (null if none)\n     * @type {string}\n     * @memberof PlaylistTrackPage\n     */\n    previous?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof PlaylistTrackPage\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface SavedTrack\n */\nexport interface SavedTrack {\n    /**\n     * The date and time the track was added in ISO 8601 format. Note that some very old playlists may return null in this field.\n     * @type {string}\n     * @memberof SavedTrack\n     */\n    addedAt?: string;\n    /**\n     * \n     * @type {Track}\n     * @memberof SavedTrack\n     */\n    track?: Track;\n}\n/**\n * \n * @export\n * @interface SavedTrackPage\n */\nexport interface SavedTrackPage {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof SavedTrackPage\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<SavedTrack>}\n     * @memberof SavedTrackPage\n     */\n    items?: Array<SavedTrack>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof SavedTrackPage\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof SavedTrackPage\n     */\n    next?: string;\n    /**\n     * The offset of the items returned (as set in the query or by default).\n     * @type {number}\n     * @memberof SavedTrackPage\n     */\n    offset?: number;\n    /**\n     * URL to the previous page of items. (null if none)\n     * @type {string}\n     * @memberof SavedTrackPage\n     */\n    previous?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof SavedTrackPage\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface Search\n */\nexport interface Search {\n    /**\n     * \n     * @type {SearchAlbums}\n     * @memberof Search\n     */\n    albums?: SearchAlbums;\n    /**\n     * \n     * @type {SearchArtists}\n     * @memberof Search\n     */\n    artists?: SearchArtists;\n    /**\n     * \n     * @type {SearchTracks}\n     * @memberof Search\n     */\n    tracks?: SearchTracks;\n}\n/**\n * Present if the type of search includes \\'album\\'.\n * @export\n * @interface SearchAlbums\n */\nexport interface SearchAlbums {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof SearchAlbums\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<AlbumSimple>}\n     * @memberof SearchAlbums\n     */\n    items?: Array<AlbumSimple>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof SearchAlbums\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof SearchAlbums\n     */\n    next?: string;\n    /**\n     * The offset of the items returned (as set in the query or by default).\n     * @type {number}\n     * @memberof SearchAlbums\n     */\n    offset?: number;\n    /**\n     * URL to the previous page of items. (null if none)\n     * @type {string}\n     * @memberof SearchAlbums\n     */\n    previous?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof SearchAlbums\n     */\n    total?: number;\n}\n/**\n * Present if the type of search includes \\'artist\\'.\n * @export\n * @interface SearchArtists\n */\nexport interface SearchArtists {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof SearchArtists\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<Artist>}\n     * @memberof SearchArtists\n     */\n    items?: Array<Artist>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof SearchArtists\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof SearchArtists\n     */\n    next?: string;\n    /**\n     * The offset of the items returned (as set in the query or by default).\n     * @type {number}\n     * @memberof SearchArtists\n     */\n    offset?: number;\n    /**\n     * URL to the previous page of items. (null if none)\n     * @type {string}\n     * @memberof SearchArtists\n     */\n    previous?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof SearchArtists\n     */\n    total?: number;\n}\n/**\n * Present if the type of search includes \\'track\\'.\n * @export\n * @interface SearchTracks\n */\nexport interface SearchTracks {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof SearchTracks\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<Track>}\n     * @memberof SearchTracks\n     */\n    items?: Array<Track>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof SearchTracks\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof SearchTracks\n     */\n    next?: string;\n    /**\n     * The offset of the items returned (as set in the query or by default).\n     * @type {number}\n     * @memberof SearchTracks\n     */\n    offset?: number;\n    /**\n     * URL to the previous page of items. (null if none)\n     * @type {string}\n     * @memberof SearchTracks\n     */\n    previous?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof SearchTracks\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface Track\n */\nexport interface Track {\n    /**\n     * \n     * @type {AlbumSimple}\n     * @memberof Track\n     */\n    album?: AlbumSimple;\n    /**\n     * The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.\n     * @type {Array<ArtistSimple>}\n     * @memberof Track\n     */\n    artists?: Array<ArtistSimple>;\n    /**\n     * A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code. \n     * @type {Array<string>}\n     * @memberof Track\n     */\n    availableMarkets?: Array<string>;\n    /**\n     * The disc number (usually 1 unless the album consists of more than one disc).\n     * @type {number}\n     * @memberof Track\n     */\n    discNumber?: number;\n    /**\n     * The track length in milliseconds.\n     * @type {number}\n     * @memberof Track\n     */\n    durationMs?: number;\n    /**\n     * Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown).\n     * @type {boolean}\n     * @memberof Track\n     */\n    explicit?: boolean;\n    /**\n     * Known external IDs for the track.\n     * @type {{ [key: string]: string; }}\n     * @memberof Track\n     */\n    externalIds?: { [key: string]: string; };\n    /**\n     * Known external URLs for this track.\n     * @type {{ [key: string]: string; }}\n     * @memberof Track\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * A link to the Web API endpoint providing full details of the track.\n     * @type {string}\n     * @memberof Track\n     */\n    href?: string;\n    /**\n     * The Spotify ID for the track.\n     * @type {string}\n     * @memberof Track\n     */\n    id?: string;\n    /**\n     * Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.\n     * @type {boolean}\n     * @memberof Track\n     */\n    isPlayable?: boolean;\n    /**\n     * \n     * @type {TrackLinkedFrom}\n     * @memberof Track\n     */\n    linkedFrom?: TrackLinkedFrom;\n    /**\n     * The name of the track.\n     * @type {string}\n     * @memberof Track\n     */\n    name?: string;\n    /**\n     * A URL to a 30 second preview (MP3 format) of the track.\n     * @type {string}\n     * @memberof Track\n     */\n    previewUrl?: string;\n    /**\n     * The number of the track. If an album has several discs, the track number is the number on the specified disc.\n     * @type {number}\n     * @memberof Track\n     */\n    trackNumber?: number;\n    /**\n     * The object type: \\'track\\'.\n     * @type {string}\n     * @memberof Track\n     */\n    type?: string;\n    /**\n     * The Spotify URI for the track.\n     * @type {string}\n     * @memberof Track\n     */\n    uri?: string;\n}\n/**\n * Part of the response when Track Relinking is applied, and the requested track has been replaced with different track. The track in the linked_from object contains information about the originally requested track.\n * @export\n * @interface TrackLinkedFrom\n */\nexport interface TrackLinkedFrom {\n    /**\n     * Known external URLs for this track.\n     * @type {{ [key: string]: string; }}\n     * @memberof TrackLinkedFrom\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * A link to the Web API endpoint providing full details of the track.\n     * @type {string}\n     * @memberof TrackLinkedFrom\n     */\n    href?: string;\n    /**\n     * The Spotify ID for the track.\n     * @type {string}\n     * @memberof TrackLinkedFrom\n     */\n    id?: string;\n    /**\n     * The object type: \\'track\\'.\n     * @type {string}\n     * @memberof TrackLinkedFrom\n     */\n    type?: string;\n    /**\n     * The Spotify URI for the track.\n     * @type {string}\n     * @memberof TrackLinkedFrom\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface TrackSimple\n */\nexport interface TrackSimple {\n    /**\n     * The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.\n     * @type {Array<ArtistSimple>}\n     * @memberof TrackSimple\n     */\n    artists?: Array<ArtistSimple>;\n    /**\n     * A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code. \n     * @type {Array<string>}\n     * @memberof TrackSimple\n     */\n    availableMarkets?: Array<string>;\n    /**\n     * The disc number (usually 1 unless the album consists of more than one disc).\n     * @type {number}\n     * @memberof TrackSimple\n     */\n    discNumber?: number;\n    /**\n     * The track length in milliseconds.\n     * @type {number}\n     * @memberof TrackSimple\n     */\n    durationMs?: number;\n    /**\n     * Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown).\n     * @type {boolean}\n     * @memberof TrackSimple\n     */\n    explicit?: boolean;\n    /**\n     * Known external URLs for this track.\n     * @type {{ [key: string]: string; }}\n     * @memberof TrackSimple\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * A link to the Web API endpoint providing full details of the track.\n     * @type {string}\n     * @memberof TrackSimple\n     */\n    href?: string;\n    /**\n     * The Spotify ID for the track.\n     * @type {string}\n     * @memberof TrackSimple\n     */\n    id?: string;\n    /**\n     * Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.\n     * @type {boolean}\n     * @memberof TrackSimple\n     */\n    isPlayable?: boolean;\n    /**\n     * \n     * @type {TrackLinkedFrom}\n     * @memberof TrackSimple\n     */\n    linkedFrom?: TrackLinkedFrom;\n    /**\n     * The name of the track.\n     * @type {string}\n     * @memberof TrackSimple\n     */\n    name?: string;\n    /**\n     * A URL to a 30 second preview (MP3 format) of the track.\n     * @type {string}\n     * @memberof TrackSimple\n     */\n    previewUrl?: string;\n    /**\n     * The number of the track. If an album has several discs, the track number is the number on the specified disc.\n     * @type {number}\n     * @memberof TrackSimple\n     */\n    trackNumber?: number;\n    /**\n     * The object type: \\'track\\'.\n     * @type {string}\n     * @memberof TrackSimple\n     */\n    type?: string;\n    /**\n     * The Spotify URI for the track.\n     * @type {string}\n     * @memberof TrackSimple\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface TrackSimplePage\n */\nexport interface TrackSimplePage {\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof TrackSimplePage\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<TrackSimple>}\n     * @memberof TrackSimplePage\n     */\n    items?: Array<TrackSimple>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof TrackSimplePage\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof TrackSimplePage\n     */\n    next?: string;\n    /**\n     * The offset of the items returned (as set in the query or by default).\n     * @type {number}\n     * @memberof TrackSimplePage\n     */\n    offset?: number;\n    /**\n     * URL to the previous page of items. (null if none)\n     * @type {string}\n     * @memberof TrackSimplePage\n     */\n    previous?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof TrackSimplePage\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface UserFollowed\n */\nexport interface UserFollowed {\n    /**\n     * \n     * @type {UserFollowedArtists}\n     * @memberof UserFollowed\n     */\n    artists?: UserFollowedArtists;\n}\n/**\n * Present if the type of followe items is \\'artist\\'.\n * @export\n * @interface UserFollowedArtists\n */\nexport interface UserFollowedArtists {\n    /**\n     * \n     * @type {UserFollowedArtistsCursor}\n     * @memberof UserFollowedArtists\n     */\n    cursor?: UserFollowedArtistsCursor;\n    /**\n     * A link to the Web API endpoint returning the full result of the request.\n     * @type {string}\n     * @memberof UserFollowedArtists\n     */\n    href?: string;\n    /**\n     * The requested data.\n     * @type {Array<Artist>}\n     * @memberof UserFollowedArtists\n     */\n    items?: Array<Artist>;\n    /**\n     * The maximum number of items in the response (as set in the query or by default).\n     * @type {number}\n     * @memberof UserFollowedArtists\n     */\n    limit?: number;\n    /**\n     * URL to the next page of items. (null if none)\n     * @type {string}\n     * @memberof UserFollowedArtists\n     */\n    next?: string;\n    /**\n     * The total number of items available to return.\n     * @type {number}\n     * @memberof UserFollowedArtists\n     */\n    total?: number;\n}\n/**\n * The cursors used to find the next set of items.\n * @export\n * @interface UserFollowedArtistsCursor\n */\nexport interface UserFollowedArtistsCursor {\n    /**\n     * The cursor to use as key to find the next page of items.\n     * @type {string}\n     * @memberof UserFollowedArtistsCursor\n     */\n    after?: string;\n}\n/**\n * \n * @export\n * @interface UserProfile\n */\nexport interface UserProfile {\n    /**\n     * The name displayed on the user\\'s profile.\n     * @type {string}\n     * @memberof UserProfile\n     */\n    displayName?: string;\n    /**\n     * Known external URLs for this user.\n     * @type {{ [key: string]: string; }}\n     * @memberof UserProfile\n     */\n    externalUrls?: { [key: string]: string; };\n    /**\n     * \n     * @type {Followers}\n     * @memberof UserProfile\n     */\n    followers?: Followers;\n    /**\n     * A link to the Web API endpoint for this user.\n     * @type {string}\n     * @memberof UserProfile\n     */\n    href?: string;\n    /**\n     * The Spotify ID for this user.\n     * @type {string}\n     * @memberof UserProfile\n     */\n    id?: string;\n    /**\n     * The object type: \\'user\\'\n     * @type {string}\n     * @memberof UserProfile\n     */\n    type?: string;\n    /**\n     * The Spotify URI for the user.\n     * @type {string}\n     * @memberof UserProfile\n     */\n    uri?: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        albumsGet(ids: string, market?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling albumsGet.');\n            }\n            const localVarPath = `/albums`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n            if (market !== undefined) {\n                localVarQueryParameter['market'] = market;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get an Album](https://developer.spotify.com/web-api/get-album/) \n         * @param {string} id The Spotify ID for the album\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        albumsIdGet(id: string, market?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling albumsIdGet.');\n            }\n            const localVarPath = `/albums/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (market !== undefined) {\n                localVarQueryParameter['market'] = market;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get an Album\\'s Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) \n         * @param {string} id The Spotify ID for the album\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        albumsIdTracksGet(id: string, limit?: number, offset?: number, market?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling albumsIdTracksGet.');\n            }\n            const localVarPath = `/albums/{id}/tracks`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (market !== undefined) {\n                localVarQueryParameter['market'] = market;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsGet(ids: string, options: any = {}): RequestArgs {\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling artistsGet.');\n            }\n            const localVarPath = `/artists`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get an Artist\\'s Albums](https://developer.spotify.com/web-api/get-artists-albums/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [albumType] Filter by album types\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdAlbumsGet(id: string, limit?: number, offset?: number, albumType?: string, market?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling artistsIdAlbumsGet.');\n            }\n            const localVarPath = `/artists/{id}/albums`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (albumType !== undefined) {\n                localVarQueryParameter['album_type'] = albumType;\n            }\n\n            if (market !== undefined) {\n                localVarQueryParameter['market'] = market;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get an Artist](https://developer.spotify.com/web-api/get-artist/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdGet(id: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling artistsIdGet.');\n            }\n            const localVarPath = `/artists/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get an Artist\\'s Related Artists](https://developer.spotify.com/web-api/get-related-artists/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdRelatedArtistsGet(id: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling artistsIdRelatedArtistsGet.');\n            }\n            const localVarPath = `/artists/{id}/related-artists`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get an Artist\\'s Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {string} country The country (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdTopTracksGet(id: string, country: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling artistsIdTopTracksGet.');\n            }\n            // verify required parameter 'country' is not null or undefined\n            if (country === null || country === undefined) {\n                throw new RequiredError('country','Required parameter country was null or undefined when calling artistsIdTopTracksGet.');\n            }\n            const localVarPath = `/artists/{id}/top-tracks`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (country !== undefined) {\n                localVarQueryParameter['country'] = country;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/) \n         * @param {string} categoryId The Spotify ID of the category you wish to fetch.\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseCategoriesCategoryIdGet(categoryId: string, country?: string, locale?: string, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'categoryId' is not null or undefined\n            if (categoryId === null || categoryId === undefined) {\n                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling browseCategoriesCategoryIdGet.');\n            }\n            const localVarPath = `/browse/categories/{category_id}`\n                .replace(`{${\"category_id\"}}`, encodeURIComponent(String(categoryId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (country !== undefined) {\n                localVarQueryParameter['country'] = country;\n            }\n\n            if (locale !== undefined) {\n                localVarQueryParameter['locale'] = locale;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get a Category\\'s playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) \n         * @param {string} categoryId The Spotify ID of the category you wish to fetch.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseCategoriesCategoryIdPlaylistsGet(categoryId: string, limit?: number, offset?: number, country?: string, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'categoryId' is not null or undefined\n            if (categoryId === null || categoryId === undefined) {\n                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling browseCategoriesCategoryIdPlaylistsGet.');\n            }\n            const localVarPath = `/browse/categories/{category_id}/playlists`\n                .replace(`{${\"category_id\"}}`, encodeURIComponent(String(categoryId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (country !== undefined) {\n                localVarQueryParameter['country'] = country;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseCategoriesGet(limit?: number, offset?: number, country?: string, locale?: string, accept?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/browse/categories`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (country !== undefined) {\n                localVarQueryParameter['country'] = country;\n            }\n\n            if (locale !== undefined) {\n                localVarQueryParameter['locale'] = locale;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n         * @param {string} [timestamp] A timestamp in ISO 8601 format (yyyy-MM-dd\\&#39;T\\&#39;HH:mm:ss) with the user\\&#39;s local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: \\&quot;2014-10-23T09:00:00\\&quot; for a user whose local time is 9AM. \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseFeaturedPlaylistsGet(limit?: number, offset?: number, country?: string, locale?: string, timestamp?: string, accept?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/browse/featured-playlists`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (country !== undefined) {\n                localVarQueryParameter['country'] = country;\n            }\n\n            if (locale !== undefined) {\n                localVarQueryParameter['locale'] = locale;\n            }\n\n            if (timestamp !== undefined) {\n                localVarQueryParameter['timestamp'] = timestamp;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseNewReleasesGet(limit?: number, offset?: number, country?: string, accept?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/browse/new-releases`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (country !== undefined) {\n                localVarQueryParameter['country'] = country;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/) \n         * @param {'artist' | 'user'} type The type to follow.\n         * @param {string} ids A comma-separated string of the artists or users ids.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingContainsGet(type: 'artist' | 'user', ids: string, options: any = {}): RequestArgs {\n            // verify required parameter 'type' is not null or undefined\n            if (type === null || type === undefined) {\n                throw new RequiredError('type','Required parameter type was null or undefined when calling meFollowingContainsGet.');\n            }\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meFollowingContainsGet.');\n            }\n            const localVarPath = `/me/following/contains`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) \n         * @param {'artist' | 'user'} type The type to unfollow.\n         * @param {string} ids A comma-separated list of the artists or users ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingDelete(type: 'artist' | 'user', ids: string, options: any = {}): RequestArgs {\n            // verify required parameter 'type' is not null or undefined\n            if (type === null || type === undefined) {\n                throw new RequiredError('type','Required parameter type was null or undefined when calling meFollowingDelete.');\n            }\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meFollowingDelete.');\n            }\n            const localVarPath = `/me/following`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get User\\'s Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) \n         * @param {'artist'} type The ID type, currently only artist is supported.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {string} [after] The last artist ID retrieved from the previous request.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingGet(type: 'artist', limit?: number, after?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'type' is not null or undefined\n            if (type === null || type === undefined) {\n                throw new RequiredError('type','Required parameter type was null or undefined when calling meFollowingGet.');\n            }\n            const localVarPath = `/me/following`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (after !== undefined) {\n                localVarQueryParameter['after'] = after;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) \n         * @param {'artist' | 'user'} type The type to follow.\n         * @param {string} ids A comma-separated list of the artists or users ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingPut(type: 'artist' | 'user', ids: string, options: any = {}): RequestArgs {\n            // verify required parameter 'type' is not null or undefined\n            if (type === null || type === undefined) {\n                throw new RequiredError('type','Required parameter type was null or undefined when calling meFollowingPut.');\n            }\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meFollowingPut.');\n            }\n            const localVarPath = `/me/following`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get Current User\\'s Profile](https://developer.spotify.com/web-api/get-current-users-profile/) \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meGet(options: any = {}): RequestArgs {\n            const localVarPath = `/me`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Check Current User\\'s Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksContainsGet(ids: string, options: any = {}): RequestArgs {\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meTracksContainsGet.');\n            }\n            const localVarPath = `/me/tracks/contains`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksDelete(ids: string, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meTracksDelete.');\n            }\n            const localVarPath = `/me/tracks`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get Current User\\'s Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksGet(limit?: number, offset?: number, market?: string, accept?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/me/tracks`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (market !== undefined) {\n                localVarQueryParameter['market'] = market;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksPut(ids: string, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meTracksPut.');\n            }\n            const localVarPath = `/me/tracks`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Search for an Item](https://developer.spotify.com/web-api/search-item/) \n         * @param {string} q The search query\\&#39;s keywords (and optional field filters). The search is not case-sensitive: \\&#39;roadhouse\\&#39; will match \\&#39;Roadhouse\\&#39;, \\&#39;roadHouse\\&#39;, etc. Keywords will be matched in any order unless surrounded by quotes, thus q&#x3D;roadhouse&amp;20blues will match both \\&#39;Blues Roadhouse\\&#39; and \\&#39;Roadhouse of the Blues\\&#39;. Quotation marks can be used to limit the match to a phrase: q&#x3D;roadhouse&amp;20blues will match \\&#39;My Roadhouse Blues\\&#39; but not \\&#39;Roadhouse of the Blues\\&#39;. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q&#x3D;album:gold%20artist:abba&amp;type&#x3D;album will search for albums with the text \\&#39;gold\\&#39; in the album name and the text \\&#39;abba\\&#39; in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q&#x3D;damian%20genre:reggae-pop&amp;type&#x3D;artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist\\&#39;s name and/or description.\n         * @param {string} type A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q&#x3D;name:abacab&amp;type&#x3D;album,track will return both albums and tracks with \\&quot;abacab\\&quot; in their name.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchGet(q: string, type: string, limit?: number, offset?: number, market?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'q' is not null or undefined\n            if (q === null || q === undefined) {\n                throw new RequiredError('q','Required parameter q was null or undefined when calling searchGet.');\n            }\n            // verify required parameter 'type' is not null or undefined\n            if (type === null || type === undefined) {\n                throw new RequiredError('type','Required parameter type was null or undefined when calling searchGet.');\n            }\n            const localVarPath = `/search`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (q !== undefined) {\n                localVarQueryParameter['q'] = q;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (market !== undefined) {\n                localVarQueryParameter['market'] = market;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tracksGet(ids: string, market?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling tracksGet.');\n            }\n            const localVarPath = `/tracks`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n            if (market !== undefined) {\n                localVarQueryParameter['market'] = market;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get a Track](https://developer.spotify.com/web-api/get-track/) \n         * @param {string} id \n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tracksIdGet(id: string, market?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling tracksIdGet.');\n            }\n            const localVarPath = `/tracks/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (market !== undefined) {\n                localVarQueryParameter['market'] = market;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get a User\\'s Profile](https://developer.spotify.com/web-api/get-users-profile/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdGet(userId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdGet.');\n            }\n            const localVarPath = `/users/{user_id}`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get a List of a User\\'s Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsGet(userId: string, limit?: number, offset?: number, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsGet.');\n            }\n            const localVarPath = `/users/{user_id}/playlists`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {string} ids A comma-separated list of users ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId: string, playlistId: string, ids: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersContainsGet.');\n            }\n            // verify required parameter 'playlistId' is not null or undefined\n            if (playlistId === null || playlistId === undefined) {\n                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersContainsGet.');\n            }\n            // verify required parameter 'ids' is not null or undefined\n            if (ids === null || ids === undefined) {\n                throw new RequiredError('ids','Required parameter ids was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersContainsGet.');\n            }\n            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/followers/contains`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)))\n                .replace(`{${\"playlist_id\"}}`, encodeURIComponent(String(playlistId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (ids !== undefined) {\n                localVarQueryParameter['ids'] = ids;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdFollowersDelete(userId: string, playlistId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersDelete.');\n            }\n            // verify required parameter 'playlistId' is not null or undefined\n            if (playlistId === null || playlistId === undefined) {\n                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersDelete.');\n            }\n            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/followers`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)))\n                .replace(`{${\"playlist_id\"}}`, encodeURIComponent(String(playlistId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject2} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdFollowersPut(userId: string, playlistId: string, body: InlineObject2, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersPut.');\n            }\n            // verify required parameter 'playlistId' is not null or undefined\n            if (playlistId === null || playlistId === undefined) {\n                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersPut.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersPut.');\n            }\n            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/followers`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)))\n                .replace(`{${\"playlist_id\"}}`, encodeURIComponent(String(playlistId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {string} [fields] A comma-separated list of fields to filter query\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdGet(userId: string, playlistId: string, fields?: string, market?: string, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdGet.');\n            }\n            // verify required parameter 'playlistId' is not null or undefined\n            if (playlistId === null || playlistId === undefined) {\n                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdGet.');\n            }\n            const localVarPath = `/users/{user_id}/playlists/{playlist_id}`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)))\n                .replace(`{${\"playlist_id\"}}`, encodeURIComponent(String(playlistId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (market !== undefined) {\n                localVarQueryParameter['market'] = market;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Change a Playlist\\'s Details](https://developer.spotify.com/web-api/change-playlist-details/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject1} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdPut(userId: string, playlistId: string, body: InlineObject1, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdPut.');\n            }\n            // verify required parameter 'playlistId' is not null or undefined\n            if (playlistId === null || playlistId === undefined) {\n                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdPut.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPlaylistsPlaylistIdPut.');\n            }\n            const localVarPath = `/users/{user_id}/playlists/{playlist_id}`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)))\n                .replace(`{${\"playlist_id\"}}`, encodeURIComponent(String(playlistId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject4} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksDelete(userId: string, playlistId: string, body: InlineObject4, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksDelete.');\n            }\n            // verify required parameter 'playlistId' is not null or undefined\n            if (playlistId === null || playlistId === undefined) {\n                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksDelete.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksDelete.');\n            }\n            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/tracks`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)))\n                .replace(`{${\"playlist_id\"}}`, encodeURIComponent(String(playlistId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Get a Playlist\\'s Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [fields] A comma-separated list of fields to filter query\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksGet(userId: string, playlistId: string, limit?: number, offset?: number, fields?: string, market?: string, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksGet.');\n            }\n            // verify required parameter 'playlistId' is not null or undefined\n            if (playlistId === null || playlistId === undefined) {\n                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksGet.');\n            }\n            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/tracks`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)))\n                .replace(`{${\"playlist_id\"}}`, encodeURIComponent(String(playlistId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (limit !== undefined) {\n                localVarQueryParameter['limit'] = limit;\n            }\n\n            if (offset !== undefined) {\n                localVarQueryParameter['offset'] = offset;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (market !== undefined) {\n                localVarQueryParameter['market'] = market;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {string} uris A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.\n         * @param {number} [position] The position to insert the tracks, a zero-based index\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksPost(userId: string, playlistId: string, uris: string, position?: number, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPost.');\n            }\n            // verify required parameter 'playlistId' is not null or undefined\n            if (playlistId === null || playlistId === undefined) {\n                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPost.');\n            }\n            // verify required parameter 'uris' is not null or undefined\n            if (uris === null || uris === undefined) {\n                throw new RequiredError('uris','Required parameter uris was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPost.');\n            }\n            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/tracks`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)))\n                .replace(`{${\"playlist_id\"}}`, encodeURIComponent(String(playlistId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (position !== undefined) {\n                localVarQueryParameter['position'] = position;\n            }\n\n            if (uris !== undefined) {\n                localVarQueryParameter['uris'] = uris;\n            }\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Reorder or replace a Playlist\\'s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject3} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksPut(userId: string, playlistId: string, body: InlineObject3, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPut.');\n            }\n            // verify required parameter 'playlistId' is not null or undefined\n            if (playlistId === null || playlistId === undefined) {\n                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPut.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPut.');\n            }\n            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/tracks`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)))\n                .replace(`{${\"playlist_id\"}}`, encodeURIComponent(String(playlistId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {InlineObject} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPost(userId: string, body: InlineObject, accept?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPost.');\n            }\n            // verify required parameter 'body' is not null or undefined\n            if (body === null || body === undefined) {\n                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPlaylistsPost.');\n            }\n            const localVarPath = `/users/{user_id}/playlists`\n                .replace(`{${\"user_id\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (accept !== undefined && accept !== null) {\n                localVarHeaderParameter['Accept'] = String(accept);\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof body !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        albumsGet(ids: string, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).albumsGet(ids, market, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get an Album](https://developer.spotify.com/web-api/get-album/) \n         * @param {string} id The Spotify ID for the album\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        albumsIdGet(id: string, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).albumsIdGet(id, market, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get an Album\\'s Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) \n         * @param {string} id The Spotify ID for the album\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        albumsIdTracksGet(id: string, limit?: number, offset?: number, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackSimplePage> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).albumsIdTracksGet(id, limit, offset, market, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsGet(ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).artistsGet(ids, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get an Artist\\'s Albums](https://developer.spotify.com/web-api/get-artists-albums/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [albumType] Filter by album types\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdAlbumsGet(id: string, limit?: number, offset?: number, albumType?: string, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumSimplePage> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).artistsIdAlbumsGet(id, limit, offset, albumType, market, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get an Artist](https://developer.spotify.com/web-api/get-artist/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Artist> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).artistsIdGet(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get an Artist\\'s Related Artists](https://developer.spotify.com/web-api/get-related-artists/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdRelatedArtistsGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).artistsIdRelatedArtistsGet(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get an Artist\\'s Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {string} country The country (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdTopTracksGet(id: string, country: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).artistsIdTopTracksGet(id, country, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/) \n         * @param {string} categoryId The Spotify ID of the category you wish to fetch.\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseCategoriesCategoryIdGet(categoryId: string, country?: string, locale?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).browseCategoriesCategoryIdGet(categoryId, country, locale, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get a Category\\'s playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) \n         * @param {string} categoryId The Spotify ID of the category you wish to fetch.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseCategoriesCategoryIdPlaylistsGet(categoryId: string, limit?: number, offset?: number, country?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).browseCategoriesCategoryIdPlaylistsGet(categoryId, limit, offset, country, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseCategoriesGet(limit?: number, offset?: number, country?: string, locale?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryPage> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).browseCategoriesGet(limit, offset, country, locale, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n         * @param {string} [timestamp] A timestamp in ISO 8601 format (yyyy-MM-dd\\&#39;T\\&#39;HH:mm:ss) with the user\\&#39;s local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: \\&quot;2014-10-23T09:00:00\\&quot; for a user whose local time is 9AM. \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseFeaturedPlaylistsGet(limit?: number, offset?: number, country?: string, locale?: string, timestamp?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturedPlaylists> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).browseFeaturedPlaylistsGet(limit, offset, country, locale, timestamp, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseNewReleasesGet(limit?: number, offset?: number, country?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumSimplePage> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).browseNewReleasesGet(limit, offset, country, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/) \n         * @param {'artist' | 'user'} type The type to follow.\n         * @param {string} ids A comma-separated string of the artists or users ids.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingContainsGet(type: 'artist' | 'user', ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meFollowingContainsGet(type, ids, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) \n         * @param {'artist' | 'user'} type The type to unfollow.\n         * @param {string} ids A comma-separated list of the artists or users ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingDelete(type: 'artist' | 'user', ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meFollowingDelete(type, ids, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get User\\'s Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) \n         * @param {'artist'} type The ID type, currently only artist is supported.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {string} [after] The last artist ID retrieved from the previous request.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingGet(type: 'artist', limit?: number, after?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFollowed> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meFollowingGet(type, limit, after, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) \n         * @param {'artist' | 'user'} type The type to follow.\n         * @param {string} ids A comma-separated list of the artists or users ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingPut(type: 'artist' | 'user', ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meFollowingPut(type, ids, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get Current User\\'s Profile](https://developer.spotify.com/web-api/get-current-users-profile/) \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUserProfile> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meGet(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Check Current User\\'s Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksContainsGet(ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meTracksContainsGet(ids, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksDelete(ids: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meTracksDelete(ids, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get Current User\\'s Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksGet(limit?: number, offset?: number, market?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedTrackPage> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meTracksGet(limit, offset, market, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksPut(ids: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meTracksPut(ids, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Search for an Item](https://developer.spotify.com/web-api/search-item/) \n         * @param {string} q The search query\\&#39;s keywords (and optional field filters). The search is not case-sensitive: \\&#39;roadhouse\\&#39; will match \\&#39;Roadhouse\\&#39;, \\&#39;roadHouse\\&#39;, etc. Keywords will be matched in any order unless surrounded by quotes, thus q&#x3D;roadhouse&amp;20blues will match both \\&#39;Blues Roadhouse\\&#39; and \\&#39;Roadhouse of the Blues\\&#39;. Quotation marks can be used to limit the match to a phrase: q&#x3D;roadhouse&amp;20blues will match \\&#39;My Roadhouse Blues\\&#39; but not \\&#39;Roadhouse of the Blues\\&#39;. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q&#x3D;album:gold%20artist:abba&amp;type&#x3D;album will search for albums with the text \\&#39;gold\\&#39; in the album name and the text \\&#39;abba\\&#39; in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q&#x3D;damian%20genre:reggae-pop&amp;type&#x3D;artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist\\&#39;s name and/or description.\n         * @param {string} type A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q&#x3D;name:abacab&amp;type&#x3D;album,track will return both albums and tracks with \\&quot;abacab\\&quot; in their name.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchGet(q: string, type: string, limit?: number, offset?: number, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Search> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).searchGet(q, type, limit, offset, market, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tracksGet(ids: string, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tracksGet(ids, market, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get a Track](https://developer.spotify.com/web-api/get-track/) \n         * @param {string} id \n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tracksIdGet(id: string, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Track> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tracksIdGet(id, market, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get a User\\'s Profile](https://developer.spotify.com/web-api/get-users-profile/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdGet(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfile> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdGet(userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get a List of a User\\'s Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsGet(userId: string, limit?: number, offset?: number, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistSimplePage> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsGet(userId, limit, offset, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {string} ids A comma-separated list of users ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId: string, playlistId: string, ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId, playlistId, ids, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdFollowersDelete(userId: string, playlistId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdFollowersDelete(userId, playlistId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject2} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdFollowersPut(userId: string, playlistId: string, body: InlineObject2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdFollowersPut(userId, playlistId, body, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {string} [fields] A comma-separated list of fields to filter query\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdGet(userId: string, playlistId: string, fields?: string, market?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Playlist> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdGet(userId, playlistId, fields, market, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Change a Playlist\\'s Details](https://developer.spotify.com/web-api/change-playlist-details/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject1} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdPut(userId: string, playlistId: string, body: InlineObject1, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdPut(userId, playlistId, body, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject4} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksDelete(userId: string, playlistId: string, body: InlineObject4, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistSnapshot> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdTracksDelete(userId, playlistId, body, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Get a Playlist\\'s Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [fields] A comma-separated list of fields to filter query\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksGet(userId: string, playlistId: string, limit?: number, offset?: number, fields?: string, market?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistTrackPage> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdTracksGet(userId, playlistId, limit, offset, fields, market, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {string} uris A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.\n         * @param {number} [position] The position to insert the tracks, a zero-based index\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksPost(userId: string, playlistId: string, uris: string, position?: number, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistSnapshot> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdTracksPost(userId, playlistId, uris, position, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Reorder or replace a Playlist\\'s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject3} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksPut(userId: string, playlistId: string, body: InlineObject3, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistSnapshot> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdTracksPut(userId, playlistId, body, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {InlineObject} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPost(userId: string, body: InlineObject, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Playlist> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPost(userId, body, accept, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        albumsGet(ids: string, market?: string, options?: any) {\n            return DefaultApiFp(configuration).albumsGet(ids, market, options)(axios, basePath);\n        },\n        /**\n         * [Get an Album](https://developer.spotify.com/web-api/get-album/) \n         * @param {string} id The Spotify ID for the album\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        albumsIdGet(id: string, market?: string, options?: any) {\n            return DefaultApiFp(configuration).albumsIdGet(id, market, options)(axios, basePath);\n        },\n        /**\n         * [Get an Album\\'s Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) \n         * @param {string} id The Spotify ID for the album\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        albumsIdTracksGet(id: string, limit?: number, offset?: number, market?: string, options?: any) {\n            return DefaultApiFp(configuration).albumsIdTracksGet(id, limit, offset, market, options)(axios, basePath);\n        },\n        /**\n         * [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsGet(ids: string, options?: any) {\n            return DefaultApiFp(configuration).artistsGet(ids, options)(axios, basePath);\n        },\n        /**\n         * [Get an Artist\\'s Albums](https://developer.spotify.com/web-api/get-artists-albums/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [albumType] Filter by album types\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdAlbumsGet(id: string, limit?: number, offset?: number, albumType?: string, market?: string, options?: any) {\n            return DefaultApiFp(configuration).artistsIdAlbumsGet(id, limit, offset, albumType, market, options)(axios, basePath);\n        },\n        /**\n         * [Get an Artist](https://developer.spotify.com/web-api/get-artist/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdGet(id: string, options?: any) {\n            return DefaultApiFp(configuration).artistsIdGet(id, options)(axios, basePath);\n        },\n        /**\n         * [Get an Artist\\'s Related Artists](https://developer.spotify.com/web-api/get-related-artists/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdRelatedArtistsGet(id: string, options?: any) {\n            return DefaultApiFp(configuration).artistsIdRelatedArtistsGet(id, options)(axios, basePath);\n        },\n        /**\n         * [Get an Artist\\'s Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) \n         * @param {string} id The Spotify ID for the artist\n         * @param {string} country The country (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        artistsIdTopTracksGet(id: string, country: string, options?: any) {\n            return DefaultApiFp(configuration).artistsIdTopTracksGet(id, country, options)(axios, basePath);\n        },\n        /**\n         * [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/) \n         * @param {string} categoryId The Spotify ID of the category you wish to fetch.\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseCategoriesCategoryIdGet(categoryId: string, country?: string, locale?: string, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).browseCategoriesCategoryIdGet(categoryId, country, locale, accept, options)(axios, basePath);\n        },\n        /**\n         * [Get a Category\\'s playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) \n         * @param {string} categoryId The Spotify ID of the category you wish to fetch.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseCategoriesCategoryIdPlaylistsGet(categoryId: string, limit?: number, offset?: number, country?: string, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).browseCategoriesCategoryIdPlaylistsGet(categoryId, limit, offset, country, accept, options)(axios, basePath);\n        },\n        /**\n         * [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseCategoriesGet(limit?: number, offset?: number, country?: string, locale?: string, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).browseCategoriesGet(limit, offset, country, locale, accept, options)(axios, basePath);\n        },\n        /**\n         * [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n         * @param {string} [timestamp] A timestamp in ISO 8601 format (yyyy-MM-dd\\&#39;T\\&#39;HH:mm:ss) with the user\\&#39;s local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: \\&quot;2014-10-23T09:00:00\\&quot; for a user whose local time is 9AM. \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseFeaturedPlaylistsGet(limit?: number, offset?: number, country?: string, locale?: string, timestamp?: string, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).browseFeaturedPlaylistsGet(limit, offset, country, locale, timestamp, accept, options)(axios, basePath);\n        },\n        /**\n         * [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        browseNewReleasesGet(limit?: number, offset?: number, country?: string, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).browseNewReleasesGet(limit, offset, country, accept, options)(axios, basePath);\n        },\n        /**\n         * [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/) \n         * @param {'artist' | 'user'} type The type to follow.\n         * @param {string} ids A comma-separated string of the artists or users ids.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingContainsGet(type: 'artist' | 'user', ids: string, options?: any) {\n            return DefaultApiFp(configuration).meFollowingContainsGet(type, ids, options)(axios, basePath);\n        },\n        /**\n         * [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) \n         * @param {'artist' | 'user'} type The type to unfollow.\n         * @param {string} ids A comma-separated list of the artists or users ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingDelete(type: 'artist' | 'user', ids: string, options?: any) {\n            return DefaultApiFp(configuration).meFollowingDelete(type, ids, options)(axios, basePath);\n        },\n        /**\n         * [Get User\\'s Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) \n         * @param {'artist'} type The ID type, currently only artist is supported.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {string} [after] The last artist ID retrieved from the previous request.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingGet(type: 'artist', limit?: number, after?: string, options?: any) {\n            return DefaultApiFp(configuration).meFollowingGet(type, limit, after, options)(axios, basePath);\n        },\n        /**\n         * [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) \n         * @param {'artist' | 'user'} type The type to follow.\n         * @param {string} ids A comma-separated list of the artists or users ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meFollowingPut(type: 'artist' | 'user', ids: string, options?: any) {\n            return DefaultApiFp(configuration).meFollowingPut(type, ids, options)(axios, basePath);\n        },\n        /**\n         * [Get Current User\\'s Profile](https://developer.spotify.com/web-api/get-current-users-profile/) \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meGet(options?: any) {\n            return DefaultApiFp(configuration).meGet(options)(axios, basePath);\n        },\n        /**\n         * [Check Current User\\'s Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksContainsGet(ids: string, options?: any) {\n            return DefaultApiFp(configuration).meTracksContainsGet(ids, options)(axios, basePath);\n        },\n        /**\n         * [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksDelete(ids: string, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).meTracksDelete(ids, accept, options)(axios, basePath);\n        },\n        /**\n         * [Get Current User\\'s Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) \n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksGet(limit?: number, offset?: number, market?: string, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).meTracksGet(limit, offset, market, accept, options)(axios, basePath);\n        },\n        /**\n         * [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        meTracksPut(ids: string, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).meTracksPut(ids, accept, options)(axios, basePath);\n        },\n        /**\n         * [Search for an Item](https://developer.spotify.com/web-api/search-item/) \n         * @param {string} q The search query\\&#39;s keywords (and optional field filters). The search is not case-sensitive: \\&#39;roadhouse\\&#39; will match \\&#39;Roadhouse\\&#39;, \\&#39;roadHouse\\&#39;, etc. Keywords will be matched in any order unless surrounded by quotes, thus q&#x3D;roadhouse&amp;20blues will match both \\&#39;Blues Roadhouse\\&#39; and \\&#39;Roadhouse of the Blues\\&#39;. Quotation marks can be used to limit the match to a phrase: q&#x3D;roadhouse&amp;20blues will match \\&#39;My Roadhouse Blues\\&#39; but not \\&#39;Roadhouse of the Blues\\&#39;. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q&#x3D;album:gold%20artist:abba&amp;type&#x3D;album will search for albums with the text \\&#39;gold\\&#39; in the album name and the text \\&#39;abba\\&#39; in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q&#x3D;damian%20genre:reggae-pop&amp;type&#x3D;artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist\\&#39;s name and/or description.\n         * @param {string} type A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q&#x3D;name:abacab&amp;type&#x3D;album,track will return both albums and tracks with \\&quot;abacab\\&quot; in their name.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchGet(q: string, type: string, limit?: number, offset?: number, market?: string, options?: any) {\n            return DefaultApiFp(configuration).searchGet(q, type, limit, offset, market, options)(axios, basePath);\n        },\n        /**\n         * [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) \n         * @param {string} ids A comma-separated list of IDs\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tracksGet(ids: string, market?: string, options?: any) {\n            return DefaultApiFp(configuration).tracksGet(ids, market, options)(axios, basePath);\n        },\n        /**\n         * [Get a Track](https://developer.spotify.com/web-api/get-track/) \n         * @param {string} id \n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        tracksIdGet(id: string, market?: string, options?: any) {\n            return DefaultApiFp(configuration).tracksIdGet(id, market, options)(axios, basePath);\n        },\n        /**\n         * [Get a User\\'s Profile](https://developer.spotify.com/web-api/get-users-profile/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdGet(userId: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdGet(userId, options)(axios, basePath);\n        },\n        /**\n         * [Get a List of a User\\'s Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsGet(userId: string, limit?: number, offset?: number, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsGet(userId, limit, offset, accept, options)(axios, basePath);\n        },\n        /**\n         * [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {string} ids A comma-separated list of users ids\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId: string, playlistId: string, ids: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId, playlistId, ids, options)(axios, basePath);\n        },\n        /**\n         * [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdFollowersDelete(userId: string, playlistId: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdFollowersDelete(userId, playlistId, options)(axios, basePath);\n        },\n        /**\n         * [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject2} body \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdFollowersPut(userId: string, playlistId: string, body: InlineObject2, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdFollowersPut(userId, playlistId, body, options)(axios, basePath);\n        },\n        /**\n         * [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {string} [fields] A comma-separated list of fields to filter query\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdGet(userId: string, playlistId: string, fields?: string, market?: string, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdGet(userId, playlistId, fields, market, accept, options)(axios, basePath);\n        },\n        /**\n         * [Change a Playlist\\'s Details](https://developer.spotify.com/web-api/change-playlist-details/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject1} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdPut(userId: string, playlistId: string, body: InlineObject1, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdPut(userId, playlistId, body, accept, options)(axios, basePath);\n        },\n        /**\n         * [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject4} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksDelete(userId: string, playlistId: string, body: InlineObject4, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdTracksDelete(userId, playlistId, body, accept, options)(axios, basePath);\n        },\n        /**\n         * [Get a Playlist\\'s Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {number} [limit] The maximum number of items to return\n         * @param {number} [offset] The index of the first item to return\n         * @param {string} [fields] A comma-separated list of fields to filter query\n         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksGet(userId: string, playlistId: string, limit?: number, offset?: number, fields?: string, market?: string, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdTracksGet(userId, playlistId, limit, offset, fields, market, accept, options)(axios, basePath);\n        },\n        /**\n         * [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {string} uris A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.\n         * @param {number} [position] The position to insert the tracks, a zero-based index\n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksPost(userId: string, playlistId: string, uris: string, position?: number, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdTracksPost(userId, playlistId, uris, position, accept, options)(axios, basePath);\n        },\n        /**\n         * [Reorder or replace a Playlist\\'s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {string} playlistId The Spotify playlist ID.\n         * @param {InlineObject3} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPlaylistIdTracksPut(userId: string, playlistId: string, body: InlineObject3, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdTracksPut(userId, playlistId, body, accept, options)(axios, basePath);\n        },\n        /**\n         * [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) \n         * @param {string} userId The user\\&#39;s Spotify user ID.\n         * @param {InlineObject} body \n         * @param {string} [accept] It is used to set specified media type.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        usersUserIdPlaylistsPost(userId: string, body: InlineObject, accept?: string, options?: any) {\n            return DefaultApiFp(configuration).usersUserIdPlaylistsPost(userId, body, accept, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) \n     * @param {string} ids A comma-separated list of IDs\n     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public albumsGet(ids: string, market?: string, options?: any) {\n        return DefaultApiFp(this.configuration).albumsGet(ids, market, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get an Album](https://developer.spotify.com/web-api/get-album/) \n     * @param {string} id The Spotify ID for the album\n     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public albumsIdGet(id: string, market?: string, options?: any) {\n        return DefaultApiFp(this.configuration).albumsIdGet(id, market, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get an Album\\'s Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) \n     * @param {string} id The Spotify ID for the album\n     * @param {number} [limit] The maximum number of items to return\n     * @param {number} [offset] The index of the first item to return\n     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public albumsIdTracksGet(id: string, limit?: number, offset?: number, market?: string, options?: any) {\n        return DefaultApiFp(this.configuration).albumsIdTracksGet(id, limit, offset, market, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) \n     * @param {string} ids A comma-separated list of IDs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public artistsGet(ids: string, options?: any) {\n        return DefaultApiFp(this.configuration).artistsGet(ids, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get an Artist\\'s Albums](https://developer.spotify.com/web-api/get-artists-albums/) \n     * @param {string} id The Spotify ID for the artist\n     * @param {number} [limit] The maximum number of items to return\n     * @param {number} [offset] The index of the first item to return\n     * @param {string} [albumType] Filter by album types\n     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public artistsIdAlbumsGet(id: string, limit?: number, offset?: number, albumType?: string, market?: string, options?: any) {\n        return DefaultApiFp(this.configuration).artistsIdAlbumsGet(id, limit, offset, albumType, market, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get an Artist](https://developer.spotify.com/web-api/get-artist/) \n     * @param {string} id The Spotify ID for the artist\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public artistsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).artistsIdGet(id, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get an Artist\\'s Related Artists](https://developer.spotify.com/web-api/get-related-artists/) \n     * @param {string} id The Spotify ID for the artist\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public artistsIdRelatedArtistsGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).artistsIdRelatedArtistsGet(id, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get an Artist\\'s Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) \n     * @param {string} id The Spotify ID for the artist\n     * @param {string} country The country (an ISO 3166-1 alpha-2 country code)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public artistsIdTopTracksGet(id: string, country: string, options?: any) {\n        return DefaultApiFp(this.configuration).artistsIdTopTracksGet(id, country, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/) \n     * @param {string} categoryId The Spotify ID of the category you wish to fetch.\n     * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n     * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public browseCategoriesCategoryIdGet(categoryId: string, country?: string, locale?: string, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).browseCategoriesCategoryIdGet(categoryId, country, locale, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get a Category\\'s playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) \n     * @param {string} categoryId The Spotify ID of the category you wish to fetch.\n     * @param {number} [limit] The maximum number of items to return\n     * @param {number} [offset] The index of the first item to return\n     * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public browseCategoriesCategoryIdPlaylistsGet(categoryId: string, limit?: number, offset?: number, country?: string, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).browseCategoriesCategoryIdPlaylistsGet(categoryId, limit, offset, country, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/) \n     * @param {number} [limit] The maximum number of items to return\n     * @param {number} [offset] The index of the first item to return\n     * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n     * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public browseCategoriesGet(limit?: number, offset?: number, country?: string, locale?: string, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).browseCategoriesGet(limit, offset, country, locale, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) \n     * @param {number} [limit] The maximum number of items to return\n     * @param {number} [offset] The index of the first item to return\n     * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n     * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \\&quot;Spanish (Mexico)\\&quot;. \n     * @param {string} [timestamp] A timestamp in ISO 8601 format (yyyy-MM-dd\\&#39;T\\&#39;HH:mm:ss) with the user\\&#39;s local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: \\&quot;2014-10-23T09:00:00\\&quot; for a user whose local time is 9AM. \n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public browseFeaturedPlaylistsGet(limit?: number, offset?: number, country?: string, locale?: string, timestamp?: string, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).browseFeaturedPlaylistsGet(limit, offset, country, locale, timestamp, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) \n     * @param {number} [limit] The maximum number of items to return\n     * @param {number} [offset] The index of the first item to return\n     * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)\n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public browseNewReleasesGet(limit?: number, offset?: number, country?: string, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).browseNewReleasesGet(limit, offset, country, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/) \n     * @param {'artist' | 'user'} type The type to follow.\n     * @param {string} ids A comma-separated string of the artists or users ids.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public meFollowingContainsGet(type: 'artist' | 'user', ids: string, options?: any) {\n        return DefaultApiFp(this.configuration).meFollowingContainsGet(type, ids, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) \n     * @param {'artist' | 'user'} type The type to unfollow.\n     * @param {string} ids A comma-separated list of the artists or users ids\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public meFollowingDelete(type: 'artist' | 'user', ids: string, options?: any) {\n        return DefaultApiFp(this.configuration).meFollowingDelete(type, ids, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get User\\'s Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) \n     * @param {'artist'} type The ID type, currently only artist is supported.\n     * @param {number} [limit] The maximum number of items to return\n     * @param {string} [after] The last artist ID retrieved from the previous request.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public meFollowingGet(type: 'artist', limit?: number, after?: string, options?: any) {\n        return DefaultApiFp(this.configuration).meFollowingGet(type, limit, after, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) \n     * @param {'artist' | 'user'} type The type to follow.\n     * @param {string} ids A comma-separated list of the artists or users ids\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public meFollowingPut(type: 'artist' | 'user', ids: string, options?: any) {\n        return DefaultApiFp(this.configuration).meFollowingPut(type, ids, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get Current User\\'s Profile](https://developer.spotify.com/web-api/get-current-users-profile/) \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public meGet(options?: any) {\n        return DefaultApiFp(this.configuration).meGet(options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Check Current User\\'s Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) \n     * @param {string} ids A comma-separated list of IDs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public meTracksContainsGet(ids: string, options?: any) {\n        return DefaultApiFp(this.configuration).meTracksContainsGet(ids, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) \n     * @param {string} ids A comma-separated list of IDs\n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public meTracksDelete(ids: string, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).meTracksDelete(ids, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get Current User\\'s Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) \n     * @param {number} [limit] The maximum number of items to return\n     * @param {number} [offset] The index of the first item to return\n     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public meTracksGet(limit?: number, offset?: number, market?: string, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).meTracksGet(limit, offset, market, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) \n     * @param {string} ids A comma-separated list of IDs\n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public meTracksPut(ids: string, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).meTracksPut(ids, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Search for an Item](https://developer.spotify.com/web-api/search-item/) \n     * @param {string} q The search query\\&#39;s keywords (and optional field filters). The search is not case-sensitive: \\&#39;roadhouse\\&#39; will match \\&#39;Roadhouse\\&#39;, \\&#39;roadHouse\\&#39;, etc. Keywords will be matched in any order unless surrounded by quotes, thus q&#x3D;roadhouse&amp;20blues will match both \\&#39;Blues Roadhouse\\&#39; and \\&#39;Roadhouse of the Blues\\&#39;. Quotation marks can be used to limit the match to a phrase: q&#x3D;roadhouse&amp;20blues will match \\&#39;My Roadhouse Blues\\&#39; but not \\&#39;Roadhouse of the Blues\\&#39;. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q&#x3D;album:gold%20artist:abba&amp;type&#x3D;album will search for albums with the text \\&#39;gold\\&#39; in the album name and the text \\&#39;abba\\&#39; in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q&#x3D;damian%20genre:reggae-pop&amp;type&#x3D;artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist\\&#39;s name and/or description.\n     * @param {string} type A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q&#x3D;name:abacab&amp;type&#x3D;album,track will return both albums and tracks with \\&quot;abacab\\&quot; in their name.\n     * @param {number} [limit] The maximum number of items to return\n     * @param {number} [offset] The index of the first item to return\n     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public searchGet(q: string, type: string, limit?: number, offset?: number, market?: string, options?: any) {\n        return DefaultApiFp(this.configuration).searchGet(q, type, limit, offset, market, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) \n     * @param {string} ids A comma-separated list of IDs\n     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public tracksGet(ids: string, market?: string, options?: any) {\n        return DefaultApiFp(this.configuration).tracksGet(ids, market, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get a Track](https://developer.spotify.com/web-api/get-track/) \n     * @param {string} id \n     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public tracksIdGet(id: string, market?: string, options?: any) {\n        return DefaultApiFp(this.configuration).tracksIdGet(id, market, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get a User\\'s Profile](https://developer.spotify.com/web-api/get-users-profile/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdGet(userId: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdGet(userId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get a List of a User\\'s Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {number} [limit] The maximum number of items to return\n     * @param {number} [offset] The index of the first item to return\n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsGet(userId: string, limit?: number, offset?: number, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsGet(userId, limit, offset, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {string} playlistId The Spotify playlist ID.\n     * @param {string} ids A comma-separated list of users ids\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId: string, playlistId: string, ids: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId, playlistId, ids, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {string} playlistId The Spotify playlist ID.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsPlaylistIdFollowersDelete(userId: string, playlistId: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdFollowersDelete(userId, playlistId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {string} playlistId The Spotify playlist ID.\n     * @param {InlineObject2} body \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsPlaylistIdFollowersPut(userId: string, playlistId: string, body: InlineObject2, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdFollowersPut(userId, playlistId, body, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {string} playlistId The Spotify playlist ID.\n     * @param {string} [fields] A comma-separated list of fields to filter query\n     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsPlaylistIdGet(userId: string, playlistId: string, fields?: string, market?: string, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdGet(userId, playlistId, fields, market, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Change a Playlist\\'s Details](https://developer.spotify.com/web-api/change-playlist-details/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {string} playlistId The Spotify playlist ID.\n     * @param {InlineObject1} body \n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsPlaylistIdPut(userId: string, playlistId: string, body: InlineObject1, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdPut(userId, playlistId, body, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {string} playlistId The Spotify playlist ID.\n     * @param {InlineObject4} body \n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsPlaylistIdTracksDelete(userId: string, playlistId: string, body: InlineObject4, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdTracksDelete(userId, playlistId, body, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Get a Playlist\\'s Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {string} playlistId The Spotify playlist ID.\n     * @param {number} [limit] The maximum number of items to return\n     * @param {number} [offset] The index of the first item to return\n     * @param {string} [fields] A comma-separated list of fields to filter query\n     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)\n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsPlaylistIdTracksGet(userId: string, playlistId: string, limit?: number, offset?: number, fields?: string, market?: string, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdTracksGet(userId, playlistId, limit, offset, fields, market, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {string} playlistId The Spotify playlist ID.\n     * @param {string} uris A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.\n     * @param {number} [position] The position to insert the tracks, a zero-based index\n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsPlaylistIdTracksPost(userId: string, playlistId: string, uris: string, position?: number, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdTracksPost(userId, playlistId, uris, position, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Reorder or replace a Playlist\\'s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {string} playlistId The Spotify playlist ID.\n     * @param {InlineObject3} body \n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsPlaylistIdTracksPut(userId: string, playlistId: string, body: InlineObject3, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdTracksPut(userId, playlistId, body, accept, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) \n     * @param {string} userId The user\\&#39;s Spotify user ID.\n     * @param {InlineObject} body \n     * @param {string} [accept] It is used to set specified media type.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public usersUserIdPlaylistsPost(userId: string, body: InlineObject, accept?: string, options?: any) {\n        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPost(userId, body, accept, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n","// tslint:disable\n/**\n * Spotify\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: v1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport * from \"./api\";\nexport * from \"./configuration\";\n","import mod from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss&\"","// tslint:disable\n/**\n * OMDb\n * The Open Movie Database. The OMDb API is a free web service to obtain movie information, all content and images on the site are contributed and maintained by our users.\n *\n * The version of the OpenAPI document: 1\n * Contact: bfritz@fadingsignal.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://www.omdbapi.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * OMDb\n * The Open Movie Database. The OMDb API is a free web service to obtain movie information, all content and images on the site are contributed and maintained by our users.\n *\n * The version of the OpenAPI document: 1\n * Contact: bfritz@fadingsignal.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface CombinedResult\n */\nexport interface CombinedResult {\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    actors?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    awards?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    boxOffice?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    country?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    DVD?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    director?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    genre?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    language?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    metascore?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    plot?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    poster?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    production?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    rated?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    released?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    response: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    runtime?: string;\n    /**\n     * \n     * @type {Array<CombinedResultSearch>}\n     * @memberof CombinedResult\n     */\n    search?: Array<CombinedResultSearch>;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    website?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    writer?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    year?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    imdbID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    imdbRating?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    imdbVotes?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoConsensus?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoFresh?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoImage?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoMeter?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoRating?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoReviews?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoRotten?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoURL?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoUserMeter?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoUserRating?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    tomatoUserReviews?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    totalResults?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResult\n     */\n    totalSeasons?: string;\n}\n/**\n * \n * @export\n * @interface CombinedResultSearch\n */\nexport interface CombinedResultSearch {\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResultSearch\n     */\n    poster: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResultSearch\n     */\n    title: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResultSearch\n     */\n    type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResultSearch\n     */\n    year: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CombinedResultSearch\n     */\n    imdbID: string;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search\n         * @summary OMDb Search\n         * @param {'json' | 'xml'} r The data type to return.\n         * @param {string} [t] Movie title to search for. One of t, i or s is required.\n         * @param {string} [i] A valid IMDb ID (e.g. tt1285016). One of t, i or s is required.\n         * @param {string} [s] Movie title to search for. One of t, i or s is required.\n         * @param {number} [y] Year of release.\n         * @param {'movie' | 'series' | 'episode'} [type] Type of result to return.\n         * @param {'short' | 'full'} [plot] Return short or full plot.\n         * @param {boolean} [tomatoes] Include Rotten Tomatoes ratings.\n         * @param {number} [v] API version (reserved for future use).\n         * @param {number} [page] Page number to return.\n         * @param {string} [callback] JSONP callback name.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOMDbSearch(r: 'json' | 'xml', t?: string, i?: string, s?: string, y?: number, type?: 'movie' | 'series' | 'episode', plot?: 'short' | 'full', tomatoes?: boolean, v?: number, page?: number, callback?: string, options: any = {}): RequestArgs {\n            // verify required parameter 'r' is not null or undefined\n            if (r === null || r === undefined) {\n                throw new RequiredError('r','Required parameter r was null or undefined when calling getOMDbSearch.');\n            }\n            const localVarPath = `/`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (t !== undefined) {\n                localVarQueryParameter['t'] = t;\n            }\n\n            if (i !== undefined) {\n                localVarQueryParameter['i'] = i;\n            }\n\n            if (s !== undefined) {\n                localVarQueryParameter['s'] = s;\n            }\n\n            if (y !== undefined) {\n                localVarQueryParameter['y'] = y;\n            }\n\n            if (type !== undefined) {\n                localVarQueryParameter['type'] = type;\n            }\n\n            if (plot !== undefined) {\n                localVarQueryParameter['plot'] = plot;\n            }\n\n            if (tomatoes !== undefined) {\n                localVarQueryParameter['tomatoes'] = tomatoes;\n            }\n\n            if (r !== undefined) {\n                localVarQueryParameter['r'] = r;\n            }\n\n            if (v !== undefined) {\n                localVarQueryParameter['v'] = v;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (callback !== undefined) {\n                localVarQueryParameter['callback'] = callback;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search\n         * @summary OMDb Search\n         * @param {'json' | 'xml'} r The data type to return.\n         * @param {string} [t] Movie title to search for. One of t, i or s is required.\n         * @param {string} [i] A valid IMDb ID (e.g. tt1285016). One of t, i or s is required.\n         * @param {string} [s] Movie title to search for. One of t, i or s is required.\n         * @param {number} [y] Year of release.\n         * @param {'movie' | 'series' | 'episode'} [type] Type of result to return.\n         * @param {'short' | 'full'} [plot] Return short or full plot.\n         * @param {boolean} [tomatoes] Include Rotten Tomatoes ratings.\n         * @param {number} [v] API version (reserved for future use).\n         * @param {number} [page] Page number to return.\n         * @param {string} [callback] JSONP callback name.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOMDbSearch(r: 'json' | 'xml', t?: string, i?: string, s?: string, y?: number, type?: 'movie' | 'series' | 'episode', plot?: 'short' | 'full', tomatoes?: boolean, v?: number, page?: number, callback?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CombinedResult> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getOMDbSearch(r, t, i, s, y, type, plot, tomatoes, v, page, callback, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search\n         * @summary OMDb Search\n         * @param {'json' | 'xml'} r The data type to return.\n         * @param {string} [t] Movie title to search for. One of t, i or s is required.\n         * @param {string} [i] A valid IMDb ID (e.g. tt1285016). One of t, i or s is required.\n         * @param {string} [s] Movie title to search for. One of t, i or s is required.\n         * @param {number} [y] Year of release.\n         * @param {'movie' | 'series' | 'episode'} [type] Type of result to return.\n         * @param {'short' | 'full'} [plot] Return short or full plot.\n         * @param {boolean} [tomatoes] Include Rotten Tomatoes ratings.\n         * @param {number} [v] API version (reserved for future use).\n         * @param {number} [page] Page number to return.\n         * @param {string} [callback] JSONP callback name.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getOMDbSearch(r: 'json' | 'xml', t?: string, i?: string, s?: string, y?: number, type?: 'movie' | 'series' | 'episode', plot?: 'short' | 'full', tomatoes?: boolean, v?: number, page?: number, callback?: string, options?: any) {\n            return DefaultApiFp(configuration).getOMDbSearch(r, t, i, s, y, type, plot, tomatoes, v, page, callback, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search\n     * @summary OMDb Search\n     * @param {'json' | 'xml'} r The data type to return.\n     * @param {string} [t] Movie title to search for. One of t, i or s is required.\n     * @param {string} [i] A valid IMDb ID (e.g. tt1285016). One of t, i or s is required.\n     * @param {string} [s] Movie title to search for. One of t, i or s is required.\n     * @param {number} [y] Year of release.\n     * @param {'movie' | 'series' | 'episode'} [type] Type of result to return.\n     * @param {'short' | 'full'} [plot] Return short or full plot.\n     * @param {boolean} [tomatoes] Include Rotten Tomatoes ratings.\n     * @param {number} [v] API version (reserved for future use).\n     * @param {number} [page] Page number to return.\n     * @param {string} [callback] JSONP callback name.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getOMDbSearch(r: 'json' | 'xml', t?: string, i?: string, s?: string, y?: number, type?: 'movie' | 'series' | 'episode', plot?: 'short' | 'full', tomatoes?: boolean, v?: number, page?: number, callback?: string, options?: any) {\n        return DefaultApiFp(this.configuration).getOMDbSearch(r, t, i, s, y, type, plot, tomatoes, v, page, callback, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n","// tslint:disable\n/**\n * Api Documentation\n * Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface Candidate\n */\nexport interface Candidate {\n    /**\n     * \n     * @type {string}\n     * @memberof Candidate\n     */\n    electionYear?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Candidate\n     */\n    firstName?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Candidate\n     */\n    id?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Candidate\n     */\n    lastName?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Candidate\n     */\n    nationalPollingAverage?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Candidate\n     */\n    party?: CandidatePartyEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CandidatePartyEnum {\n    DEMOCRAT = 'DEMOCRAT',\n    REPUBLICAN = 'REPUBLICAN',\n    INDEPENDENT = 'INDEPENDENT'\n}\n\n/**\n * \n * @export\n * @interface ModelAndView\n */\nexport interface ModelAndView {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ModelAndView\n     */\n    empty?: boolean;\n    /**\n     * \n     * @type {object}\n     * @memberof ModelAndView\n     */\n    model?: object;\n    /**\n     * \n     * @type {{ [key: string]: object; }}\n     * @memberof ModelAndView\n     */\n    modelMap?: { [key: string]: object; };\n    /**\n     * \n     * @type {boolean}\n     * @memberof ModelAndView\n     */\n    reference?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelAndView\n     */\n    status?: ModelAndViewStatusEnum;\n    /**\n     * \n     * @type {View}\n     * @memberof ModelAndView\n     */\n    view?: View;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelAndView\n     */\n    viewName?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ModelAndViewStatusEnum {\n    _100CONTINUE = '100 CONTINUE',\n    _101SWITCHINGPROTOCOLS = '101 SWITCHING_PROTOCOLS',\n    _102PROCESSING = '102 PROCESSING',\n    _103CHECKPOINT = '103 CHECKPOINT',\n    _200OK = '200 OK',\n    _201CREATED = '201 CREATED',\n    _202ACCEPTED = '202 ACCEPTED',\n    _203NONAUTHORITATIVEINFORMATION = '203 NON_AUTHORITATIVE_INFORMATION',\n    _204NOCONTENT = '204 NO_CONTENT',\n    _205RESETCONTENT = '205 RESET_CONTENT',\n    _206PARTIALCONTENT = '206 PARTIAL_CONTENT',\n    _207MULTISTATUS = '207 MULTI_STATUS',\n    _208ALREADYREPORTED = '208 ALREADY_REPORTED',\n    _226IMUSED = '226 IM_USED',\n    _300MULTIPLECHOICES = '300 MULTIPLE_CHOICES',\n    _301MOVEDPERMANENTLY = '301 MOVED_PERMANENTLY',\n    _302FOUND = '302 FOUND',\n    _302MOVEDTEMPORARILY = '302 MOVED_TEMPORARILY',\n    _303SEEOTHER = '303 SEE_OTHER',\n    _304NOTMODIFIED = '304 NOT_MODIFIED',\n    _305USEPROXY = '305 USE_PROXY',\n    _307TEMPORARYREDIRECT = '307 TEMPORARY_REDIRECT',\n    _308PERMANENTREDIRECT = '308 PERMANENT_REDIRECT',\n    _400BADREQUEST = '400 BAD_REQUEST',\n    _401UNAUTHORIZED = '401 UNAUTHORIZED',\n    _402PAYMENTREQUIRED = '402 PAYMENT_REQUIRED',\n    _403FORBIDDEN = '403 FORBIDDEN',\n    _404NOTFOUND = '404 NOT_FOUND',\n    _405METHODNOTALLOWED = '405 METHOD_NOT_ALLOWED',\n    _406NOTACCEPTABLE = '406 NOT_ACCEPTABLE',\n    _407PROXYAUTHENTICATIONREQUIRED = '407 PROXY_AUTHENTICATION_REQUIRED',\n    _408REQUESTTIMEOUT = '408 REQUEST_TIMEOUT',\n    _409CONFLICT = '409 CONFLICT',\n    _410GONE = '410 GONE',\n    _411LENGTHREQUIRED = '411 LENGTH_REQUIRED',\n    _412PRECONDITIONFAILED = '412 PRECONDITION_FAILED',\n    _413PAYLOADTOOLARGE = '413 PAYLOAD_TOO_LARGE',\n    _413REQUESTENTITYTOOLARGE = '413 REQUEST_ENTITY_TOO_LARGE',\n    _414URITOOLONG = '414 URI_TOO_LONG',\n    _414REQUESTURITOOLONG = '414 REQUEST_URI_TOO_LONG',\n    _415UNSUPPORTEDMEDIATYPE = '415 UNSUPPORTED_MEDIA_TYPE',\n    _416REQUESTEDRANGENOTSATISFIABLE = '416 REQUESTED_RANGE_NOT_SATISFIABLE',\n    _417EXPECTATIONFAILED = '417 EXPECTATION_FAILED',\n    _418IAMATEAPOT = '418 I_AM_A_TEAPOT',\n    _419INSUFFICIENTSPACEONRESOURCE = '419 INSUFFICIENT_SPACE_ON_RESOURCE',\n    _420METHODFAILURE = '420 METHOD_FAILURE',\n    _421DESTINATIONLOCKED = '421 DESTINATION_LOCKED',\n    _422UNPROCESSABLEENTITY = '422 UNPROCESSABLE_ENTITY',\n    _423LOCKED = '423 LOCKED',\n    _424FAILEDDEPENDENCY = '424 FAILED_DEPENDENCY',\n    _426UPGRADEREQUIRED = '426 UPGRADE_REQUIRED',\n    _428PRECONDITIONREQUIRED = '428 PRECONDITION_REQUIRED',\n    _429TOOMANYREQUESTS = '429 TOO_MANY_REQUESTS',\n    _431REQUESTHEADERFIELDSTOOLARGE = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',\n    _451UNAVAILABLEFORLEGALREASONS = '451 UNAVAILABLE_FOR_LEGAL_REASONS',\n    _500INTERNALSERVERERROR = '500 INTERNAL_SERVER_ERROR',\n    _501NOTIMPLEMENTED = '501 NOT_IMPLEMENTED',\n    _502BADGATEWAY = '502 BAD_GATEWAY',\n    _503SERVICEUNAVAILABLE = '503 SERVICE_UNAVAILABLE',\n    _504GATEWAYTIMEOUT = '504 GATEWAY_TIMEOUT',\n    _505HTTPVERSIONNOTSUPPORTED = '505 HTTP_VERSION_NOT_SUPPORTED',\n    _506VARIANTALSONEGOTIATES = '506 VARIANT_ALSO_NEGOTIATES',\n    _507INSUFFICIENTSTORAGE = '507 INSUFFICIENT_STORAGE',\n    _508LOOPDETECTED = '508 LOOP_DETECTED',\n    _509BANDWIDTHLIMITEXCEEDED = '509 BANDWIDTH_LIMIT_EXCEEDED',\n    _510NOTEXTENDED = '510 NOT_EXTENDED',\n    _511NETWORKAUTHENTICATIONREQUIRED = '511 NETWORK_AUTHENTICATION_REQUIRED'\n}\n\n/**\n * \n * @export\n * @interface View\n */\nexport interface View {\n    /**\n     * \n     * @type {string}\n     * @memberof View\n     */\n    contentType?: string;\n}\n\n/**\n * BasicErrorControllerApi - axios parameter creator\n * @export\n */\nexport const BasicErrorControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingDELETE(options: any = {}): RequestArgs {\n            const localVarPath = `/error`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingGET(options: any = {}): RequestArgs {\n            const localVarPath = `/error`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingHEAD(options: any = {}): RequestArgs {\n            const localVarPath = `/error`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingOPTIONS(options: any = {}): RequestArgs {\n            const localVarPath = `/error`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingPATCH(options: any = {}): RequestArgs {\n            const localVarPath = `/error`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingPOST(options: any = {}): RequestArgs {\n            const localVarPath = `/error`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingPUT(options: any = {}): RequestArgs {\n            const localVarPath = `/error`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * BasicErrorControllerApi - functional programming interface\n * @export\n */\nexport const BasicErrorControllerApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingDELETE(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {\n            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingDELETE(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {\n            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingGET(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingHEAD(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {\n            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingHEAD(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingOPTIONS(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {\n            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingOPTIONS(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingPATCH(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {\n            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPATCH(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingPOST(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {\n            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPOST(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingPUT(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {\n            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPUT(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * BasicErrorControllerApi - factory interface\n * @export\n */\nexport const BasicErrorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingDELETE(options?: any) {\n            return BasicErrorControllerApiFp(configuration).errorUsingDELETE(options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingGET(options?: any) {\n            return BasicErrorControllerApiFp(configuration).errorUsingGET(options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingHEAD(options?: any) {\n            return BasicErrorControllerApiFp(configuration).errorUsingHEAD(options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingOPTIONS(options?: any) {\n            return BasicErrorControllerApiFp(configuration).errorUsingOPTIONS(options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingPATCH(options?: any) {\n            return BasicErrorControllerApiFp(configuration).errorUsingPATCH(options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingPOST(options?: any) {\n            return BasicErrorControllerApiFp(configuration).errorUsingPOST(options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary error\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        errorUsingPUT(options?: any) {\n            return BasicErrorControllerApiFp(configuration).errorUsingPUT(options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * BasicErrorControllerApi - object-oriented interface\n * @export\n * @class BasicErrorControllerApi\n * @extends {BaseAPI}\n */\nexport class BasicErrorControllerApi extends BaseAPI {\n    /**\n     * \n     * @summary error\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BasicErrorControllerApi\n     */\n    public errorUsingDELETE(options?: any) {\n        return BasicErrorControllerApiFp(this.configuration).errorUsingDELETE(options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary error\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BasicErrorControllerApi\n     */\n    public errorUsingGET(options?: any) {\n        return BasicErrorControllerApiFp(this.configuration).errorUsingGET(options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary error\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BasicErrorControllerApi\n     */\n    public errorUsingHEAD(options?: any) {\n        return BasicErrorControllerApiFp(this.configuration).errorUsingHEAD(options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary error\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BasicErrorControllerApi\n     */\n    public errorUsingOPTIONS(options?: any) {\n        return BasicErrorControllerApiFp(this.configuration).errorUsingOPTIONS(options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary error\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BasicErrorControllerApi\n     */\n    public errorUsingPATCH(options?: any) {\n        return BasicErrorControllerApiFp(this.configuration).errorUsingPATCH(options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary error\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BasicErrorControllerApi\n     */\n    public errorUsingPOST(options?: any) {\n        return BasicErrorControllerApiFp(this.configuration).errorUsingPOST(options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary error\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof BasicErrorControllerApi\n     */\n    public errorUsingPUT(options?: any) {\n        return BasicErrorControllerApiFp(this.configuration).errorUsingPUT(options)(this.axios, this.basePath);\n    }\n\n}\n\n\n/**\n * CandidateControllerApi - axios parameter creator\n * @export\n */\nexport const CandidateControllerApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary addCandidate\n         * @param {Candidate} candidate candidate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addCandidate(candidate: Candidate, options: any = {}): RequestArgs {\n            // verify required parameter 'candidate' is not null or undefined\n            if (candidate === null || candidate === undefined) {\n                throw new RequiredError('candidate','Required parameter candidate was null or undefined when calling addCandidate.');\n            }\n            const localVarPath = `/candidate`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof candidate !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(candidate !== undefined ? candidate : {}) : (candidate || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary deleteCandidate\n         * @param {number} id id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteCandidate(id: number, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCandidate.');\n            }\n            const localVarPath = `/candidate/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary getCandidates\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCandidates(options: any = {}): RequestArgs {\n            const localVarPath = `/candidates`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary helloWorld\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        helloWorld(options: any = {}): RequestArgs {\n            const localVarPath = `/`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary searchForCandidatesByLastName\n         * @param {string} lastName lastName\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchForCandidatesByLastName(lastName: string, options: any = {}): RequestArgs {\n            // verify required parameter 'lastName' is not null or undefined\n            if (lastName === null || lastName === undefined) {\n                throw new RequiredError('lastName','Required parameter lastName was null or undefined when calling searchForCandidatesByLastName.');\n            }\n            const localVarPath = `/candidates/{lastName}`\n                .replace(`{${\"lastName\"}}`, encodeURIComponent(String(lastName)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * CandidateControllerApi - functional programming interface\n * @export\n */\nexport const CandidateControllerApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary addCandidate\n         * @param {Candidate} candidate candidate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addCandidate(candidate: Candidate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Candidate> {\n            const localVarAxiosArgs = CandidateControllerApiAxiosParamCreator(configuration).addCandidate(candidate, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary deleteCandidate\n         * @param {number} id id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteCandidate(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {\n            const localVarAxiosArgs = CandidateControllerApiAxiosParamCreator(configuration).deleteCandidate(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary getCandidates\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCandidates(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Candidate>> {\n            const localVarAxiosArgs = CandidateControllerApiAxiosParamCreator(configuration).getCandidates(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary helloWorld\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        helloWorld(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {\n            const localVarAxiosArgs = CandidateControllerApiAxiosParamCreator(configuration).helloWorld(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary searchForCandidatesByLastName\n         * @param {string} lastName lastName\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchForCandidatesByLastName(lastName: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Candidate>> {\n            const localVarAxiosArgs = CandidateControllerApiAxiosParamCreator(configuration).searchForCandidatesByLastName(lastName, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * CandidateControllerApi - factory interface\n * @export\n */\nexport const CandidateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary addCandidate\n         * @param {Candidate} candidate candidate\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addCandidate(candidate: Candidate, options?: any) {\n            return CandidateControllerApiFp(configuration).addCandidate(candidate, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary deleteCandidate\n         * @param {number} id id\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteCandidate(id: number, options?: any) {\n            return CandidateControllerApiFp(configuration).deleteCandidate(id, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary getCandidates\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCandidates(options?: any) {\n            return CandidateControllerApiFp(configuration).getCandidates(options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary helloWorld\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        helloWorld(options?: any) {\n            return CandidateControllerApiFp(configuration).helloWorld(options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary searchForCandidatesByLastName\n         * @param {string} lastName lastName\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        searchForCandidatesByLastName(lastName: string, options?: any) {\n            return CandidateControllerApiFp(configuration).searchForCandidatesByLastName(lastName, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * CandidateControllerApi - object-oriented interface\n * @export\n * @class CandidateControllerApi\n * @extends {BaseAPI}\n */\nexport class CandidateControllerApi extends BaseAPI {\n    /**\n     * \n     * @summary addCandidate\n     * @param {Candidate} candidate candidate\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CandidateControllerApi\n     */\n    public addCandidate(candidate: Candidate, options?: any) {\n        return CandidateControllerApiFp(this.configuration).addCandidate(candidate, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary deleteCandidate\n     * @param {number} id id\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CandidateControllerApi\n     */\n    public deleteCandidate(id: number, options?: any) {\n        return CandidateControllerApiFp(this.configuration).deleteCandidate(id, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary getCandidates\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CandidateControllerApi\n     */\n    public getCandidates(options?: any) {\n        return CandidateControllerApiFp(this.configuration).getCandidates(options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary helloWorld\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CandidateControllerApi\n     */\n    public helloWorld(options?: any) {\n        return CandidateControllerApiFp(this.configuration).helloWorld(options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary searchForCandidatesByLastName\n     * @param {string} lastName lastName\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CandidateControllerApi\n     */\n    public searchForCandidatesByLastName(lastName: string, options?: any) {\n        return CandidateControllerApiFp(this.configuration).searchForCandidatesByLastName(lastName, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n","// tslint:disable\n/**\n * Api Documentation\n * Api Documentation\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://typesafe-api-demo-java.herokuapp.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","import { DefaultApi as SpotifyApi } from \"@/api/spotify\";\nimport { DefaultApi as OmbdApi } from \"@/api/omdb\";\nimport { CandidateControllerApi } from \"@/api/custom\"\n\n// export const fecApiKey = 'egOCr35thUijs4P0fmyBLCMd7tRNa488YEnVUOFi'\n\nexport const spotifyApi = new SpotifyApi();\nexport const ombdApi = new OmbdApi();\n\nexport const customCandidateApi = new CandidateControllerApi()\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{\"id\":\"app\"}},[_c('div',{attrs:{\"id\":\"nav\"}},[_c('router-link',{attrs:{\"to\":\"/\"}},[_vm._v(\"Home\")]),_vm._v(\" | \"),_c('router-link',{attrs:{\"to\":\"/spotify\"}},[_vm._v(\"Spotify\")]),_vm._v(\" | \"),_c('router-link',{attrs:{\"to\":\"/custom\"}},[_vm._v(\"Custom API\")])],1),_c('router-view')],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=117a9b12&\"\nvar script = {}\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"home\"},[_c('img',{attrs:{\"alt\":\"Vue logo\",\"src\":require(\"../assets/logo.png\")}}),_c('HelloWorld',{attrs:{\"msg\":\"Welcome to Your Vue.js App\"}})],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"hello\"},[_c('h1',[_vm._v(_vm._s(_vm.msg))]),_vm._m(0),_c('h3',[_vm._v(\"Installed CLI Plugins\")]),_vm._m(1),_c('h3',[_vm._v(\"Essential Links\")]),_vm._m(2),_c('h3',[_vm._v(\"Ecosystem\")]),_vm._m(3)])}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('p',[_vm._v(\" For a guide and recipes on how to configure / customize this project,\"),_c('br'),_vm._v(\" check out the \"),_c('a',{attrs:{\"href\":\"https://cli.vuejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"vue-cli documentation\")]),_vm._v(\". \")])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"babel\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-typescript\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"typescript\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-router\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"router\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"eslint\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"https://vuejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Core Docs\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://forum.vuejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Forum\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://chat.vuejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Community Chat\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://twitter.com/vuejs\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"Twitter\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://news.vuejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"News\")])])])},function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('ul',[_c('li',[_c('a',{attrs:{\"href\":\"https://router.vuejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"vue-router\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://vuex.vuejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"vuex\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/vuejs/vue-devtools#vue-devtools\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"vue-devtools\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://vue-loader.vuejs.org\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"vue-loader\")])]),_c('li',[_c('a',{attrs:{\"href\":\"https://github.com/vuejs/awesome-vue\",\"target\":\"_blank\",\"rel\":\"noopener\"}},[_vm._v(\"awesome-vue\")])])])}]\n\nexport { render, staticRenderFns }","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport Vue from \"vue\";\n\nimport { spotifyApi, ombdApi } from \"@/api\";\n\nconst ombdApiKey: string = \"52e10d22\";\n\nexport default Vue.extend({\n  name: \"HelloWorld\",\n  props: {\n    msg: String\n  },\n  async created() {\n    const ombdResponse = await ombdApi.getOMDbSearch(\n      \"json\",\n      \"Lego Movie\",\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      { query: { apiKey: ombdApiKey } }\n    );\n    console.log(ombdResponse.data);\n  }\n});\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HelloWorld.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./HelloWorld.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./HelloWorld.vue?vue&type=template&id=4802edfa&scoped=true&\"\nimport script from \"./HelloWorld.vue?vue&type=script&lang=ts&\"\nexport * from \"./HelloWorld.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./HelloWorld.vue?vue&type=style&index=0&id=4802edfa&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"4802edfa\",\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div class=\"home\">\n    <img alt=\"Vue logo\" src=\"../assets/logo.png\" />\n    <HelloWorld msg=\"Welcome to Your Vue.js App\" />\n  </div>\n</template>\n\n<script>\n// @ is an alias to /src\nimport HelloWorld from \"@/components/HelloWorld.vue\";\n\nexport default {\n  name: \"home\",\n  components: {\n    HelloWorld\n  }\n};\n</script>\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Home.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./Home.vue?vue&type=template&id=50b0e2da&\"\nimport script from \"./Home.vue?vue&type=script&lang=js&\"\nexport * from \"./Home.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from \"vue\";\nimport VueRouter from \"vue-router\";\nimport Home from \"../views/Home.vue\";\n\nVue.use(VueRouter);\n\nconst routes = [\n  {\n    path: \"/\",\n    name: \"home\",\n    component: Home\n  },\n  {\n    path: \"/spotify/:accessToken?\",\n    name: \"spotify\",\n    props: true,\n    component: () =>\n      import(/* webpackChunkName: \"spotify\" */ \"../views/Spotify.vue\")\n  },\n  {\n    path: \"/custom\",\n    name: \"custom\",\n    component: () =>\n      import(/* webpackChunkName: \"custom\" */ \"../views/Custom.vue\")\n  }\n];\n\nconst router = new VueRouter({\n  routes\n});\n\nrouter.beforeEach((to, from, next) => {\n  const accessTokenString = \"/access_token=\";\n  if (to.path.includes(accessTokenString)) {\n    const accessToken =\n      to.path.match(new RegExp(accessTokenString + \"(.*)&token_type\"))?.[1] ??\n      \"\";\n    console.log(\"going to spotify\", accessToken);\n    next({ name: \"spotify\", params: { accessToken } });\n  } else {\n    next();\n  }\n});\n\nexport default router;\n","import Vue from \"vue\";\nimport App from \"./App.vue\";\nimport router from \"./router\";\n\nVue.config.productionTip = false;\n\nnew Vue({\n  router,\n  render: h => h(App)\n}).$mount(\"#app\");\n","module.exports = __webpack_public_path__ + \"img/logo.82b9c7a5.png\";"],"sourceRoot":""}