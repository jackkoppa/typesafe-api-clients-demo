// tslint:disable
/**
 * OMDb
 * The Open Movie Database. The OMDb API is a free web service to obtain movie information, all content and images on the site are contributed and maintained by our users.
 *
 * The version of the OpenAPI document: 1
 * Contact: bfritz@fadingsignal.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CombinedResult
 */
export interface CombinedResult {
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    actors?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    awards?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    boxOffice?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    country?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    DVD?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    director?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    genre?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    language?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    metascore?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    plot?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    poster?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    production?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    rated?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    released?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    response: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    runtime?: string;
    /**
     * 
     * @type {Array<CombinedResultSearch>}
     * @memberof CombinedResult
     */
    search?: Array<CombinedResultSearch>;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    website?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    writer?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    year?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    imdbID?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    imdbRating?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    imdbVotes?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoConsensus?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoFresh?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoImage?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoMeter?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoRating?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoReviews?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoRotten?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoURL?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoUserMeter?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoUserRating?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    tomatoUserReviews?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    totalResults?: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResult
     */
    totalSeasons?: string;
}
/**
 * 
 * @export
 * @interface CombinedResultSearch
 */
export interface CombinedResultSearch {
    /**
     * 
     * @type {string}
     * @memberof CombinedResultSearch
     */
    poster: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResultSearch
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResultSearch
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResultSearch
     */
    year: string;
    /**
     * 
     * @type {string}
     * @memberof CombinedResultSearch
     */
    imdbID: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search
         * @summary OMDb Search
         * @param {'json' | 'xml'} r The data type to return.
         * @param {string} [t] Movie title to search for. One of t, i or s is required.
         * @param {string} [i] A valid IMDb ID (e.g. tt1285016). One of t, i or s is required.
         * @param {string} [s] Movie title to search for. One of t, i or s is required.
         * @param {number} [y] Year of release.
         * @param {'movie' | 'series' | 'episode'} [type] Type of result to return.
         * @param {'short' | 'full'} [plot] Return short or full plot.
         * @param {boolean} [tomatoes] Include Rotten Tomatoes ratings.
         * @param {number} [v] API version (reserved for future use).
         * @param {number} [page] Page number to return.
         * @param {string} [callback] JSONP callback name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOMDbSearch(r: 'json' | 'xml', t?: string, i?: string, s?: string, y?: number, type?: 'movie' | 'series' | 'episode', plot?: 'short' | 'full', tomatoes?: boolean, v?: number, page?: number, callback?: string, options: any = {}): RequestArgs {
            // verify required parameter 'r' is not null or undefined
            if (r === null || r === undefined) {
                throw new RequiredError('r','Required parameter r was null or undefined when calling getOMDbSearch.');
            }
            const localVarPath = `/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }

            if (i !== undefined) {
                localVarQueryParameter['i'] = i;
            }

            if (s !== undefined) {
                localVarQueryParameter['s'] = s;
            }

            if (y !== undefined) {
                localVarQueryParameter['y'] = y;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (plot !== undefined) {
                localVarQueryParameter['plot'] = plot;
            }

            if (tomatoes !== undefined) {
                localVarQueryParameter['tomatoes'] = tomatoes;
            }

            if (r !== undefined) {
                localVarQueryParameter['r'] = r;
            }

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (callback !== undefined) {
                localVarQueryParameter['callback'] = callback;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search
         * @summary OMDb Search
         * @param {'json' | 'xml'} r The data type to return.
         * @param {string} [t] Movie title to search for. One of t, i or s is required.
         * @param {string} [i] A valid IMDb ID (e.g. tt1285016). One of t, i or s is required.
         * @param {string} [s] Movie title to search for. One of t, i or s is required.
         * @param {number} [y] Year of release.
         * @param {'movie' | 'series' | 'episode'} [type] Type of result to return.
         * @param {'short' | 'full'} [plot] Return short or full plot.
         * @param {boolean} [tomatoes] Include Rotten Tomatoes ratings.
         * @param {number} [v] API version (reserved for future use).
         * @param {number} [page] Page number to return.
         * @param {string} [callback] JSONP callback name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOMDbSearch(r: 'json' | 'xml', t?: string, i?: string, s?: string, y?: number, type?: 'movie' | 'series' | 'episode', plot?: 'short' | 'full', tomatoes?: boolean, v?: number, page?: number, callback?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CombinedResult> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getOMDbSearch(r, t, i, s, y, type, plot, tomatoes, v, page, callback, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search
         * @summary OMDb Search
         * @param {'json' | 'xml'} r The data type to return.
         * @param {string} [t] Movie title to search for. One of t, i or s is required.
         * @param {string} [i] A valid IMDb ID (e.g. tt1285016). One of t, i or s is required.
         * @param {string} [s] Movie title to search for. One of t, i or s is required.
         * @param {number} [y] Year of release.
         * @param {'movie' | 'series' | 'episode'} [type] Type of result to return.
         * @param {'short' | 'full'} [plot] Return short or full plot.
         * @param {boolean} [tomatoes] Include Rotten Tomatoes ratings.
         * @param {number} [v] API version (reserved for future use).
         * @param {number} [page] Page number to return.
         * @param {string} [callback] JSONP callback name.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOMDbSearch(r: 'json' | 'xml', t?: string, i?: string, s?: string, y?: number, type?: 'movie' | 'series' | 'episode', plot?: 'short' | 'full', tomatoes?: boolean, v?: number, page?: number, callback?: string, options?: any) {
            return DefaultApiFp(configuration).getOMDbSearch(r, t, i, s, y, type, plot, tomatoes, v, page, callback, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Find a movie, series or episode from the OMDb by title, IMDb-id or by free-text search
     * @summary OMDb Search
     * @param {'json' | 'xml'} r The data type to return.
     * @param {string} [t] Movie title to search for. One of t, i or s is required.
     * @param {string} [i] A valid IMDb ID (e.g. tt1285016). One of t, i or s is required.
     * @param {string} [s] Movie title to search for. One of t, i or s is required.
     * @param {number} [y] Year of release.
     * @param {'movie' | 'series' | 'episode'} [type] Type of result to return.
     * @param {'short' | 'full'} [plot] Return short or full plot.
     * @param {boolean} [tomatoes] Include Rotten Tomatoes ratings.
     * @param {number} [v] API version (reserved for future use).
     * @param {number} [page] Page number to return.
     * @param {string} [callback] JSONP callback name.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOMDbSearch(r: 'json' | 'xml', t?: string, i?: string, s?: string, y?: number, type?: 'movie' | 'series' | 'episode', plot?: 'short' | 'full', tomatoes?: boolean, v?: number, page?: number, callback?: string, options?: any) {
        return DefaultApiFp(this.configuration).getOMDbSearch(r, t, i, s, y, type, plot, tomatoes, v, page, callback, options)(this.axios, this.basePath);
    }

}


