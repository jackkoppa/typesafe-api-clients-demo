// tslint:disable
/**
 * OpenFEC
 * This API allows you to explore the way candidates and committees fund their campaigns.    The FEC API is a RESTful web service supporting full-text and field-specific searches on FEC data. [Bulk downloads](https://www.fec.gov/data/advanced/?tab=bulk-data) are available on the current site. Information is tied to the underlying forms by file ID and image ID. Data is updated nightly.    There is a lot of data, but a good place to start is to use search to find interesting candidates and committees. Then, you can use their IDs to find report or line item details with the other endpoints. If you are interested in individual donors, check out contributor information in schedule_a.    Get an [API key here](https://api.data.gov/signup/). That will enable you to place up to 1,000 calls an hour. Each call is limited to 100 results per page. You can email questions, comments or a request to get a key for 120 calls per minute to [APIinfo@fec.gov](mailto:apiinfo@fec.gov). You can also ask questions and discuss the data in the [FEC data Google Group](https://groups.google.com/forum/#!forum/fec-data). API changes will also be added to this group in advance of the change.       The model definitions and schema are available at [/swagger](/swagger/). This is useful for making wrappers and exploring the data.    A few restrictions limit the way you can use FEC data. For example, you canâ€™t use contributor lists for commercial purposes or to solicit donations. [Learn more here](https://www.fec.gov/updates/sale-or-use-contributor-information/).    [View our source code](https://github.com/fecgov/openFEC). We welcome issues and pull requests!
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuditCandidateSearch
 */
export interface AuditCandidateSearch {
    /**
     * 
     * @type {string}
     * @memberof AuditCandidateSearch
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCandidateSearch
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface AuditCandidateSearchList
 */
export interface AuditCandidateSearchList {
    /**
     * 
     * @type {Array<AuditCandidateSearch>}
     * @memberof AuditCandidateSearchList
     */
    results?: Array<AuditCandidateSearch>;
}
/**
 * 
 * @export
 * @interface AuditCase
 */
export interface AuditCase {
    /**
     * 
     * @type {string}
     * @memberof AuditCase
     */
    auditCaseId?: string;
    /**
     * 
     * @type {number}
     * @memberof AuditCase
     */
    auditId?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditCase
     */
    candidateId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCase
     */
    candidateName?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCase
     */
    committeeDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCase
     */
    committeeDesignation?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCase
     */
    committeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCase
     */
    committeeName?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCase
     */
    committeeType?: string;
    /**
     * 
     * @type {number}
     * @memberof AuditCase
     */
    cycle?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditCase
     */
    farReleaseDate?: string;
    /**
     *  URL for retrieving the PDF document 
     * @type {string}
     * @memberof AuditCase
     */
    linkToReport?: string | null;
    /**
     * 
     * @type {Array<AuditCaseCategoryRelation>}
     * @memberof AuditCase
     */
    primaryCategoryList?: Array<AuditCaseCategoryRelation>;
}
/**
 * 
 * @export
 * @interface AuditCaseCategoryRelation
 */
export interface AuditCaseCategoryRelation {
    /**
     * 
     * @type {string}
     * @memberof AuditCaseCategoryRelation
     */
    primaryCategoryId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCaseCategoryRelation
     */
    primaryCategoryName?: string;
    /**
     * 
     * @type {Array<AuditCaseSubCategory>}
     * @memberof AuditCaseCategoryRelation
     */
    subCategoryList?: Array<AuditCaseSubCategory>;
}
/**
 * 
 * @export
 * @interface AuditCaseCategoryRelationPage
 */
export interface AuditCaseCategoryRelationPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof AuditCaseCategoryRelationPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<AuditCaseCategoryRelation>}
     * @memberof AuditCaseCategoryRelationPage
     */
    results?: Array<AuditCaseCategoryRelation>;
}
/**
 * 
 * @export
 * @interface AuditCasePage
 */
export interface AuditCasePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof AuditCasePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<AuditCase>}
     * @memberof AuditCasePage
     */
    results?: Array<AuditCase>;
}
/**
 * 
 * @export
 * @interface AuditCaseSubCategory
 */
export interface AuditCaseSubCategory {
    /**
     * 
     * @type {string}
     * @memberof AuditCaseSubCategory
     */
    subCategoryId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCaseSubCategory
     */
    subCategoryName?: string;
}
/**
 * 
 * @export
 * @interface AuditCaseSubCategoryPage
 */
export interface AuditCaseSubCategoryPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof AuditCaseSubCategoryPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<AuditCaseSubCategory>}
     * @memberof AuditCaseSubCategoryPage
     */
    results?: Array<AuditCaseSubCategory>;
}
/**
 * 
 * @export
 * @interface AuditCategory
 */
export interface AuditCategory {
    /**
     * 
     * @type {string}
     * @memberof AuditCategory
     */
    primaryCategoryId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCategory
     */
    primaryCategoryName?: string;
    /**
     * 
     * @type {Array<AuditCategoryRelation>}
     * @memberof AuditCategory
     */
    subCategoryList?: Array<AuditCategoryRelation>;
}
/**
 * 
 * @export
 * @interface AuditCategoryPage
 */
export interface AuditCategoryPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof AuditCategoryPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<AuditCategory>}
     * @memberof AuditCategoryPage
     */
    results?: Array<AuditCategory>;
}
/**
 * 
 * @export
 * @interface AuditCategoryRelation
 */
export interface AuditCategoryRelation {
    /**
     * 
     * @type {string}
     * @memberof AuditCategoryRelation
     */
    subCategoryId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCategoryRelation
     */
    subCategoryName?: string;
}
/**
 * 
 * @export
 * @interface AuditCategoryRelationPage
 */
export interface AuditCategoryRelationPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof AuditCategoryRelationPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<AuditCategoryRelation>}
     * @memberof AuditCategoryRelationPage
     */
    results?: Array<AuditCategoryRelation>;
}
/**
 * 
 * @export
 * @interface AuditCommitteeSearch
 */
export interface AuditCommitteeSearch {
    /**
     * 
     * @type {string}
     * @memberof AuditCommitteeSearch
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditCommitteeSearch
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface AuditCommitteeSearchList
 */
export interface AuditCommitteeSearchList {
    /**
     * 
     * @type {Array<AuditCommitteeSearch>}
     * @memberof AuditCommitteeSearchList
     */
    results?: Array<AuditCommitteeSearch>;
}
/**
 * 
 * @export
 * @interface AuditPrimaryCategory
 */
export interface AuditPrimaryCategory {
    /**
     * 
     * @type {string}
     * @memberof AuditPrimaryCategory
     */
    primaryCategoryId?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditPrimaryCategory
     */
    primaryCategoryName?: string;
}
/**
 * 
 * @export
 * @interface AuditPrimaryCategoryPage
 */
export interface AuditPrimaryCategoryPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof AuditPrimaryCategoryPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<AuditPrimaryCategory>}
     * @memberof AuditPrimaryCategoryPage
     */
    results?: Array<AuditPrimaryCategory>;
}
/**
 * 
 * @export
 * @interface BaseF3Filing
 */
export interface BaseF3Filing {
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    amendedAddress?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3Filing
     */
    amendedBy?: number;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    amendment?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof BaseF3Filing
     */
    amendmentChain?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    beginningImageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    candidateFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    candidateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    candidateLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    candidateMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    candidateName?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    candidatePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    candidateSuffix?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3Filing
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    city?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof BaseF3Filing
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof BaseF3Filing
     */
    committeeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    coverageEndDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    coverageStartDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    csvUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseF3Filing
     */
    district?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    documentDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    electionDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    electionState?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3Filing
     */
    f3z1?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    fecFileId?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseF3Filing
     */
    fileNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    generalElection?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BaseF3Filing
     */
    isAmended?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BaseF3Filing
     */
    mostRecent?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BaseF3Filing
     */
    mostRecentFiling?: number;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    pdfUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    prefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    primaryElection?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    receiptDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    report?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    reportType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3Filing
     */
    reportYear?: number;
    /**
     * Election type  Convention, Primary, General, Special, Runoff etc. 
     * @type {string}
     * @memberof BaseF3Filing
     */
    rptPgi?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    runoffElection?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    signDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    specialElection?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    street1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    street2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    suffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    summaryLines?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    treasurerFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    treasurerLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    treasurerMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    treasurerName?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3Filing
     */
    zip?: string | null;
}
/**
 * 
 * @export
 * @interface BaseF3FilingPage
 */
export interface BaseF3FilingPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof BaseF3FilingPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<BaseF3Filing>}
     * @memberof BaseF3FilingPage
     */
    results?: Array<BaseF3Filing>;
}
/**
 * 
 * @export
 * @interface BaseF3PFiling
 */
export interface BaseF3PFiling {
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    amendedBy?: number;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    amendment?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof BaseF3PFiling
     */
    amendmentChain?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    beginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    cashOnHandEndPeriod?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    city?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof BaseF3PFiling
     */
    committeeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    coverageEndDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    coverageStartDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    csvUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    debtsOwedByCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    debtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    documentDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    electionDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    electionState?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    expenditureSubjectToLimits?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    fecFileId?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    fileNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    generalElection?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof BaseF3PFiling
     */
    isAmended?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BaseF3PFiling
     */
    mostRecent?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    mostRecentFiling?: number;
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    netContributionsCycleToDate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    netOperatingExpendituresCycleToDate?: number | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    pdfUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    prefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    primaryElection?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    receiptDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    report?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    reportType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3PFiling
     */
    reportYear?: number;
    /**
     * Election type  Convention, Primary, General, Special, Runoff etc. 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    rptPgi?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    signDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    street1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    street2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    subtotalSummaryPeriod?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    suffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    summaryLines?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    treasurerFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    treasurerLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    treasurerMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    treasurerName?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3PFiling
     */
    zip?: string | null;
}
/**
 * 
 * @export
 * @interface BaseF3PFilingPage
 */
export interface BaseF3PFilingPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof BaseF3PFilingPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<BaseF3PFiling>}
     * @memberof BaseF3PFilingPage
     */
    results?: Array<BaseF3PFiling>;
}
/**
 * 
 * @export
 * @interface BaseF3XFiling
 */
export interface BaseF3XFiling {
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    amendAddress?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3XFiling
     */
    amendedBy?: number;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    amendment?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof BaseF3XFiling
     */
    amendmentChain?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    beginningImageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    city?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof BaseF3XFiling
     */
    committeeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    coverageEndDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    coverageStartDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    csvUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    documentDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    electionDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    electionState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    fecFileId?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseF3XFiling
     */
    fileNumber?: number;
    /**
     * 
     * @type {boolean}
     * @memberof BaseF3XFiling
     */
    isAmended?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BaseF3XFiling
     */
    mostRecent?: boolean;
    /**
     * 
     * @type {number}
     * @memberof BaseF3XFiling
     */
    mostRecentFiling?: number;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    pdfUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    qualifiedMulticandidateCommittee?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    receiptDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    report?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    reportType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof BaseF3XFiling
     */
    reportYear?: number;
    /**
     * Election type  Convention, Primary, General, Special, Runoff etc. 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    rptPgi?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    signDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    street1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    street2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    summaryLines?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseF3XFiling
     */
    zip?: string | null;
}
/**
 * 
 * @export
 * @interface BaseF3XFilingPage
 */
export interface BaseF3XFilingPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof BaseF3XFilingPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<BaseF3XFiling>}
     * @memberof BaseF3XFilingPage
     */
    results?: Array<BaseF3XFiling>;
}
/**
 * 
 * @export
 * @interface CalendarDate
 */
export interface CalendarDate {
    /**
     * 
     * @type {boolean}
     * @memberof CalendarDate
     */
    allDay?: boolean | null;
    /**
     *  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
     * @type {number}
     * @memberof CalendarDate
     */
    calendarCategoryId?: number | null;
    /**
     *  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
     * @type {string}
     * @memberof CalendarDate
     */
    category?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendarDate
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CalendarDate
     */
    endDate?: string;
    /**
     * An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
     * @type {number}
     * @memberof CalendarDate
     */
    eventId?: number;
    /**
     *  Can be state address or room. 
     * @type {string}
     * @memberof CalendarDate
     */
    location?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CalendarDate
     */
    startDate?: string;
    /**
     * The state field only applies to election dates and reporting deadlines, reporting periods and all other dates do not have the array of states to filter on
     * @type {Array<string>}
     * @memberof CalendarDate
     */
    state?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof CalendarDate
     */
    summary?: string;
    /**
     *  A url for that event 
     * @type {string}
     * @memberof CalendarDate
     */
    url?: string | null;
}
/**
 * 
 * @export
 * @interface CalendarDatePage
 */
export interface CalendarDatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CalendarDatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CalendarDate>}
     * @memberof CalendarDatePage
     */
    results?: Array<CalendarDate>;
}
/**
 * 
 * @export
 * @interface Candidate
 */
export interface Candidate {
    /**
     * Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
     * @type {number}
     * @memberof Candidate
     */
    activeThrough?: number | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof Candidate
     */
    candidateId?: string | null;
    /**
     * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @type {string}
     * @memberof Candidate
     */
    candidateStatus?: string | null;
    /**
     *  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @type {Array<number>}
     * @memberof Candidate
     */
    cycles?: Array<number> | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {string}
     * @memberof Candidate
     */
    district?: string | null;
    /**
     * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @type {number}
     * @memberof Candidate
     */
    districtNumber?: number | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {Array<string>}
     * @memberof Candidate
     */
    electionDistricts?: Array<string> | null;
    /**
     * Years in which a candidate ran for office.
     * @type {Array<number>}
     * @memberof Candidate
     */
    electionYears?: Array<number> | null;
    /**
     * 
     * @type {boolean}
     * @memberof Candidate
     */
    federalFundsFlag?: boolean;
    /**
     * The day the FEC received the candidate\'s first filing. This is a F2 candidate registration.
     * @type {string}
     * @memberof Candidate
     */
    firstFileDate?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Candidate
     */
    hasRaisedFunds?: boolean;
    /**
     * One-letter code (\'I\', \'C\', \'O\') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @type {string}
     * @memberof Candidate
     */
    incumbentChallenge?: string | null;
    /**
     * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
     * @type {string}
     * @memberof Candidate
     */
    incumbentChallengeFull?: string | null;
    /**
     * The day the FEC received the candidate\'s most recent Form 2
     * @type {string}
     * @memberof Candidate
     */
    lastF2Date?: string | null;
    /**
     * The day the FEC received the candidate\'s most recent filing
     * @type {string}
     * @memberof Candidate
     */
    lastFileDate?: string | null;
    /**
     * Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
     * @type {Date}
     * @memberof Candidate
     */
    loadDate?: Date | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof Candidate
     */
    name?: string | null;
    /**
     * Federal office candidate runs for: H, S or P
     * @type {string}
     * @memberof Candidate
     */
    office?: string | null;
    /**
     * Federal office candidate runs for: House, Senate or presidential
     * @type {string}
     * @memberof Candidate
     */
    officeFull?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof Candidate
     */
    party?: string | null;
    /**
     * Party affiliated with a candidate or committee
     * @type {string}
     * @memberof Candidate
     */
    partyFull?: string | null;
    /**
     * 
     * @type {Array<Committee>}
     * @memberof Candidate
     */
    principalCommittees?: Array<Committee>;
    /**
     * US state or territory where a candidate runs for office
     * @type {string}
     * @memberof Candidate
     */
    state?: string | null;
}
/**
 * 
 * @export
 * @interface CandidateCommitteeTotalsHouseSenate
 */
export interface CandidateCommitteeTotalsHouseSenate {
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    allOtherLoans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    candidateContribution?: number | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    candidateId: string;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    contributionRefunds?: number | null;
    /**
     * Contribution
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    contributions?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    coverageEndDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    coverageStartDate?: Date | null;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    cycle: number;
    /**
     * Disbursements
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    disbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    exemptLegalAccountingDisbursement?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    federalFunds?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    fullElection: boolean;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    fundraisingDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    individualContributions?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    individualItemizedContributions?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    individualUnitemizedContributions?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    lastBeginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    lastCashOnHandEndPeriod?: number;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    lastDebtsOwedByCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    lastDebtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    lastNetContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    lastNetOperatingExpenditures?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    lastReportTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    lastReportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    loanRepayments?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    loanRepaymentsCandidateLoans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    loanRepaymentsOtherLoans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    loans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    loansMadeByCandidate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    netContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    netOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    offsetsToFundraisingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    offsetsToLegalAccounting?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    offsetsToOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    operatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    otherDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    otherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    otherReceipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    politicalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    receipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    refundedIndividualContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    refundedOtherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    refundedPoliticalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    totalOffsetsToOperatingExpenditures?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    transactionCoverageDate?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    transfersFromOtherAuthorizedCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsHouseSenate
     */
    transfersToOtherAuthorizedCommittee?: number | null;
}
/**
 * 
 * @export
 * @interface CandidateCommitteeTotalsHouseSenatePage
 */
export interface CandidateCommitteeTotalsHouseSenatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CandidateCommitteeTotalsHouseSenatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CandidateCommitteeTotalsHouseSenate>}
     * @memberof CandidateCommitteeTotalsHouseSenatePage
     */
    results?: Array<CandidateCommitteeTotalsHouseSenate>;
}
/**
 * 
 * @export
 * @interface CandidateCommitteeTotalsPresidential
 */
export interface CandidateCommitteeTotalsPresidential {
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    candidateContribution?: number | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    candidateId: string;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    contributionRefunds?: number | null;
    /**
     * Contribution
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    contributions?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    coverageEndDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    coverageStartDate?: Date | null;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    cycle: number;
    /**
     * Disbursements
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    disbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    exemptLegalAccountingDisbursement?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    federalFunds?: number | null;
    /**
     * 
     * @type {boolean}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    fullElection: boolean;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    fundraisingDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    individualContributions?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    individualItemizedContributions?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    individualUnitemizedContributions?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    lastBeginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    lastCashOnHandEndPeriod?: number;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    lastDebtsOwedByCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    lastDebtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    lastReportTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    lastReportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    loanRepaymentsMade?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    loansReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    loansReceivedFromCandidate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    netContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    netOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    offsetsToFundraisingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    offsetsToLegalAccounting?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    offsetsToOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    operatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    otherDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    otherLoansReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    otherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    otherReceipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    politicalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    receipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    refundedIndividualContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    refundedOtherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    refundedPoliticalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    repaymentsLoansMadeByCandidate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    repaymentsOtherLoans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    totalOffsetsToOperatingExpenditures?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    transactionCoverageDate?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    transfersFromAffiliatedCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateCommitteeTotalsPresidential
     */
    transfersToOtherAuthorizedCommittee?: number | null;
}
/**
 * 
 * @export
 * @interface CandidateCommitteeTotalsPresidentialPage
 */
export interface CandidateCommitteeTotalsPresidentialPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CandidateCommitteeTotalsPresidentialPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CandidateCommitteeTotalsPresidential>}
     * @memberof CandidateCommitteeTotalsPresidentialPage
     */
    results?: Array<CandidateCommitteeTotalsPresidential>;
}
/**
 * 
 * @export
 * @interface CandidateDetail
 */
export interface CandidateDetail {
    /**
     * Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
     * @type {number}
     * @memberof CandidateDetail
     */
    activeThrough?: number | null;
    /**
     * City of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateDetail
     */
    addressCity?: string | null;
    /**
     * State of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateDetail
     */
    addressState?: string | null;
    /**
     * Street of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateDetail
     */
    addressStreet1?: string | null;
    /**
     * Additional street information of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateDetail
     */
    addressStreet2?: string | null;
    /**
     * Zip code of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateDetail
     */
    addressZip?: string | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof CandidateDetail
     */
    candidateId?: string | null;
    /**
     * True indicates that a candidate is inactive.
     * @type {boolean}
     * @memberof CandidateDetail
     */
    candidateInactive?: boolean | null;
    /**
     * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @type {string}
     * @memberof CandidateDetail
     */
    candidateStatus?: string | null;
    /**
     *  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @type {Array<number>}
     * @memberof CandidateDetail
     */
    cycles?: Array<number> | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {string}
     * @memberof CandidateDetail
     */
    district?: string | null;
    /**
     * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @type {number}
     * @memberof CandidateDetail
     */
    districtNumber?: number | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {Array<string>}
     * @memberof CandidateDetail
     */
    electionDistricts?: Array<string> | null;
    /**
     * Years in which a candidate ran for office.
     * @type {Array<number>}
     * @memberof CandidateDetail
     */
    electionYears?: Array<number> | null;
    /**
     * 
     * @type {boolean}
     * @memberof CandidateDetail
     */
    federalFundsFlag?: boolean;
    /**
     * The day the FEC received the candidate\'s first filing. This is a F2 candidate registration.
     * @type {string}
     * @memberof CandidateDetail
     */
    firstFileDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDetail
     */
    flags?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CandidateDetail
     */
    hasRaisedFunds?: boolean;
    /**
     * One-letter code (\'I\', \'C\', \'O\') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @type {string}
     * @memberof CandidateDetail
     */
    incumbentChallenge?: string | null;
    /**
     * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
     * @type {string}
     * @memberof CandidateDetail
     */
    incumbentChallengeFull?: string | null;
    /**
     * The day the FEC received the candidate\'s most recent Form 2
     * @type {string}
     * @memberof CandidateDetail
     */
    lastF2Date?: string | null;
    /**
     * The day the FEC received the candidate\'s most recent filing
     * @type {string}
     * @memberof CandidateDetail
     */
    lastFileDate?: string | null;
    /**
     * Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
     * @type {Date}
     * @memberof CandidateDetail
     */
    loadDate?: Date | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof CandidateDetail
     */
    name?: string | null;
    /**
     * Federal office candidate runs for: H, S or P
     * @type {string}
     * @memberof CandidateDetail
     */
    office?: string | null;
    /**
     * Federal office candidate runs for: House, Senate or presidential
     * @type {string}
     * @memberof CandidateDetail
     */
    officeFull?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof CandidateDetail
     */
    party?: string | null;
    /**
     * Party affiliated with a candidate or committee
     * @type {string}
     * @memberof CandidateDetail
     */
    partyFull?: string | null;
    /**
     * US state or territory where a candidate runs for office
     * @type {string}
     * @memberof CandidateDetail
     */
    state?: string | null;
}
/**
 * 
 * @export
 * @interface CandidateDetailPage
 */
export interface CandidateDetailPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CandidateDetailPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CandidateDetail>}
     * @memberof CandidateDetailPage
     */
    results?: Array<CandidateDetail>;
}
/**
 * 
 * @export
 * @interface CandidateFlags
 */
export interface CandidateFlags {
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof CandidateFlags
     */
    candidateId: string;
    /**
     * A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @type {boolean}
     * @memberof CandidateFlags
     */
    federalFundsFlag?: boolean | null;
    /**
     * A boolean that describes if a candidate\'s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @type {boolean}
     * @memberof CandidateFlags
     */
    hasRaisedFunds?: boolean | null;
}
/**
 * 
 * @export
 * @interface CandidateFlagsPage
 */
export interface CandidateFlagsPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CandidateFlagsPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CandidateFlags>}
     * @memberof CandidateFlagsPage
     */
    results?: Array<CandidateFlags>;
}
/**
 * 
 * @export
 * @interface CandidateHistory
 */
export interface CandidateHistory {
    /**
     * Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
     * @type {number}
     * @memberof CandidateHistory
     */
    activeThrough?: number | null;
    /**
     * City of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateHistory
     */
    addressCity?: string | null;
    /**
     * State of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateHistory
     */
    addressState?: string | null;
    /**
     * Street of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateHistory
     */
    addressStreet1?: string | null;
    /**
     * Additional street information of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateHistory
     */
    addressStreet2?: string | null;
    /**
     * Zip code of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateHistory
     */
    addressZip?: string | null;
    /**
     * The last year of the cycle for this election.
     * @type {number}
     * @memberof CandidateHistory
     */
    candidateElectionYear?: number | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof CandidateHistory
     */
    candidateId: string;
    /**
     * True indicates that a candidate is inactive.
     * @type {boolean}
     * @memberof CandidateHistory
     */
    candidateInactive?: boolean | null;
    /**
     * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @type {string}
     * @memberof CandidateHistory
     */
    candidateStatus?: string | null;
    /**
     *  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @type {Array<number>}
     * @memberof CandidateHistory
     */
    cycles?: Array<number> | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {string}
     * @memberof CandidateHistory
     */
    district?: string | null;
    /**
     * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @type {number}
     * @memberof CandidateHistory
     */
    districtNumber?: number | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {Array<string>}
     * @memberof CandidateHistory
     */
    electionDistricts?: Array<string> | null;
    /**
     * Years in which a candidate ran for office.
     * @type {Array<number>}
     * @memberof CandidateHistory
     */
    electionYears?: Array<number> | null;
    /**
     * The day the FEC received the candidate\'s first filing. This is a F2 candidate registration.
     * @type {string}
     * @memberof CandidateHistory
     */
    firstFileDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateHistory
     */
    flags?: string | null;
    /**
     * One-letter code (\'I\', \'C\', \'O\') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @type {string}
     * @memberof CandidateHistory
     */
    incumbentChallenge?: string | null;
    /**
     * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
     * @type {string}
     * @memberof CandidateHistory
     */
    incumbentChallengeFull?: string | null;
    /**
     * The day the FEC received the candidate\'s most recent Form 2
     * @type {string}
     * @memberof CandidateHistory
     */
    lastF2Date?: string | null;
    /**
     * The day the FEC received the candidate\'s most recent filing
     * @type {string}
     * @memberof CandidateHistory
     */
    lastFileDate?: string | null;
    /**
     * Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
     * @type {Date}
     * @memberof CandidateHistory
     */
    loadDate?: Date | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof CandidateHistory
     */
    name?: string | null;
    /**
     * Federal office candidate runs for: H, S or P
     * @type {string}
     * @memberof CandidateHistory
     */
    office?: string | null;
    /**
     * Federal office candidate runs for: House, Senate or presidential
     * @type {string}
     * @memberof CandidateHistory
     */
    officeFull?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof CandidateHistory
     */
    party?: string | null;
    /**
     * Party affiliated with a candidate or committee
     * @type {string}
     * @memberof CandidateHistory
     */
    partyFull?: string | null;
    /**
     * US state or territory where a candidate runs for office
     * @type {string}
     * @memberof CandidateHistory
     */
    state?: string | null;
    /**
     *  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @type {number}
     * @memberof CandidateHistory
     */
    twoYearPeriod: number;
}
/**
 * 
 * @export
 * @interface CandidateHistoryPage
 */
export interface CandidateHistoryPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CandidateHistoryPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CandidateHistory>}
     * @memberof CandidateHistoryPage
     */
    results?: Array<CandidateHistory>;
}
/**
 * 
 * @export
 * @interface CandidateHistoryTotal
 */
export interface CandidateHistoryTotal {
    /**
     * Last year a candidate was active. This field is specific to the candidate_id so if the same person runs for another office, there may be a different record for them.
     * @type {number}
     * @memberof CandidateHistoryTotal
     */
    activeThrough?: number | null;
    /**
     * City of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    addressCity?: string | null;
    /**
     * State of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    addressState?: string | null;
    /**
     * Street of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    addressStreet1?: string | null;
    /**
     * Additional street information of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    addressStreet2?: string | null;
    /**
     * Zip code of candidate\'s address, as reported on their Form 2.
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    addressZip?: string | null;
    /**
     * The last year of the cycle for this election.
     * @type {number}
     * @memberof CandidateHistoryTotal
     */
    candidateElectionYear?: number | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    candidateId: string;
    /**
     * True indicates that a candidate is inactive.
     * @type {boolean}
     * @memberof CandidateHistoryTotal
     */
    candidateInactive?: boolean | null;
    /**
     * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    candidateStatus?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateHistoryTotal
     */
    cashOnHandEndPeriod?: number | null;
    /**
     * Ending date of the reporting period
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    coverageEndDate?: string | null;
    /**
     * Beginning date of the reporting period
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    coverageStartDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateHistoryTotal
     */
    cycle: number;
    /**
     *  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @type {Array<number>}
     * @memberof CandidateHistoryTotal
     */
    cycles?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateHistoryTotal
     */
    debtsOwedByCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateHistoryTotal
     */
    disbursements?: number | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    district?: string | null;
    /**
     * One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @type {number}
     * @memberof CandidateHistoryTotal
     */
    districtNumber?: number | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {Array<string>}
     * @memberof CandidateHistoryTotal
     */
    electionDistricts?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateHistoryTotal
     */
    electionYear?: number;
    /**
     * Years in which a candidate ran for office.
     * @type {Array<number>}
     * @memberof CandidateHistoryTotal
     */
    electionYears?: Array<number> | null;
    /**
     * A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @type {boolean}
     * @memberof CandidateHistoryTotal
     */
    federalFundsFlag?: boolean | null;
    /**
     * The day the FEC received the candidate\'s first filing. This is a F2 candidate registration.
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    firstFileDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    flags?: string | null;
    /**
     * A boolean that describes if a candidate\'s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @type {boolean}
     * @memberof CandidateHistoryTotal
     */
    hasRaisedFunds?: boolean | null;
    /**
     * One-letter code (\'I\', \'C\', \'O\') explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    incumbentChallenge?: string | null;
    /**
     * Explains if the candidate is an incumbent, a challenger, or if the seat is open.
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    incumbentChallengeFull?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CandidateHistoryTotal
     */
    isElection: boolean;
    /**
     * The day the FEC received the candidate\'s most recent Form 2
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    lastF2Date?: string | null;
    /**
     * The day the FEC received the candidate\'s most recent filing
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    lastFileDate?: string | null;
    /**
     * Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
     * @type {Date}
     * @memberof CandidateHistoryTotal
     */
    loadDate?: Date | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    name?: string | null;
    /**
     * Federal office candidate runs for: H, S or P
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    office?: string | null;
    /**
     * Federal office candidate runs for: House, Senate or presidential
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    officeFull?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    party?: string | null;
    /**
     * Party affiliated with a candidate or committee
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    partyFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateHistoryTotal
     */
    receipts?: number | null;
    /**
     * US state or territory where a candidate runs for office
     * @type {string}
     * @memberof CandidateHistoryTotal
     */
    state?: string | null;
    /**
     *  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the `election_full` flag. 
     * @type {number}
     * @memberof CandidateHistoryTotal
     */
    twoYearPeriod: number;
}
/**
 * 
 * @export
 * @interface CandidateHistoryTotalPage
 */
export interface CandidateHistoryTotalPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CandidateHistoryTotalPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CandidateHistoryTotal>}
     * @memberof CandidateHistoryTotalPage
     */
    results?: Array<CandidateHistoryTotal>;
}
/**
 * 
 * @export
 * @interface CandidatePage
 */
export interface CandidatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CandidatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<Candidate>}
     * @memberof CandidatePage
     */
    results?: Array<Candidate>;
}
/**
 * 
 * @export
 * @interface CandidateSearch
 */
export interface CandidateSearch {
    /**
     * 
     * @type {string}
     * @memberof CandidateSearch
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CandidateSearch
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CandidateSearch
     */
    officeSought?: string;
}
/**
 * 
 * @export
 * @interface CandidateSearchList
 */
export interface CandidateSearchList {
    /**
     * 
     * @type {Array<CandidateSearch>}
     * @memberof CandidateSearchList
     */
    results?: Array<CandidateSearch>;
}
/**
 * 
 * @export
 * @interface CandidateTotal
 */
export interface CandidateTotal {
    /**
     * 
     * @type {string}
     * @memberof CandidateTotal
     */
    candidateId: string;
    /**
     * 
     * @type {number}
     * @memberof CandidateTotal
     */
    cashOnHandEndPeriod?: number | null;
    /**
     * Ending date of the reporting period
     * @type {string}
     * @memberof CandidateTotal
     */
    coverageEndDate?: string | null;
    /**
     * Beginning date of the reporting period
     * @type {string}
     * @memberof CandidateTotal
     */
    coverageStartDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateTotal
     */
    cycle: number;
    /**
     * 
     * @type {number}
     * @memberof CandidateTotal
     */
    debtsOwedByCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateTotal
     */
    disbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CandidateTotal
     */
    electionYear?: number;
    /**
     * A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @type {boolean}
     * @memberof CandidateTotal
     */
    federalFundsFlag?: boolean | null;
    /**
     * A boolean that describes if a candidate\'s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @type {boolean}
     * @memberof CandidateTotal
     */
    hasRaisedFunds?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof CandidateTotal
     */
    isElection: boolean;
    /**
     * 
     * @type {number}
     * @memberof CandidateTotal
     */
    receipts?: number | null;
}
/**
 * 
 * @export
 * @interface CandidateTotalPage
 */
export interface CandidateTotalPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CandidateTotalPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CandidateTotal>}
     * @memberof CandidateTotalPage
     */
    results?: Array<CandidateTotal>;
}
/**
 * 
 * @export
 * @interface Committee
 */
export interface Committee {
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {Array<string>}
     * @memberof Committee
     */
    candidateIds?: Array<string> | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof Committee
     */
    committeeId: string;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof Committee
     */
    committeeType?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof Committee
     */
    committeeTypeFull?: string | null;
    /**
     *  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @type {Array<number>}
     * @memberof Committee
     */
    cycles?: Array<number> | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof Committee
     */
    designation?: string | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof Committee
     */
    designationFull?: string | null;
    /**
     * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
     * @type {string}
     * @memberof Committee
     */
    filingFrequency?: string | null;
    /**
     * The day the FEC received the committee\'s first filing. This is usually a Form 1 committee registration.
     * @type {string}
     * @memberof Committee
     */
    firstFileDate?: string | null;
    /**
     * The day the FEC received the committee\'s most recent Form 1
     * @type {string}
     * @memberof Committee
     */
    lastF1Date?: string | null;
    /**
     * The day the FEC received the committee\'s most recent filing
     * @type {string}
     * @memberof Committee
     */
    lastFileDate?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof Committee
     */
    name?: string | null;
    /**
     * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @type {string}
     * @memberof Committee
     */
    organizationType?: string | null;
    /**
     * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @type {string}
     * @memberof Committee
     */
    organizationTypeFull?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof Committee
     */
    party?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof Committee
     */
    partyFull?: string | null;
    /**
     * State of the committee\'s address as filed on the Form 1
     * @type {string}
     * @memberof Committee
     */
    state?: string | null;
    /**
     * Name of the Committee\'s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     * @type {string}
     * @memberof Committee
     */
    treasurerName?: string | null;
}
/**
 * 
 * @export
 * @interface CommitteeDetail
 */
export interface CommitteeDetail {
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {Array<string>}
     * @memberof CommitteeDetail
     */
    candidateIds?: Array<string> | null;
    /**
     * City of committee as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    city?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeDetail
     */
    committeeId: string;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeDetail
     */
    committeeType?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeDetail
     */
    committeeTypeFull?: string | null;
    /**
     * City of committee custodian as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianName1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianName2?: string | null;
    /**
     * Name of custodian
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianNameFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianNameMiddle?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianNamePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianNameSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianNameTitle?: string | null;
    /**
     * Phone number of the committee custodian as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianPhone?: string | null;
    /**
     * State of the committee custodian as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianState?: string | null;
    /**
     * Street address of the committee custodian as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianStreet1?: string | null;
    /**
     * Second line of the street address of the committee custodian as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianStreet2?: string | null;
    /**
     * Zip code of the committee custodian as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    custodianZip?: string | null;
    /**
     *  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @type {Array<number>}
     * @memberof CommitteeDetail
     */
    cycles?: Array<number> | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeDetail
     */
    designation?: string | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeDetail
     */
    designationFull?: string | null;
    /**
     * Email as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    email?: string | null;
    /**
     * Fax as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    fax?: string | null;
    /**
     * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
     * @type {string}
     * @memberof CommitteeDetail
     */
    filingFrequency?: string | null;
    /**
     * The day the FEC received the committee\'s first filing. This is usually a Form 1 committee registration.
     * @type {string}
     * @memberof CommitteeDetail
     */
    firstFileDate?: string | null;
    /**
     * Form where the information was reported
     * @type {string}
     * @memberof CommitteeDetail
     */
    formType?: string | null;
    /**
     * The day the FEC received the committee\'s most recent filing
     * @type {string}
     * @memberof CommitteeDetail
     */
    lastFileDate?: string | null;
    /**
     * Indicates if the committee is a leadership PAC
     * @type {string}
     * @memberof CommitteeDetail
     */
    leadershipPac?: string | null;
    /**
     * Indicates if the committee is a lobbyist registrant PAC
     * @type {string}
     * @memberof CommitteeDetail
     */
    lobbyistRegistrantPac?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof CommitteeDetail
     */
    name?: string | null;
    /**
     * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @type {string}
     * @memberof CommitteeDetail
     */
    organizationType?: string | null;
    /**
     * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @type {string}
     * @memberof CommitteeDetail
     */
    organizationTypeFull?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof CommitteeDetail
     */
    party?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof CommitteeDetail
     */
    partyFull?: string | null;
    /**
     * Code for the type of party the committee is, only if applicable
     * @type {string}
     * @memberof CommitteeDetail
     */
    partyType?: string | null;
    /**
     * Description of the type of party the committee is, only if applicable
     * @type {string}
     * @memberof CommitteeDetail
     */
    partyTypeFull?: string | null;
    /**
     * Date the committee became a qualified committee.
     * @type {string}
     * @memberof CommitteeDetail
     */
    qualifyingDate?: string | null;
    /**
     * State of the committee\'s address as filed on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    state?: string | null;
    /**
     * State of committee as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    stateFull?: string | null;
    /**
     * Street address of committee as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    street1?: string | null;
    /**
     * Second line of street address of committee as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    street2?: string | null;
    /**
     * City of committee treasurer as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerCity?: string | null;
    /**
     * Name of the Committee\'s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerName1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerName2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerNameMiddle?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerNamePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerNameSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerNameTitle?: string | null;
    /**
     * Phone number of the committee treasurer as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerPhone?: string | null;
    /**
     * State of the committee treasurer as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerState?: string | null;
    /**
     * Street of the committee treasurer as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerStreet1?: string | null;
    /**
     * Second line of the street address of the committee treasurer as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerStreet2?: string | null;
    /**
     * Zip code of the committee treasurer as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    treasurerZip?: string | null;
    /**
     * Website url as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    website?: string | null;
    /**
     * Zip code of committee as reported on the Form 1
     * @type {string}
     * @memberof CommitteeDetail
     */
    zip?: string | null;
}
/**
 * 
 * @export
 * @interface CommitteeDetailPage
 */
export interface CommitteeDetailPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeDetailPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeDetail>}
     * @memberof CommitteeDetailPage
     */
    results?: Array<CommitteeDetail>;
}
/**
 * 
 * @export
 * @interface CommitteeHistory
 */
export interface CommitteeHistory {
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {Array<string>}
     * @memberof CommitteeHistory
     */
    candidateIds?: Array<string> | null;
    /**
     * City of committee as reported on the Form 1
     * @type {string}
     * @memberof CommitteeHistory
     */
    city?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeHistory
     */
    committeeId: string;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeHistory
     */
    committeeType?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeHistory
     */
    committeeTypeFull?: string | null;
    /**
     *  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommitteeHistory
     */
    cycle: number;
    /**
     *  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @type {Array<number>}
     * @memberof CommitteeHistory
     */
    cycles?: Array<number> | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeHistory
     */
    designation?: string | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeHistory
     */
    designationFull?: string | null;
    /**
     * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
     * @type {string}
     * @memberof CommitteeHistory
     */
    filingFrequency?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof CommitteeHistory
     */
    name?: string | null;
    /**
     * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @type {string}
     * @memberof CommitteeHistory
     */
    organizationType?: string | null;
    /**
     * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @type {string}
     * @memberof CommitteeHistory
     */
    organizationTypeFull?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof CommitteeHistory
     */
    party?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof CommitteeHistory
     */
    partyFull?: string | null;
    /**
     * State of the committee\'s address as filed on the Form 1
     * @type {string}
     * @memberof CommitteeHistory
     */
    state?: string | null;
    /**
     * State of committee as reported on the Form 1
     * @type {string}
     * @memberof CommitteeHistory
     */
    stateFull?: string | null;
    /**
     * Street address of committee as reported on the Form 1
     * @type {string}
     * @memberof CommitteeHistory
     */
    street1?: string | null;
    /**
     * Second line of street address of committee as reported on the Form 1
     * @type {string}
     * @memberof CommitteeHistory
     */
    street2?: string | null;
    /**
     * Name of the Committee\'s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     * @type {string}
     * @memberof CommitteeHistory
     */
    treasurerName?: string | null;
    /**
     * Zip code of committee as reported on the Form 1
     * @type {string}
     * @memberof CommitteeHistory
     */
    zip?: string | null;
}
/**
 * 
 * @export
 * @interface CommitteeHistoryPage
 */
export interface CommitteeHistoryPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeHistoryPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeHistory>}
     * @memberof CommitteeHistoryPage
     */
    results?: Array<CommitteeHistory>;
}
/**
 * 
 * @export
 * @interface CommitteePage
 */
export interface CommitteePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<Committee>}
     * @memberof CommitteePage
     */
    results?: Array<Committee>;
}
/**
 * 
 * @export
 * @interface CommitteeReports
 */
export interface CommitteeReports {
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    aggregateAmountPersonalContributionsGeneral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    aggregateContributionsPersonalFundsPrimary?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    allLoansReceivedPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    allLoansReceivedYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    allOtherLoansPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    allOtherLoansYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    allocatedFederalElectionLevinSharePeriod?: number | null;
    /**
     *  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed. 
     * @type {Array<number>}
     * @memberof CommitteeReports
     */
    amendmentChain?: Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    amendmentIndicatorFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    beginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    calendarYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    candidateContributionPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    candidateContributionYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    cashOnHandBeginningCalendarYtd?: number | null;
    /**
     * Balance for the committee at the start of the two-year period
     * @type {number}
     * @memberof CommitteeReports
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    cashOnHandCloseYtd?: number | null;
    /**
     * Ending cash balance on the most recent filing
     * @type {number}
     * @memberof CommitteeReports
     */
    cashOnHandEndPeriod?: number | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeReports
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    committeeName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    committeeType?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    coordinatedExpendituresByPartyCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    coordinatedExpendituresByPartyCommitteeYtd?: number | null;
    /**
     * Ending date of the reporting period
     * @type {Date}
     * @memberof CommitteeReports
     */
    coverageEndDate?: Date | null;
    /**
     * Beginning date of the reporting period
     * @type {Date}
     * @memberof CommitteeReports
     */
    coverageStartDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    csvUrl?: string;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommitteeReports
     */
    cycle?: number | null;
    /**
     * Debts owed by the committee
     * @type {number}
     * @memberof CommitteeReports
     */
    debtsOwedByCommittee?: number | null;
    /**
     * Debts owed to the committee
     * @type {number}
     * @memberof CommitteeReports
     */
    debtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    documentDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    endImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    exemptLegalAccountingDisbursementPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    exemptLegalAccountingDisbursementYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    expenditureSubjectToLimits?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    fecFileId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    fedCandidateCommitteeContributionRefundsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    fedCandidateCommitteeContributionsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    fedCandidateCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    fedCandidateContributionRefundsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    federalFundsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    federalFundsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    fundraisingDisbursementsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    fundraisingDisbursementsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    grossReceiptAuthorizedCommitteeGeneral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    grossReceiptAuthorizedCommitteePrimary?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    grossReceiptMinusPersonalContributionGeneral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    grossReceiptMinusPersonalContributionsPrimary?: number | null;
    /**
     * HTML link to the filing.
     * @type {string}
     * @memberof CommitteeReports
     */
    htmlUrl?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    independentContributionsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    independentExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    independentExpendituresYtd?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    individualItemizedContributionsPeriod?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    individualItemizedContributionsYtd?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    individualUnitemizedContributionsPeriod?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    individualUnitemizedContributionsYtd?: number | null;
    /**
     * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
     * @type {boolean}
     * @memberof CommitteeReports
     */
    isAmended?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    itemsOnHandLiquidated?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loanRepaymentsCandidateLoansPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loanRepaymentsCandidateLoansYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loanRepaymentsMadePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loanRepaymentsMadeYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loanRepaymentsOtherLoansPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loanRepaymentsOtherLoansYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loanRepaymentsReceivedPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loanRepaymentsReceivedYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loansMadeByCandidatePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loansMadeByCandidateYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loansMadePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loansMadeYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loansReceivedFromCandidatePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    loansReceivedFromCandidateYtd?: number | null;
    /**
     * The method used to file with the FEC, either electronic or on paper.
     * @type {string}
     * @memberof CommitteeReports
     */
    meansFiled?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CommitteeReports
     */
    mostRecent?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    mostRecentFileNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    netContributionsCycleToDate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    netContributionsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    netContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    netOperatingExpendituresCycleToDate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    netOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    netOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    nonAllocatedFedElectionActivityPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    nonAllocatedFedElectionActivityYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    nonfedShareAllocatedDisbursementsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    offsetsToFundraisingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    offsetsToFundraisingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    offsetsToLegalAccountingPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    offsetsToLegalAccountingYtd?: number | null;
    /**
     * Offsets to operating expenditures total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    offsetsToOperatingExpendituresPeriod?: number | null;
    /**
     * Offsets to operating expenditures total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    offsetsToOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    operatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    operatingExpendituresYtd?: number | null;
    /**
     * Other disbursements total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    otherDisbursementsPeriod?: number | null;
    /**
     * Other disbursements total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    otherDisbursementsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    otherFedOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    otherFedOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    otherFedReceiptsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    otherFedReceiptsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    otherLoansReceivedPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    otherLoansReceivedYtd?: number | null;
    /**
     * Other committees contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    otherPoliticalCommitteeContributionsPeriod?: number | null;
    /**
     * Other committees contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    otherPoliticalCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    otherReceiptsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    otherReceiptsYtd?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    pdfUrl?: string;
    /**
     * Party committees contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    politicalPartyCommitteeContributionsPeriod?: number | null;
    /**
     * Party committees contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    politicalPartyCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    previousFileNumber?: number | null;
    /**
     * Date the FEC received the electronic or paper record
     * @type {string}
     * @memberof CommitteeReports
     */
    receiptDate?: string | null;
    /**
     * Individual refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    refundedIndividualContributionsPeriod?: number | null;
    /**
     * Individual refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    refundedIndividualContributionsYtd?: number | null;
    /**
     * Other committee refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    refundedOtherPoliticalCommitteeContributionsPeriod?: number | null;
    /**
     * Other committee refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    refundedOtherPoliticalCommitteeContributionsYtd?: number | null;
    /**
     * Political party refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    refundedPoliticalPartyCommitteeContributionsPeriod?: number | null;
    /**
     * Political party refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    refundedPoliticalPartyCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    refundsTotalContributionsColTotalYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    repaymentsLoansMadeByCandidatePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    repaymentsLoansMadeCandidateYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    repaymentsOtherLoansPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    repaymentsOtherLoansYtd?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReports
     */
    reportForm?: string;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof CommitteeReports
     */
    reportType?: string | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof CommitteeReports
     */
    reportTypeFull?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof CommitteeReports
     */
    reportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    sharedFedActivityNonfedYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    sharedFedActivityPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    sharedFedActivityYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    sharedFedOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    sharedFedOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    sharedNonfedOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    sharedNonfedOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    subtotalPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    subtotalSummaryPagePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    subtotalSummaryPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    subtotalSummaryYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalContributionRefundsColTotalPeriod?: number | null;
    /**
     * Total contribution refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    totalContributionRefundsPeriod?: number | null;
    /**
     * Total contribution refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    totalContributionRefundsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalContributionsColumnTotalPeriod?: number | null;
    /**
     * Contribution total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    totalContributionsPeriod?: number | null;
    /**
     * Contribution total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    totalContributionsYtd?: number | null;
    /**
     * Disbursements total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    totalDisbursementsPeriod?: number | null;
    /**
     * Disbursements total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    totalDisbursementsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalFedDisbursementsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalFedDisbursementsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalFedElectionActivityPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalFedElectionActivityYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalFedOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalFedOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalFedReceiptsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalFedReceiptsYtd?: number | null;
    /**
     * Individual contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    totalIndividualContributionsPeriod?: number | null;
    /**
     * Individual contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    totalIndividualContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalLoanRepaymentsMadePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalLoanRepaymentsMadeYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalLoansReceivedPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalLoansReceivedYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalNonfedTransfersPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalNonfedTransfersYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalOffsetsToOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalOffsetsToOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalPeriod?: number | null;
    /**
     * Anything of value (money, goods, services or property) received by a political committee total for the reporting period
     * @type {number}
     * @memberof CommitteeReports
     */
    totalReceiptsPeriod?: number | null;
    /**
     * Anything of value (money, goods, services or property) received by a political committee total for the year to date
     * @type {number}
     * @memberof CommitteeReports
     */
    totalReceiptsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    totalYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersFromAffiliatedCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersFromAffiliatedCommitteeYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersFromAffiliatedPartyPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersFromAffiliatedPartyYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersFromNonfedAccountPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersFromNonfedAccountYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersFromNonfedLevinPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersFromNonfedLevinYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersFromOtherAuthorizedCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersFromOtherAuthorizedCommitteeYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersToAffiliatedCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersToAffilitatedCommitteesYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersToOtherAuthorizedCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReports
     */
    transfersToOtherAuthorizedCommitteeYtd?: number | null;
}
/**
 * 
 * @export
 * @interface CommitteeReportsHouseSenate
 */
export interface CommitteeReportsHouseSenate {
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    aggregateAmountPersonalContributionsGeneral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    aggregateContributionsPersonalFundsPrimary?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    allOtherLoansPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    allOtherLoansYtd?: number | null;
    /**
     *  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed. 
     * @type {Array<number>}
     * @memberof CommitteeReportsHouseSenate
     */
    amendmentChain?: Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    amendmentIndicatorFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    beginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    candidateContributionPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    candidateContributionYtd?: number | null;
    /**
     * Balance for the committee at the start of the two-year period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * Ending cash balance on the most recent filing
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    cashOnHandEndPeriod?: number | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    committeeName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    committeeType?: string;
    /**
     * Ending date of the reporting period
     * @type {Date}
     * @memberof CommitteeReportsHouseSenate
     */
    coverageEndDate?: Date | null;
    /**
     * Beginning date of the reporting period
     * @type {Date}
     * @memberof CommitteeReportsHouseSenate
     */
    coverageStartDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    csvUrl?: string;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    cycle?: number | null;
    /**
     * Debts owed by the committee
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    debtsOwedByCommittee?: number | null;
    /**
     * Debts owed to the committee
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    debtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    documentDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    endImageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    fecFileId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    grossReceiptAuthorizedCommitteeGeneral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    grossReceiptAuthorizedCommitteePrimary?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    grossReceiptMinusPersonalContributionGeneral?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    grossReceiptMinusPersonalContributionsPrimary?: number | null;
    /**
     * HTML link to the filing.
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    htmlUrl?: string | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    individualItemizedContributionsPeriod?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    individualItemizedContributionsYtd?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    individualUnitemizedContributionsPeriod?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    individualUnitemizedContributionsYtd?: number | null;
    /**
     * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
     * @type {boolean}
     * @memberof CommitteeReportsHouseSenate
     */
    isAmended?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    loanRepaymentsCandidateLoansPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    loanRepaymentsCandidateLoansYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    loanRepaymentsOtherLoansPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    loanRepaymentsOtherLoansYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    loansMadeByCandidatePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    loansMadeByCandidateYtd?: number | null;
    /**
     * The method used to file with the FEC, either electronic or on paper.
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    meansFiled?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CommitteeReportsHouseSenate
     */
    mostRecent?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    mostRecentFileNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    netContributionsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    netContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    netOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    netOperatingExpendituresYtd?: number | null;
    /**
     * Offsets to operating expenditures total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    offsetsToOperatingExpendituresPeriod?: number | null;
    /**
     * Offsets to operating expenditures total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    offsetsToOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    operatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    operatingExpendituresYtd?: number | null;
    /**
     * Other disbursements total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    otherDisbursementsPeriod?: number | null;
    /**
     * Other disbursements total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    otherDisbursementsYtd?: number | null;
    /**
     * Other committees contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    otherPoliticalCommitteeContributionsPeriod?: number | null;
    /**
     * Other committees contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    otherPoliticalCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    otherReceiptsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    otherReceiptsYtd?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    pdfUrl?: string;
    /**
     * Party committees contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    politicalPartyCommitteeContributionsPeriod?: number | null;
    /**
     * Party committees contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    politicalPartyCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    previousFileNumber?: number | null;
    /**
     * Date the FEC received the electronic or paper record
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    receiptDate?: string | null;
    /**
     * Individual refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    refundedIndividualContributionsPeriod?: number | null;
    /**
     * Individual refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    refundedIndividualContributionsYtd?: number | null;
    /**
     * Other committee refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    refundedOtherPoliticalCommitteeContributionsPeriod?: number | null;
    /**
     * Other committee refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    refundedOtherPoliticalCommitteeContributionsYtd?: number | null;
    /**
     * Political party refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    refundedPoliticalPartyCommitteeContributionsPeriod?: number | null;
    /**
     * Political party refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    refundedPoliticalPartyCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    refundsTotalContributionsColTotalYtd?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    reportForm?: string;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    reportType?: string | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof CommitteeReportsHouseSenate
     */
    reportTypeFull?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    reportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    subtotalPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalContributionRefundsColTotalPeriod?: number | null;
    /**
     * Total contribution refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalContributionRefundsPeriod?: number | null;
    /**
     * Total contribution refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalContributionRefundsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalContributionsColumnTotalPeriod?: number | null;
    /**
     * Contribution total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalContributionsPeriod?: number | null;
    /**
     * Contribution total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalContributionsYtd?: number | null;
    /**
     * Disbursements total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalDisbursementsPeriod?: number | null;
    /**
     * Disbursements total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalDisbursementsYtd?: number | null;
    /**
     * Individual contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalIndividualContributionsPeriod?: number | null;
    /**
     * Individual contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalIndividualContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalLoanRepaymentsMadePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalLoanRepaymentsMadeYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalLoansReceivedPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalLoansReceivedYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalOffsetsToOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalOffsetsToOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalOperatingExpendituresYtd?: number | null;
    /**
     * Anything of value (money, goods, services or property) received by a political committee total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalReceiptsPeriod?: number | null;
    /**
     * Anything of value (money, goods, services or property) received by a political committee total for the year to date
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    totalReceiptsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    transfersFromOtherAuthorizedCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    transfersFromOtherAuthorizedCommitteeYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    transfersToOtherAuthorizedCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsHouseSenate
     */
    transfersToOtherAuthorizedCommitteeYtd?: number | null;
}
/**
 * 
 * @export
 * @interface CommitteeReportsHouseSenatePage
 */
export interface CommitteeReportsHouseSenatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeReportsHouseSenatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeReportsHouseSenate>}
     * @memberof CommitteeReportsHouseSenatePage
     */
    results?: Array<CommitteeReportsHouseSenate>;
}
/**
 * 
 * @export
 * @interface CommitteeReportsIEOnly
 */
export interface CommitteeReportsIEOnly {
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    beginningImageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    committeeName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    committeeType?: string;
    /**
     * 
     * @type {Date}
     * @memberof CommitteeReportsIEOnly
     */
    coverageEndDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CommitteeReportsIEOnly
     */
    coverageStartDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    csvUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsIEOnly
     */
    cycle?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    documentDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    endImageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    fecFileId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsIEOnly
     */
    independentContributionsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsIEOnly
     */
    independentExpendituresPeriod?: number | null;
    /**
     * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
     * @type {boolean}
     * @memberof CommitteeReportsIEOnly
     */
    isAmended?: boolean | null;
    /**
     * The method used to file with the FEC, either electronic or on paper.
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    meansFiled?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    pdfUrl?: string;
    /**
     * Date the FEC received the electronic or paper record
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    receiptDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    reportForm?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    reportType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsIEOnly
     */
    reportTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsIEOnly
     */
    reportYear?: number | null;
}
/**
 * 
 * @export
 * @interface CommitteeReportsIEOnlyPage
 */
export interface CommitteeReportsIEOnlyPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeReportsIEOnlyPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeReportsIEOnly>}
     * @memberof CommitteeReportsIEOnlyPage
     */
    results?: Array<CommitteeReportsIEOnly>;
}
/**
 * 
 * @export
 * @interface CommitteeReportsPacParty
 */
export interface CommitteeReportsPacParty {
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    allLoansReceivedPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    allLoansReceivedYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    allocatedFederalElectionLevinSharePeriod?: number | null;
    /**
     *  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed. 
     * @type {Array<number>}
     * @memberof CommitteeReportsPacParty
     */
    amendmentChain?: Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    amendmentIndicatorFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    beginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    calendarYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    cashOnHandBeginningCalendarYtd?: number | null;
    /**
     * Balance for the committee at the start of the two-year period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    cashOnHandCloseYtd?: number | null;
    /**
     * Ending cash balance on the most recent filing
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    cashOnHandEndPeriod?: number | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    committeeName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    committeeType?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    coordinatedExpendituresByPartyCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    coordinatedExpendituresByPartyCommitteeYtd?: number | null;
    /**
     * Ending date of the reporting period
     * @type {Date}
     * @memberof CommitteeReportsPacParty
     */
    coverageEndDate?: Date | null;
    /**
     * Beginning date of the reporting period
     * @type {Date}
     * @memberof CommitteeReportsPacParty
     */
    coverageStartDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    csvUrl?: string;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    cycle?: number | null;
    /**
     * Debts owed by the committee
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    debtsOwedByCommittee?: number | null;
    /**
     * Debts owed to the committee
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    debtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    documentDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    endImageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    fecFileId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    fedCandidateCommitteeContributionRefundsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    fedCandidateCommitteeContributionsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    fedCandidateCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    fedCandidateContributionRefundsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    fileNumber?: number | null;
    /**
     * HTML link to the filing.
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    htmlUrl?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    independentExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    independentExpendituresYtd?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    individualItemizedContributionsPeriod?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    individualItemizedContributionsYtd?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    individualUnitemizedContributionsPeriod?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    individualUnitemizedContributionsYtd?: number | null;
    /**
     * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
     * @type {boolean}
     * @memberof CommitteeReportsPacParty
     */
    isAmended?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    loanRepaymentsMadePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    loanRepaymentsMadeYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    loanRepaymentsReceivedPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    loanRepaymentsReceivedYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    loansMadePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    loansMadeYtd?: number | null;
    /**
     * The method used to file with the FEC, either electronic or on paper.
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    meansFiled?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CommitteeReportsPacParty
     */
    mostRecent?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    mostRecentFileNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    netContributionsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    netContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    netOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    netOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    nonAllocatedFedElectionActivityPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    nonAllocatedFedElectionActivityYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    nonfedShareAllocatedDisbursementsPeriod?: number | null;
    /**
     * Offsets to operating expenditures total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    offsetsToOperatingExpendituresPeriod?: number | null;
    /**
     * Offsets to operating expenditures total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    offsetsToOperatingExpendituresYtd?: number | null;
    /**
     * Other disbursements total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    otherDisbursementsPeriod?: number | null;
    /**
     * Other disbursements total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    otherDisbursementsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    otherFedOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    otherFedOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    otherFedReceiptsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    otherFedReceiptsYtd?: number | null;
    /**
     * Other committees contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    otherPoliticalCommitteeContributionsPeriod?: number | null;
    /**
     * Other committees contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    otherPoliticalCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    pdfUrl?: string;
    /**
     * Party committees contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    politicalPartyCommitteeContributionsPeriod?: number | null;
    /**
     * Party committees contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    politicalPartyCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    previousFileNumber?: number | null;
    /**
     * Date the FEC received the electronic or paper record
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    receiptDate?: string | null;
    /**
     * Individual refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    refundedIndividualContributionsPeriod?: number | null;
    /**
     * Individual refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    refundedIndividualContributionsYtd?: number | null;
    /**
     * Other committee refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    refundedOtherPoliticalCommitteeContributionsPeriod?: number | null;
    /**
     * Other committee refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    refundedOtherPoliticalCommitteeContributionsYtd?: number | null;
    /**
     * Political party refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    refundedPoliticalPartyCommitteeContributionsPeriod?: number | null;
    /**
     * Political party refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    refundedPoliticalPartyCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    reportForm?: string;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    reportType?: string | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof CommitteeReportsPacParty
     */
    reportTypeFull?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    reportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    sharedFedActivityNonfedYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    sharedFedActivityPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    sharedFedActivityYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    sharedFedOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    sharedFedOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    sharedNonfedOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    sharedNonfedOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    subtotalSummaryPagePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    subtotalSummaryYtd?: number | null;
    /**
     * Total contribution refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalContributionRefundsPeriod?: number | null;
    /**
     * Total contribution refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalContributionRefundsYtd?: number | null;
    /**
     * Contribution total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalContributionsPeriod?: number | null;
    /**
     * Contribution total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalContributionsYtd?: number | null;
    /**
     * Disbursements total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalDisbursementsPeriod?: number | null;
    /**
     * Disbursements total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalDisbursementsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalFedDisbursementsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalFedDisbursementsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalFedElectionActivityPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalFedElectionActivityYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalFedOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalFedOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalFedReceiptsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalFedReceiptsYtd?: number | null;
    /**
     * Individual contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalIndividualContributionsPeriod?: number | null;
    /**
     * Individual contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalIndividualContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalNonfedTransfersPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalNonfedTransfersYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalOperatingExpendituresYtd?: number | null;
    /**
     * Anything of value (money, goods, services or property) received by a political committee total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalReceiptsPeriod?: number | null;
    /**
     * Anything of value (money, goods, services or property) received by a political committee total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    totalReceiptsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    transfersFromAffiliatedPartyPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    transfersFromAffiliatedPartyYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    transfersFromNonfedAccountPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    transfersFromNonfedAccountYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    transfersFromNonfedLevinPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    transfersFromNonfedLevinYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    transfersToAffiliatedCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPacParty
     */
    transfersToAffilitatedCommitteesYtd?: number | null;
}
/**
 * 
 * @export
 * @interface CommitteeReportsPacPartyPage
 */
export interface CommitteeReportsPacPartyPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeReportsPacPartyPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeReportsPacParty>}
     * @memberof CommitteeReportsPacPartyPage
     */
    results?: Array<CommitteeReportsPacParty>;
}
/**
 * 
 * @export
 * @interface CommitteeReportsPage
 */
export interface CommitteeReportsPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeReportsPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeReports>}
     * @memberof CommitteeReportsPage
     */
    results?: Array<CommitteeReports>;
}
/**
 * 
 * @export
 * @interface CommitteeReportsPresidential
 */
export interface CommitteeReportsPresidential {
    /**
     *  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed. 
     * @type {Array<number>}
     * @memberof CommitteeReportsPresidential
     */
    amendmentChain?: Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    amendmentIndicatorFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    beginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    candidateContributionPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    candidateContributionYtd?: number | null;
    /**
     * Balance for the committee at the start of the two-year period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * Ending cash balance on the most recent filing
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    cashOnHandEndPeriod?: number | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    committeeName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    committeeType?: string;
    /**
     * Ending date of the reporting period
     * @type {Date}
     * @memberof CommitteeReportsPresidential
     */
    coverageEndDate?: Date | null;
    /**
     * Beginning date of the reporting period
     * @type {Date}
     * @memberof CommitteeReportsPresidential
     */
    coverageStartDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    csvUrl?: string;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    cycle?: number | null;
    /**
     * Debts owed by the committee
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    debtsOwedByCommittee?: number | null;
    /**
     * Debts owed to the committee
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    debtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    documentDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    endImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    exemptLegalAccountingDisbursementPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    exemptLegalAccountingDisbursementYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    expenditureSubjectToLimits?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    fecFileId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    federalFundsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    federalFundsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    fundraisingDisbursementsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    fundraisingDisbursementsYtd?: number | null;
    /**
     * HTML link to the filing.
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    htmlUrl?: string | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    individualItemizedContributionsPeriod?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less. total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    individualItemizedContributionsYtd?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    individualUnitemizedContributionsPeriod?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total. total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    individualUnitemizedContributionsYtd?: number | null;
    /**
     * False indicates that a report is the most recent. True indicates that the report has been superseded by an amendment.
     * @type {boolean}
     * @memberof CommitteeReportsPresidential
     */
    isAmended?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    itemsOnHandLiquidated?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    loansReceivedFromCandidatePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    loansReceivedFromCandidateYtd?: number | null;
    /**
     * The method used to file with the FEC, either electronic or on paper.
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    meansFiled?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CommitteeReportsPresidential
     */
    mostRecent?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    mostRecentFileNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    netContributionsCycleToDate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    netOperatingExpendituresCycleToDate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    offsetsToFundraisingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    offsetsToFundraisingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    offsetsToLegalAccountingPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    offsetsToLegalAccountingYtd?: number | null;
    /**
     * Offsets to operating expenditures total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    offsetsToOperatingExpendituresPeriod?: number | null;
    /**
     * Offsets to operating expenditures total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    offsetsToOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    operatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    operatingExpendituresYtd?: number | null;
    /**
     * Other disbursements total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    otherDisbursementsPeriod?: number | null;
    /**
     * Other disbursements total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    otherDisbursementsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    otherLoansReceivedPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    otherLoansReceivedYtd?: number | null;
    /**
     * Other committees contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    otherPoliticalCommitteeContributionsPeriod?: number | null;
    /**
     * Other committees contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    otherPoliticalCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    otherReceiptsPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    otherReceiptsYtd?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    pdfUrl?: string;
    /**
     * Party committees contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    politicalPartyCommitteeContributionsPeriod?: number | null;
    /**
     * Party committees contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    politicalPartyCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    previousFileNumber?: number | null;
    /**
     * Date the FEC received the electronic or paper record
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    receiptDate?: string | null;
    /**
     * Individual refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    refundedIndividualContributionsPeriod?: number | null;
    /**
     * Individual refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    refundedIndividualContributionsYtd?: number | null;
    /**
     * Other committee refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    refundedOtherPoliticalCommitteeContributionsPeriod?: number | null;
    /**
     * Other committee refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    refundedOtherPoliticalCommitteeContributionsYtd?: number | null;
    /**
     * Political party refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    refundedPoliticalPartyCommitteeContributionsPeriod?: number | null;
    /**
     * Political party refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    refundedPoliticalPartyCommitteeContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    repaymentsLoansMadeByCandidatePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    repaymentsLoansMadeCandidateYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    repaymentsOtherLoansPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    repaymentsOtherLoansYtd?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    reportForm?: string;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    reportType?: string | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof CommitteeReportsPresidential
     */
    reportTypeFull?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    reportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    subtotalSummaryPeriod?: number | null;
    /**
     * Total contribution refunds total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalContributionRefundsPeriod?: number | null;
    /**
     * Total contribution refunds total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalContributionRefundsYtd?: number | null;
    /**
     * Contribution total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalContributionsPeriod?: number | null;
    /**
     * Contribution total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalContributionsYtd?: number | null;
    /**
     * Disbursements total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalDisbursementsPeriod?: number | null;
    /**
     * Disbursements total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalDisbursementsYtd?: number | null;
    /**
     * Individual contributions total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalIndividualContributionsPeriod?: number | null;
    /**
     * Individual contributions total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalIndividualContributionsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalLoanRepaymentsMadePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalLoanRepaymentsMadeYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalLoansReceivedPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalLoansReceivedYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalOffsetsToOperatingExpendituresPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalOffsetsToOperatingExpendituresYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalPeriod?: number | null;
    /**
     * Anything of value (money, goods, services or property) received by a political committee total for the reporting period
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalReceiptsPeriod?: number | null;
    /**
     * Anything of value (money, goods, services or property) received by a political committee total for the year to date
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalReceiptsYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    totalYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    transfersFromAffiliatedCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    transfersFromAffiliatedCommitteeYtd?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    transfersToOtherAuthorizedCommitteePeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeReportsPresidential
     */
    transfersToOtherAuthorizedCommitteeYtd?: number | null;
}
/**
 * 
 * @export
 * @interface CommitteeReportsPresidentialPage
 */
export interface CommitteeReportsPresidentialPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeReportsPresidentialPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeReportsPresidential>}
     * @memberof CommitteeReportsPresidentialPage
     */
    results?: Array<CommitteeReportsPresidential>;
}
/**
 * 
 * @export
 * @interface CommitteeSearch
 */
export interface CommitteeSearch {
    /**
     * 
     * @type {string}
     * @memberof CommitteeSearch
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeSearch
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface CommitteeSearchList
 */
export interface CommitteeSearchList {
    /**
     * 
     * @type {Array<CommitteeSearch>}
     * @memberof CommitteeSearchList
     */
    results?: Array<CommitteeSearch>;
}
/**
 * 
 * @export
 * @interface CommitteeTotals
 */
export interface CommitteeTotals {
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    allLoansReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    allOtherLoans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    allocatedFederalElectionLevinShare?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    candidateContribution?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeTotals
     */
    committeeDesignation?: string | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeTotals
     */
    committeeDesignationFull?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeTotals
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof CommitteeTotals
     */
    committeeName?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeTotals
     */
    committeeType?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeTotals
     */
    committeeTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    contributionRefunds?: number | null;
    /**
     * Contribution
     * @type {number}
     * @memberof CommitteeTotals
     */
    contributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    conventionExp?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    coordinatedExpendituresByPartyCommittee?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof CommitteeTotals
     */
    coverageEndDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CommitteeTotals
     */
    coverageStartDate?: Date | null;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommitteeTotals
     */
    cycle: number;
    /**
     * Disbursements
     * @type {number}
     * @memberof CommitteeTotals
     */
    disbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    exemptLegalAccountingDisbursement?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    expPriorYearsSubjectLimits?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    expSubjectLimits?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    fedCandidateCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    fedCandidateContributionRefunds?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    fedDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    fedElectionActivity?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    fedOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    fedReceipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    federalFunds?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    fundraisingDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    independentExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    individualContributions?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
     * @type {number}
     * @memberof CommitteeTotals
     */
    individualItemizedContributions?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
     * @type {number}
     * @memberof CommitteeTotals
     */
    individualUnitemizedContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    itemizedConventionExp?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    itemizedOtherDisb?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    itemizedOtherIncome?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    itemizedOtherRefunds?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    itemizedRefundsRelatingConventionExp?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotals
     */
    lastBeginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    lastCashOnHandEndPeriod?: number;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    lastDebtsOwedByCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    lastDebtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotals
     */
    lastReportTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    lastReportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loanRepayments?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loanRepaymentsCandidateLoans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loanRepaymentsMade?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loanRepaymentsOtherLoans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loanRepaymentsReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loansAndLoanRepaymentsMade?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loansAndLoanRepaymentsReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loansMade?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loansMadeByCandidate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loansReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    loansReceivedFromCandidate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    netContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    netOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    nonAllocatedFedElectionActivity?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    offsetsToFundraisingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    offsetsToLegalAccounting?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    offsetsToOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    operatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    otherDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    otherFedOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    otherFedReceipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    otherLoansReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    otherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    otherReceipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    otherRefunds?: number | null;
    /**
     * Party affiliated with a candidate or committee
     * @type {string}
     * @memberof CommitteeTotals
     */
    partyFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotals
     */
    pdfUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    politicalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    receipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    refundedIndividualContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    refundedOtherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    refundedPoliticalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    refundsRelatingConventionExp?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    repaymentsLoansMadeByCandidate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    repaymentsOtherLoans?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotals
     */
    reportForm?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    sharedFedActivity?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    sharedFedActivityNonfed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    sharedFedOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    sharedNonfedOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    totalExpSubjectLimits?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    totalIndependentContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    totalIndependentExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    totalOffsetsToOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    totalTransfers?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotals
     */
    transactionCoverageDate?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    transfersFromAffiliatedCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    transfersFromAffiliatedParty?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    transfersFromNonfedAccount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    transfersFromNonfedLevin?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    transfersFromOtherAuthorizedCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    transfersToAffiliatedCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    transfersToOtherAuthorizedCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    unitemizedConventionExp?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    unitemizedOtherDisb?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    unitemizedOtherIncome?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    unitemizedOtherRefunds?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotals
     */
    unitemizedRefundsRelatingConventionExp?: number | null;
}
/**
 * 
 * @export
 * @interface CommitteeTotalsHouseSenate
 */
export interface CommitteeTotalsHouseSenate {
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    allOtherLoans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    candidateContribution?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    committeeDesignation?: string | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    committeeDesignationFull?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    committeeName?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    committeeType?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    committeeTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    contributionRefunds?: number | null;
    /**
     * Contribution
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    contributions?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof CommitteeTotalsHouseSenate
     */
    coverageEndDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CommitteeTotalsHouseSenate
     */
    coverageStartDate?: Date | null;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    cycle: number;
    /**
     * Disbursements
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    disbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    individualContributions?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    individualItemizedContributions?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    individualUnitemizedContributions?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    lastBeginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    lastCashOnHandEndPeriod?: number;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    lastDebtsOwedByCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    lastDebtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    lastReportTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    lastReportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    loanRepayments?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    loanRepaymentsCandidateLoans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    loanRepaymentsOtherLoans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    loans?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    loansMadeByCandidate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    netContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    netOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    offsetsToOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    operatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    otherDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    otherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    otherReceipts?: number | null;
    /**
     * Party affiliated with a candidate or committee
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    partyFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    pdfUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    politicalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    receipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    refundedIndividualContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    refundedOtherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    refundedPoliticalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    reportForm?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsHouseSenate
     */
    transactionCoverageDate?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    transfersFromOtherAuthorizedCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsHouseSenate
     */
    transfersToOtherAuthorizedCommittee?: number | null;
}
/**
 * 
 * @export
 * @interface CommitteeTotalsHouseSenatePage
 */
export interface CommitteeTotalsHouseSenatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeTotalsHouseSenatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeTotalsHouseSenate>}
     * @memberof CommitteeTotalsHouseSenatePage
     */
    results?: Array<CommitteeTotalsHouseSenate>;
}
/**
 * 
 * @export
 * @interface CommitteeTotalsIEOnly
 */
export interface CommitteeTotalsIEOnly {
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeTotalsIEOnly
     */
    committeeId?: string | null;
    /**
     * Ending date of the reporting period
     * @type {Date}
     * @memberof CommitteeTotalsIEOnly
     */
    coverageEndDate?: Date | null;
    /**
     * Beginning date of the reporting period
     * @type {Date}
     * @memberof CommitteeTotalsIEOnly
     */
    coverageStartDate?: Date | null;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommitteeTotalsIEOnly
     */
    cycle?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsIEOnly
     */
    lastBeginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsIEOnly
     */
    lastCashOnHandEndPeriod?: number;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsIEOnly
     */
    pdfUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsIEOnly
     */
    reportForm?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsIEOnly
     */
    totalIndependentContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsIEOnly
     */
    totalIndependentExpenditures?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsIEOnly
     */
    transactionCoverageDate?: string;
}
/**
 * 
 * @export
 * @interface CommitteeTotalsIEOnlyPage
 */
export interface CommitteeTotalsIEOnlyPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeTotalsIEOnlyPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeTotalsIEOnly>}
     * @memberof CommitteeTotalsIEOnlyPage
     */
    results?: Array<CommitteeTotalsIEOnly>;
}
/**
 * 
 * @export
 * @interface CommitteeTotalsPacParty
 */
export interface CommitteeTotalsPacParty {
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    allLoansReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    allocatedFederalElectionLevinShare?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    committeeDesignation?: string | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    committeeDesignationFull?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    committeeName?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    committeeType?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    committeeTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    contributionRefunds?: number | null;
    /**
     * Contribution
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    contributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    conventionExp?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    coordinatedExpendituresByPartyCommittee?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof CommitteeTotalsPacParty
     */
    coverageEndDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CommitteeTotalsPacParty
     */
    coverageStartDate?: Date | null;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    cycle: number;
    /**
     * Disbursements
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    disbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    expPriorYearsSubjectLimits?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    expSubjectLimits?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    fedCandidateCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    fedCandidateContributionRefunds?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    fedDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    fedElectionActivity?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    fedOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    fedReceipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    federalFunds?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    independentExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    individualContributions?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    individualItemizedContributions?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    individualUnitemizedContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    itemizedConventionExp?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    itemizedOtherDisb?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    itemizedOtherIncome?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    itemizedOtherRefunds?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    itemizedRefundsRelatingConventionExp?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    lastBeginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    lastCashOnHandEndPeriod?: number;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    lastDebtsOwedByCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    lastDebtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    lastReportTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    lastReportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    loanRepaymentsMade?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    loanRepaymentsReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    loansAndLoanRepaymentsMade?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    loansAndLoanRepaymentsReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    loansMade?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    netContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    netOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    nonAllocatedFedElectionActivity?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    offsetsToOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    operatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    otherDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    otherFedOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    otherFedReceipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    otherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    otherRefunds?: number | null;
    /**
     * Party affiliated with a candidate or committee
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    partyFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    pdfUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    politicalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    receipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    refundedIndividualContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    refundedOtherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    refundedPoliticalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    refundsRelatingConventionExp?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    reportForm?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    sharedFedActivity?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    sharedFedActivityNonfed?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    sharedFedOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    sharedNonfedOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    totalExpSubjectLimits?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    totalTransfers?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsPacParty
     */
    transactionCoverageDate?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    transfersFromAffiliatedParty?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    transfersFromNonfedAccount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    transfersFromNonfedLevin?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    transfersToAffiliatedCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    unitemizedConventionExp?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    unitemizedOtherDisb?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    unitemizedOtherIncome?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    unitemizedOtherRefunds?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPacParty
     */
    unitemizedRefundsRelatingConventionExp?: number | null;
}
/**
 * 
 * @export
 * @interface CommitteeTotalsPacPartyPage
 */
export interface CommitteeTotalsPacPartyPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeTotalsPacPartyPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeTotalsPacParty>}
     * @memberof CommitteeTotalsPacPartyPage
     */
    results?: Array<CommitteeTotalsPacParty>;
}
/**
 * 
 * @export
 * @interface CommitteeTotalsPage
 */
export interface CommitteeTotalsPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeTotalsPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeTotals>}
     * @memberof CommitteeTotalsPage
     */
    results?: Array<CommitteeTotals>;
}
/**
 * 
 * @export
 * @interface CommitteeTotalsPresidential
 */
export interface CommitteeTotalsPresidential {
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    candidateContribution?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    committeeDesignation?: string | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    committeeDesignationFull?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    committeeName?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    committeeType?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    committeeTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    contributionRefunds?: number | null;
    /**
     * Contribution
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    contributions?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof CommitteeTotalsPresidential
     */
    coverageEndDate?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof CommitteeTotalsPresidential
     */
    coverageStartDate?: Date | null;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    cycle: number;
    /**
     * Disbursements
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    disbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    exemptLegalAccountingDisbursement?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    federalFunds?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    fundraisingDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    individualContributions?: number | null;
    /**
     * Individual itemized contributions are from individuals whose aggregate contributions total over $200 per individual per year. Be aware, some filers choose to itemize donations $200 or less.
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    individualItemizedContributions?: number | null;
    /**
     * Unitemized contributions are made individuals whose aggregate contributions total $200 or less per individual per year. Be aware, some filers choose to itemize donations $200 or less and in that case those donations will appear in the itemized total.
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    individualUnitemizedContributions?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    lastBeginningImageNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    lastCashOnHandEndPeriod?: number;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    lastDebtsOwedByCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    lastDebtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    lastReportTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    lastReportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    loanRepaymentsMade?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    loansReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    loansReceivedFromCandidate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    netContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    netOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    offsetsToFundraisingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    offsetsToLegalAccounting?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    offsetsToOperatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    operatingExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    otherDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    otherLoansReceived?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    otherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    otherReceipts?: number | null;
    /**
     * Party affiliated with a candidate or committee
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    partyFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    pdfUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    politicalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    receipts?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    refundedIndividualContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    refundedOtherPoliticalCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    refundedPoliticalPartyCommitteeContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    repaymentsLoansMadeByCandidate?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    repaymentsOtherLoans?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    reportForm?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    totalOffsetsToOperatingExpenditures?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommitteeTotalsPresidential
     */
    transactionCoverageDate?: string;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    transfersFromAffiliatedCommittee?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommitteeTotalsPresidential
     */
    transfersToOtherAuthorizedCommittee?: number | null;
}
/**
 * 
 * @export
 * @interface CommitteeTotalsPresidentialPage
 */
export interface CommitteeTotalsPresidentialPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommitteeTotalsPresidentialPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommitteeTotalsPresidential>}
     * @memberof CommitteeTotalsPresidentialPage
     */
    results?: Array<CommitteeTotalsPresidential>;
}
/**
 * 
 * @export
 * @interface CommunicationCost
 */
export interface CommunicationCost {
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    actionCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    actionCodeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    candidateFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    candidateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    candidateLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    candidateMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    candidateName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    candidateOffice?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    candidateOfficeDistrict?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    candidateOfficeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    candidateOfficeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    committeeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    communicationClass?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    communicationType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    communicationTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommunicationCost
     */
    cycle?: number | null;
    /**
     * 
     * @type {number}
     * @memberof CommunicationCost
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    formTypeCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    imageNumber?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommunicationCost
     */
    originalSubId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    pdfUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    primaryGeneralIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    primaryGeneralIndicatorDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    purpose?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    reportType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommunicationCost
     */
    reportYear?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    scheduleType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    scheduleTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    stateFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommunicationCost
     */
    subId?: number;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    supportOpposeIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    tranId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommunicationCost
     */
    transactionAmount?: number | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    transactionDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCost
     */
    transactionType?: string | null;
}
/**
 * 
 * @export
 * @interface CommunicationCostByCandidate
 */
export interface CommunicationCostByCandidate {
    /**
     * 
     * @type {string}
     * @memberof CommunicationCostByCandidate
     */
    candidateId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCostByCandidate
     */
    candidateName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCostByCandidate
     */
    committeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommunicationCostByCandidate
     */
    committeeName?: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof CommunicationCostByCandidate
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof CommunicationCostByCandidate
     */
    cycle: number;
    /**
     * Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
     * @type {string}
     * @memberof CommunicationCostByCandidate
     */
    supportOpposeIndicator: string;
    /**
     * 
     * @type {number}
     * @memberof CommunicationCostByCandidate
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface CommunicationCostByCandidatePage
 */
export interface CommunicationCostByCandidatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof CommunicationCostByCandidatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<CommunicationCostByCandidate>}
     * @memberof CommunicationCostByCandidatePage
     */
    results?: Array<CommunicationCostByCandidate>;
}
/**
 * 
 * @export
 * @interface CommunicationCostPage
 */
export interface CommunicationCostPage {
    /**
     * 
     * @type {SeekInfo}
     * @memberof CommunicationCostPage
     */
    pagination?: SeekInfo;
    /**
     * 
     * @type {Array<CommunicationCost>}
     * @memberof CommunicationCostPage
     */
    results?: Array<CommunicationCost>;
}
/**
 * 
 * @export
 * @interface EFilings
 */
export interface EFilings {
    /**
     * 
     * @type {number}
     * @memberof EFilings
     */
    amendedBy?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof EFilings
     */
    amendmentChain?: Array<number>;
    /**
     *  Number of times the report has been amended. 
     * @type {number}
     * @memberof EFilings
     */
    amendmentNumber?: number | null;
    /**
     *  For amendments, this file_number is the file_number of the previous report that is being amended. See amended_by for the most recent version of the report. 
     * @type {number}
     * @memberof EFilings
     */
    amendsFile?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EFilings
     */
    beginningImageNumber?: string;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof EFilings
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof EFilings
     */
    committeeName?: string | null;
    /**
     * Ending date of the reporting period
     * @type {string}
     * @memberof EFilings
     */
    coverageEndDate?: string | null;
    /**
     * Beginning date of the reporting period
     * @type {string}
     * @memberof EFilings
     */
    coverageStartDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EFilings
     */
    csvUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof EFilings
     */
    documentDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof EFilings
     */
    endingImageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof EFilings
     */
    fecFileId?: string;
    /**
     * 
     * @type {string}
     * @memberof EFilings
     */
    fecUrl?: string;
    /**
     * Filing ID number
     * @type {number}
     * @memberof EFilings
     */
    fileNumber?: number;
    /**
     * Timestamp of electronic or paper record that FEC received
     * @type {string}
     * @memberof EFilings
     */
    filedDate?: string | null;
    /**
     *  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
     * @type {string}
     * @memberof EFilings
     */
    formType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EFilings
     */
    htmlUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EFilings
     */
    isAmended?: boolean;
    /**
     * Date the information was loaded into the FEC systems. This can be affected by reseting systems and other factors, refer to receipt_date for the day that the FEC received the paper or electronic document. Keep in mind that paper filings take more time to process and there can be a lag between load_date and receipt_date. This field can be helpful to identify paper records that have been processed recently.
     * @type {Date}
     * @memberof EFilings
     */
    loadTimestamp?: Date | null;
    /**
     * 
     * @type {boolean}
     * @memberof EFilings
     */
    mostRecent?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EFilings
     */
    mostRecentFiling?: number;
    /**
     * 
     * @type {string}
     * @memberof EFilings
     */
    pdfUrl?: string;
    /**
     * Date the FEC received the electronic or paper record
     * @type {Date}
     * @memberof EFilings
     */
    receiptDate?: Date | null;
}
/**
 * 
 * @export
 * @interface EFilingsPage
 */
export interface EFilingsPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof EFilingsPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<EFilings>}
     * @memberof EFilingsPage
     */
    results?: Array<EFilings>;
}
/**
 * 
 * @export
 * @interface EfilingsAmendments
 */
export interface EfilingsAmendments {
    /**
     * 
     * @type {Array<number>}
     * @memberof EfilingsAmendments
     */
    amendmentChain?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof EfilingsAmendments
     */
    depth?: number | null;
    /**
     * Filing ID number
     * @type {number}
     * @memberof EfilingsAmendments
     */
    fileNumber?: number;
    /**
     * 
     * @type {number}
     * @memberof EfilingsAmendments
     */
    last?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof EfilingsAmendments
     */
    longestChain?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof EfilingsAmendments
     */
    mostRecentFiling?: number | null;
    /**
     * 
     * @type {number}
     * @memberof EfilingsAmendments
     */
    previousFileNumber?: number | null;
}
/**
 * 
 * @export
 * @interface EfilingsAmendmentsPage
 */
export interface EfilingsAmendmentsPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof EfilingsAmendmentsPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<EfilingsAmendments>}
     * @memberof EfilingsAmendmentsPage
     */
    results?: Array<EfilingsAmendments>;
}
/**
 * 
 * @export
 * @interface Election
 */
export interface Election {
    /**
     * 
     * @type {number}
     * @memberof Election
     */
    candidateElectionYear?: number;
    /**
     * 
     * @type {string}
     * @memberof Election
     */
    candidateId?: string;
    /**
     * 
     * @type {string}
     * @memberof Election
     */
    candidateName?: string;
    /**
     * 
     * @type {string}
     * @memberof Election
     */
    candidatePccId?: string;
    /**
     * 
     * @type {string}
     * @memberof Election
     */
    candidatePccName?: string;
    /**
     * 
     * @type {number}
     * @memberof Election
     */
    cashOnHandEndPeriod?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Election
     */
    committeeIds?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Election
     */
    coverageEndDate?: string;
    /**
     * 
     * @type {string}
     * @memberof Election
     */
    incumbentChallengeFull?: string;
    /**
     * 
     * @type {string}
     * @memberof Election
     */
    partyFull?: string;
    /**
     * 
     * @type {number}
     * @memberof Election
     */
    totalDisbursements?: number;
    /**
     * 
     * @type {number}
     * @memberof Election
     */
    totalReceipts?: number;
}
/**
 * 
 * @export
 * @interface ElectionDate
 */
export interface ElectionDate {
    /**
     * 
     * @type {boolean}
     * @memberof ElectionDate
     */
    activeElection?: boolean;
    /**
     * Date the record was created
     * @type {Date}
     * @memberof ElectionDate
     */
    createDate?: Date | null;
    /**
     * Date of election
     * @type {string}
     * @memberof ElectionDate
     */
    electionDate?: string | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {number}
     * @memberof ElectionDate
     */
    electionDistrict?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ElectionDate
     */
    electionNotes?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof ElectionDate
     */
    electionParty?: string | null;
    /**
     * US state or territory where a candidate runs for office
     * @type {string}
     * @memberof ElectionDate
     */
    electionState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ElectionDate
     */
    electionTypeFull?: string;
    /**
     * Election type  Convention, Primary, General, Special, Runoff etc. 
     * @type {string}
     * @memberof ElectionDate
     */
    electionTypeId?: string | null;
    /**
     * Year of election
     * @type {number}
     * @memberof ElectionDate
     */
    electionYear?: number | null;
    /**
     * Federal office candidate runs for: H, S or P
     * @type {string}
     * @memberof ElectionDate
     */
    officeSought?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ElectionDate
     */
    primaryGeneralDate?: string | null;
    /**
     * Date the record was updated
     * @type {Date}
     * @memberof ElectionDate
     */
    updateDate?: Date | null;
}
/**
 * 
 * @export
 * @interface ElectionDatePage
 */
export interface ElectionDatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ElectionDatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ElectionDate>}
     * @memberof ElectionDatePage
     */
    results?: Array<ElectionDate>;
}
/**
 * 
 * @export
 * @interface ElectionPage
 */
export interface ElectionPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ElectionPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<Election>}
     * @memberof ElectionPage
     */
    results?: Array<Election>;
}
/**
 * 
 * @export
 * @interface ElectionSearch
 */
export interface ElectionSearch {
    /**
     * 
     * @type {string}
     * @memberof ElectionSearch
     */
    candidateStatus?: string;
    /**
     * 
     * @type {number}
     * @memberof ElectionSearch
     */
    cycle?: number;
    /**
     * 
     * @type {string}
     * @memberof ElectionSearch
     */
    district?: string;
    /**
     * 
     * @type {string}
     * @memberof ElectionSearch
     */
    incumbentId?: string;
    /**
     * 
     * @type {string}
     * @memberof ElectionSearch
     */
    incumbentName?: string;
    /**
     * 
     * @type {string}
     * @memberof ElectionSearch
     */
    office?: string;
    /**
     * 
     * @type {string}
     * @memberof ElectionSearch
     */
    state?: string;
}
/**
 * 
 * @export
 * @interface ElectionSearchPage
 */
export interface ElectionSearchPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ElectionSearchPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ElectionSearch>}
     * @memberof ElectionSearchPage
     */
    results?: Array<ElectionSearch>;
}
/**
 * 
 * @export
 * @interface ElectionSummary
 */
export interface ElectionSummary {
    /**
     * 
     * @type {number}
     * @memberof ElectionSummary
     */
    count?: number;
    /**
     * 
     * @type {number}
     * @memberof ElectionSummary
     */
    disbursements?: number;
    /**
     * 
     * @type {number}
     * @memberof ElectionSummary
     */
    independentExpenditures?: number;
    /**
     * 
     * @type {number}
     * @memberof ElectionSummary
     */
    receipts?: number;
}
/**
 * 
 * @export
 * @interface Electioneering
 */
export interface Electioneering {
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    beginningImageNumber?: string | null;
    /**
     *  \"If an electioneering cost targets several candidates, the total cost is divided by the number of candidates. If it only mentions one candidate the full cost of the communication is listed.\" 
     * @type {number}
     * @memberof Electioneering
     */
    calculatedCandidateShare?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    candidateDistrict?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    candidateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    candidateName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    candidateOffice?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    candidateState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    committeeName?: string | null;
    /**
     *  It is the airing, broadcast, cablecast or other dissemination of the communication. 
     * @type {string}
     * @memberof Electioneering
     */
    communicationDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Electioneering
     */
    disbursementAmount?: number | null;
    /**
     *  Disbursement date includes actual disbursements and execution of contracts creating an obligation to make disbursements (SB date of disbursement). 
     * @type {string}
     * @memberof Electioneering
     */
    disbursementDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    electionType?: string;
    /**
     * 
     * @type {number}
     * @memberof Electioneering
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Electioneering
     */
    linkId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Electioneering
     */
    numberOfCandidates?: number | null;
    /**
     *  Name of the entity that received the payment. 
     * @type {string}
     * @memberof Electioneering
     */
    payeeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    payeeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    pdfUrl?: string | null;
    /**
     *  The pubic distribution date is the date that triggers disclosure of the electioneering communication (date reported on page 1 of Form 9). 
     * @type {string}
     * @memberof Electioneering
     */
    publicDistributionDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    purposeDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    receiptDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Electioneering
     */
    reportYear?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    sbImageNum?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Electioneering
     */
    sbLinkId?: string | null;
    /**
     *  The identifier for each electioneering record. 
     * @type {number}
     * @memberof Electioneering
     */
    subId?: number | null;
}
/**
 * 
 * @export
 * @interface ElectioneeringByCandidate
 */
export interface ElectioneeringByCandidate {
    /**
     * 
     * @type {string}
     * @memberof ElectioneeringByCandidate
     */
    candidateId?: string;
    /**
     * 
     * @type {string}
     * @memberof ElectioneeringByCandidate
     */
    candidateName?: string;
    /**
     * 
     * @type {string}
     * @memberof ElectioneeringByCandidate
     */
    committeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof ElectioneeringByCandidate
     */
    committeeName?: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ElectioneeringByCandidate
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ElectioneeringByCandidate
     */
    cycle: number;
    /**
     * 
     * @type {number}
     * @memberof ElectioneeringByCandidate
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface ElectioneeringByCandidatePage
 */
export interface ElectioneeringByCandidatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ElectioneeringByCandidatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ElectioneeringByCandidate>}
     * @memberof ElectioneeringByCandidatePage
     */
    results?: Array<ElectioneeringByCandidate>;
}
/**
 * 
 * @export
 * @interface ElectioneeringPage
 */
export interface ElectioneeringPage {
    /**
     * 
     * @type {SeekInfo}
     * @memberof ElectioneeringPage
     */
    pagination?: SeekInfo;
    /**
     * 
     * @type {Array<Electioneering>}
     * @memberof ElectioneeringPage
     */
    results?: Array<Electioneering>;
}
/**
 * 
 * @export
 * @interface ElectionsList
 */
export interface ElectionsList {
    /**
     * 
     * @type {number}
     * @memberof ElectionsList
     */
    cycle?: number | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {string}
     * @memberof ElectionsList
     */
    district?: string | null;
    /**
     * Federal office candidate runs for: H, S or P
     * @type {string}
     * @memberof ElectionsList
     */
    office?: string | null;
    /**
     * US state or territory
     * @type {string}
     * @memberof ElectionsList
     */
    state?: string | null;
}
/**
 * 
 * @export
 * @interface ElectionsListPage
 */
export interface ElectionsListPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ElectionsListPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ElectionsList>}
     * @memberof ElectionsListPage
     */
    results?: Array<ElectionsList>;
}
/**
 * 
 * @export
 * @interface EntityReceiptDisbursementTotals
 */
export interface EntityReceiptDisbursementTotals {
    /**
     * Cumulative candidate disbursements in a two year period, adjusted to avoid double counting.
     * @type {number}
     * @memberof EntityReceiptDisbursementTotals
     */
    cumulativeCandidateDisbursements?: number | null;
    /**
     * Cumulative candidate receipts in a two year period, adjusted to avoid double counting.
     * @type {number}
     * @memberof EntityReceiptDisbursementTotals
     */
    cumulativeCandidateReceipts?: number | null;
    /**
     * Cumulative PAC disbursements in a two year period, adjusted to avoid double counting.
     * @type {number}
     * @memberof EntityReceiptDisbursementTotals
     */
    cumulativePacDisbursements?: number | null;
    /**
     * Cumulative PAC recipts in a two year period, adjusted to avoid double counting.
     * @type {number}
     * @memberof EntityReceiptDisbursementTotals
     */
    cumulativePacReceipts?: number | null;
    /**
     * Cumulative party disbursements in a two year period, adjusted to avoid double counting.
     * @type {number}
     * @memberof EntityReceiptDisbursementTotals
     */
    cumulativePartyDisbursements?: number | null;
    /**
     * Cumulative party receipts in a two year period, adjusted to avoid double counting.
     * @type {number}
     * @memberof EntityReceiptDisbursementTotals
     */
    cumulativePartyReceipts?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof EntityReceiptDisbursementTotals
     */
    cycle?: number | null;
    /**
     * 
     * @type {string}
     * @memberof EntityReceiptDisbursementTotals
     */
    endDate?: string;
}
/**
 * 
 * @export
 * @interface EntityReceiptDisbursementTotalsPage
 */
export interface EntityReceiptDisbursementTotalsPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof EntityReceiptDisbursementTotalsPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<EntityReceiptDisbursementTotals>}
     * @memberof EntityReceiptDisbursementTotalsPage
     */
    results?: Array<EntityReceiptDisbursementTotals>;
}
/**
 * 
 * @export
 * @interface Filings
 */
export interface Filings {
    /**
     * 
     * @type {Array<number>}
     * @memberof Filings
     */
    amendmentChain?: Array<number> | null;
    /**
     *  The first value in the chain is the original filing.  The ordering in the chain reflects the order the amendments were filed up to the amendment being viewed. 
     * @type {string}
     * @memberof Filings
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    amendmentVersion?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    beginningImageNumber?: string;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof Filings
     */
    candidateId?: string | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof Filings
     */
    candidateName?: string | null;
    /**
     * Balance for the committee at the start of the two-year period
     * @type {number}
     * @memberof Filings
     */
    cashOnHandBeginningPeriod?: number | null;
    /**
     * Ending cash balance on the most recent filing
     * @type {number}
     * @memberof Filings
     */
    cashOnHandEndPeriod?: number | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof Filings
     */
    cmteTp?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof Filings
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof Filings
     */
    committeeName?: string | null;
    /**
     * Ending date of the reporting period
     * @type {string}
     * @memberof Filings
     */
    coverageEndDate?: string | null;
    /**
     * Beginning date of the reporting period
     * @type {string}
     * @memberof Filings
     */
    coverageStartDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    csvUrl?: string;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof Filings
     */
    cycle?: number | null;
    /**
     * Debts owed by the committee
     * @type {number}
     * @memberof Filings
     */
    debtsOwedByCommittee?: number | null;
    /**
     * Debts owed to the committee
     * @type {number}
     * @memberof Filings
     */
    debtsOwedToCommittee?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    documentDescription?: string;
    /**
     *  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
     * @type {string}
     * @memberof Filings
     */
    documentType?: string | null;
    /**
     *  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
     * @type {string}
     * @memberof Filings
     */
    documentTypeFull?: string | null;
    /**
     * Year of election
     * @type {number}
     * @memberof Filings
     */
    electionYear?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    endingImageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    fecFileId?: string;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    fileNumber?: number | null;
    /**
     *  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
     * @type {string}
     * @memberof Filings
     */
    formType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    housePersonalFunds?: number | null;
    /**
     * HTML link to the filing.
     * @type {string}
     * @memberof Filings
     */
    htmlUrl?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Filings
     */
    isAmended?: boolean | null;
    /**
     * The method used to file with the FEC, either electronic or on paper.
     * @type {string}
     * @memberof Filings
     */
    meansFiled?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Filings
     */
    mostRecent?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    mostRecentFileNumber?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    netDonations?: number | null;
    /**
     * Federal office candidate runs for: H, S or P
     * @type {string}
     * @memberof Filings
     */
    office?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    oppositionPersonalFunds?: number | null;
    /**
     * Number of pages in the document
     * @type {number}
     * @memberof Filings
     */
    pages?: number | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof Filings
     */
    party?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    pdfUrl?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    previousFileNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    primaryGeneralIndicator?: string | null;
    /**
     * Date the FEC received the electronic or paper record
     * @type {string}
     * @memberof Filings
     */
    receiptDate?: string | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof Filings
     */
    reportType?: string | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof Filings
     */
    reportTypeFull?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof Filings
     */
    reportYear?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    requestType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    senatePersonalFunds?: number | null;
    /**
     * US state or territory where a candidate runs for office
     * @type {string}
     * @memberof Filings
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    subId?: string;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    totalCommunicationCost?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    totalDisbursements?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    totalIndependentExpenditures?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    totalIndividualContributions?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Filings
     */
    totalReceipts?: number | null;
    /**
     * Name of the Committee\'s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     * @type {string}
     * @memberof Filings
     */
    treasurerName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Filings
     */
    updateDate?: string | null;
}
/**
 * 
 * @export
 * @interface FilingsPage
 */
export interface FilingsPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof FilingsPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<Filings>}
     * @memberof FilingsPage
     */
    results?: Array<Filings>;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault
 */
export interface InlineResponseDefault {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof InlineResponseDefault
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ElectionDate>}
     * @memberof InlineResponseDefault
     */
    results?: Array<ElectionDate>;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1
 */
export interface InlineResponseDefault1 {
    /**
     * 
     * @type {Array<InlineResponseDefault1AdminFines>}
     * @memberof InlineResponseDefault1
     */
    adminFines?: Array<InlineResponseDefault1AdminFines>;
    /**
     * 
     * @type {Array<InlineResponseDefault1Adrs>}
     * @memberof InlineResponseDefault1
     */
    adrs?: Array<InlineResponseDefault1Adrs>;
    /**
     * 
     * @type {Array<InlineResponseDefault1AdvisoryOpinions>}
     * @memberof InlineResponseDefault1
     */
    advisoryOpinions?: Array<InlineResponseDefault1AdvisoryOpinions>;
    /**
     * 
     * @type {Array<InlineResponseDefault1Murs>}
     * @memberof InlineResponseDefault1
     */
    murs?: Array<InlineResponseDefault1Murs>;
    /**
     * 
     * @type {Array<InlineResponseDefault1Regulations>}
     * @memberof InlineResponseDefault1
     */
    regulations?: Array<InlineResponseDefault1Regulations>;
    /**
     * 
     * @type {Array<InlineResponseDefault1Statutes>}
     * @memberof InlineResponseDefault1
     */
    statutes?: Array<InlineResponseDefault1Statutes>;
    /**
     * Total number of Admin Fines matching the search criteria
     * @type {number}
     * @memberof InlineResponseDefault1
     */
    totalAdminFines?: number;
    /**
     * Total number of ADRs matching the search criteria
     * @type {number}
     * @memberof InlineResponseDefault1
     */
    totalAdrs?: number;
    /**
     * Total number of Advisory Opinions matching the search criteria
     * @type {number}
     * @memberof InlineResponseDefault1
     */
    totalAdvisoryOpinions?: number;
    /**
     * Total number of legal documents matching the search criteria
     * @type {number}
     * @memberof InlineResponseDefault1
     */
    totalAll?: number;
    /**
     * Total number of MURs matching the search criteria
     * @type {number}
     * @memberof InlineResponseDefault1
     */
    totalMurs?: number;
    /**
     * Total number of Regulations matching the search criteria
     * @type {number}
     * @memberof InlineResponseDefault1
     */
    totalRegulations?: number;
    /**
     * Total number of Statutes matching the search criteria
     * @type {number}
     * @memberof InlineResponseDefault1
     */
    totalStatutes?: number;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1AdminFines
 */
export interface InlineResponseDefault1AdminFines {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    challengeOutcome?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    challengeReceiptDate?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1AdminFines
     */
    checkAmount?: number;
    /**
     * 
     * @type {Array<InlineResponseDefault1CommissionVotes>}
     * @memberof InlineResponseDefault1AdminFines
     */
    commissionVotes?: Array<InlineResponseDefault1CommissionVotes>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    committeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    docId?: string;
    /**
     * 
     * @type {object}
     * @memberof InlineResponseDefault1AdminFines
     */
    documentHighlights?: object;
    /**
     * 
     * @type {Array<InlineResponseDefault1Documents>}
     * @memberof InlineResponseDefault1AdminFines
     */
    documents?: Array<InlineResponseDefault1Documents>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1AdminFines
     */
    finalDeterminationAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    finalDeterminationDate?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1AdminFines
     */
    highlights?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    no?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    petitionCourtDecisionDate?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    petitionCourtFilingDate?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    reasonToBelieveActionDate?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1AdminFines
     */
    reasonToBelieveFineAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    reportType?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    reportYear?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1AdminFines
     */
    treasuryReferralAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    treasuryReferralDate?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdminFines
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Adrs
 */
export interface InlineResponseDefault1Adrs {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Adrs
     */
    closeDate?: string;
    /**
     * 
     * @type {Array<InlineResponseDefault1CommissionVotes>}
     * @memberof InlineResponseDefault1Adrs
     */
    commissionVotes?: Array<InlineResponseDefault1CommissionVotes>;
    /**
     * 
     * @type {Array<InlineResponseDefault1Dispositions>}
     * @memberof InlineResponseDefault1Adrs
     */
    dispositions?: Array<InlineResponseDefault1Dispositions>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Adrs
     */
    docId?: string;
    /**
     * 
     * @type {object}
     * @memberof InlineResponseDefault1Adrs
     */
    documentHighlights?: object;
    /**
     * 
     * @type {Array<InlineResponseDefault1Documents>}
     * @memberof InlineResponseDefault1Adrs
     */
    documents?: Array<InlineResponseDefault1Documents>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1Adrs
     */
    electionCycles?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1Adrs
     */
    highlights?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Adrs
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Adrs
     */
    no?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Adrs
     */
    openDate?: string;
    /**
     * 
     * @type {Array<InlineResponseDefault1Participants>}
     * @memberof InlineResponseDefault1Adrs
     */
    participants?: Array<InlineResponseDefault1Participants>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1Adrs
     */
    respondents?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1Adrs
     */
    subjects?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Adrs
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1AdvisoryOpinions
 */
export interface InlineResponseDefault1AdvisoryOpinions {
    /**
     * 
     * @type {Array<InlineResponseDefault1AoCitations>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    aoCitations?: Array<InlineResponseDefault1AoCitations>;
    /**
     * 
     * @type {Array<InlineResponseDefault1AoCitations>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    aosCitedBy?: Array<InlineResponseDefault1AoCitations>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    commenterNames?: Array<string>;
    /**
     * 
     * @type {object}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    documentHighlights?: object;
    /**
     * 
     * @type {Array<InlineResponseDefault1Documents1>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    documents?: Array<InlineResponseDefault1Documents1>;
    /**
     * 
     * @type {Array<InlineResponseDefault1Entities>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    entities?: Array<InlineResponseDefault1Entities>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    highlights?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    isPending?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    issueDate?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    no?: string;
    /**
     * 
     * @type {Array<InlineResponseDefault1RegulatoryCitations>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    regulatoryCitations?: Array<InlineResponseDefault1RegulatoryCitations>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    representativeNames?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    requestDate?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    requestorNames?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    requestorTypes?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    status?: string;
    /**
     * 
     * @type {Array<InlineResponseDefault1StatutoryCitations>}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    statutoryCitations?: Array<InlineResponseDefault1StatutoryCitations>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AdvisoryOpinions
     */
    summary?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1AoCitations
 */
export interface InlineResponseDefault1AoCitations {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AoCitations
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1AoCitations
     */
    no?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Citations
 */
export interface InlineResponseDefault1Citations {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Citations
     */
    text?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Citations
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Citations
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Citations
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1CommissionVotes
 */
export interface InlineResponseDefault1CommissionVotes {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1CommissionVotes
     */
    action?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1CommissionVotes
     */
    voteDate?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Dispositions
 */
export interface InlineResponseDefault1Dispositions {
    /**
     * 
     * @type {Array<InlineResponseDefault1Citations>}
     * @memberof InlineResponseDefault1Dispositions
     */
    citations?: Array<InlineResponseDefault1Citations>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Dispositions
     */
    disposition?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1Dispositions
     */
    penalty?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Dispositions
     */
    respondent?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Documents
 */
export interface InlineResponseDefault1Documents {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Documents
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Documents
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Documents
     */
    documentDate?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1Documents
     */
    documentId?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1Documents
     */
    length?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Documents
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Documents1
 */
export interface InlineResponseDefault1Documents1 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Documents1
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Documents1
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Documents1
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1Documents1
     */
    documentId?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Documents1
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Entities
 */
export interface InlineResponseDefault1Entities {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Entities
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Entities
     */
    role?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Entities
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Murs
 */
export interface InlineResponseDefault1Murs {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Murs
     */
    closeDate?: string;
    /**
     * 
     * @type {Array<InlineResponseDefault1CommissionVotes>}
     * @memberof InlineResponseDefault1Murs
     */
    commissionVotes?: Array<InlineResponseDefault1CommissionVotes>;
    /**
     * 
     * @type {Array<InlineResponseDefault1Dispositions>}
     * @memberof InlineResponseDefault1Murs
     */
    dispositions?: Array<InlineResponseDefault1Dispositions>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Murs
     */
    docId?: string;
    /**
     * 
     * @type {object}
     * @memberof InlineResponseDefault1Murs
     */
    documentHighlights?: object;
    /**
     * 
     * @type {Array<InlineResponseDefault1Documents>}
     * @memberof InlineResponseDefault1Murs
     */
    documents?: Array<InlineResponseDefault1Documents>;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1Murs
     */
    electionCycles?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1Murs
     */
    highlights?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Murs
     */
    murType?: InlineResponseDefault1MursMurTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Murs
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Murs
     */
    no?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Murs
     */
    openDate?: string;
    /**
     * 
     * @type {Array<InlineResponseDefault1Participants>}
     * @memberof InlineResponseDefault1Murs
     */
    participants?: Array<InlineResponseDefault1Participants>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1Murs
     */
    respondents?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1Murs
     */
    subjects?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Murs
     */
    url?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineResponseDefault1MursMurTypeEnum {
    Current = 'current',
    Archived = 'archived'
}

/**
 * 
 * @export
 * @interface InlineResponseDefault1Participants
 */
export interface InlineResponseDefault1Participants {
    /**
     * 
     * @type {object}
     * @memberof InlineResponseDefault1Participants
     */
    citations?: object;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Participants
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Participants
     */
    role?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Regulations
 */
export interface InlineResponseDefault1Regulations {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Regulations
     */
    docId?: string;
    /**
     * 
     * @type {object}
     * @memberof InlineResponseDefault1Regulations
     */
    documentHighlights?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1Regulations
     */
    highlights?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Regulations
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Regulations
     */
    no?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Regulations
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1RegulatoryCitations
 */
export interface InlineResponseDefault1RegulatoryCitations {
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1RegulatoryCitations
     */
    part?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1RegulatoryCitations
     */
    section?: number;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1RegulatoryCitations
     */
    title?: number;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Statutes
 */
export interface InlineResponseDefault1Statutes {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Statutes
     */
    chapter?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Statutes
     */
    docId?: string;
    /**
     * 
     * @type {object}
     * @memberof InlineResponseDefault1Statutes
     */
    documentHighlights?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponseDefault1Statutes
     */
    highlights?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Statutes
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Statutes
     */
    no?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Statutes
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Statutes
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1StatutoryCitations
 */
export interface InlineResponseDefault1StatutoryCitations {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1StatutoryCitations
     */
    section?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1StatutoryCitations
     */
    title?: number;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault2
 */
export interface InlineResponseDefault2 {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof InlineResponseDefault2
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ReportDate>}
     * @memberof InlineResponseDefault2
     */
    results?: Array<ReportDate>;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault3
 */
export interface InlineResponseDefault3 {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof InlineResponseDefault3
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<InlineResponseDefault3Results>}
     * @memberof InlineResponseDefault3
     */
    results?: Array<InlineResponseDefault3Results>;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault3Results
 */
export interface InlineResponseDefault3Results {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    actionCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    actionCodeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateFirstName?: string | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateMiddleName?: string | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateOffice?: string | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateOfficeDistrict?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateOfficeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateOfficeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateOfficeStateFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidatePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    candidateSuffix?: string | null;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof InlineResponseDefault3Results
     */
    committee?: CommitteeHistory;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    committeeId?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault3Results
     */
    cycle?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    dueDateTerms?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    electionType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    electionTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    entityType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    entityTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    fecCommitteeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    fecElectionTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    fecElectionTypeYear?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault3Results
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    filingForm?: string | null;
    /**
     * An unique identifier for each page the electronic or paper report.
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    imageNumber?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof InlineResponseDefault3Results
     */
    incurredDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    interestRateTerms?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    lineNumber?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault3Results
     */
    linkId?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof InlineResponseDefault3Results
     */
    loadDate?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault3Results
     */
    loanBalance?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    loanSourceCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    loanSourceFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    loanSourceLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    loanSourceMiddleName?: string | null;
    /**
     * Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,other line of credit, or personal funds of the candidate
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    loanSourceName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    loanSourcePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    loanSourceState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    loanSourceStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    loanSourceStreet2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    loanSourceSuffix?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault3Results
     */
    loanSourceZip?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    memoCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    memoText?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault3Results
     */
    originalLoanAmount?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault3Results
     */
    originalSubId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault3Results
     */
    paymentToDate?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    pdfUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    personallyFunded?: string | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    reportType?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof InlineResponseDefault3Results
     */
    reportYear?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault3Results
     */
    scheduleALineNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    scheduleType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    scheduleTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    securedInd?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    subId?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault3Results
     */
    transactionId?: string | null;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault4
 */
export interface InlineResponseDefault4 {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof InlineResponseDefault4
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<InlineResponseDefault4Results>}
     * @memberof InlineResponseDefault4
     */
    results?: Array<InlineResponseDefault4Results>;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault4Results
 */
export interface InlineResponseDefault4Results {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    actionCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    actionCodeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault4Results
     */
    amountIncurredPeriod?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    candidateFirstName?: string | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    candidateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    candidateLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    candidateOffice?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    candidateOfficeDistrict?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    candidateOfficeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    candidateOfficeStateFull?: string | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    canidateName?: string | null;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof InlineResponseDefault4Results
     */
    committee?: CommitteeHistory;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    committeeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    conduitCommitteeCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    conduitCommitteeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    conduitCommitteeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    conduitCommitteeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    conduitCommitteeStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    conduitCommitteeStreet2?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault4Results
     */
    conduitCommitteeZip?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorPrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorStreet2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    creditorDebtorSuffix?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault4Results
     */
    electionCycle?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    entityType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault4Results
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    filingForm?: string | null;
    /**
     * An unique identifier for each page the electronic or paper report.
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    imageNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    lineNumber?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault4Results
     */
    linkId?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof InlineResponseDefault4Results
     */
    loadDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    natureOfDebt?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault4Results
     */
    originalSubId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault4Results
     */
    outstandingBalanceBeginningOfPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault4Results
     */
    outstandingBalanceCloseOfPeriod?: number | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault4Results
     */
    paymentPeriod?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    pdfUrl?: string;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    reportType?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof InlineResponseDefault4Results
     */
    reportYear?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    scheduleType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    scheduleTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    subId?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault4Results
     */
    transactionId?: string | null;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault5
 */
export interface InlineResponseDefault5 {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof InlineResponseDefault5
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<InlineResponseDefault5Results>}
     * @memberof InlineResponseDefault5
     */
    results?: Array<InlineResponseDefault5Results>;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault5Results
 */
export interface InlineResponseDefault5Results {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    actionCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    actionCodeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    aggregateGeneralElectionExpenditure?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    backReferenceScheduleName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault5Results
     */
    backReferenceTransactionId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateFirstName?: string | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateMiddleName?: string | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateOffice?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateOfficeDistrict?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateOfficeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateOfficeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateOfficeStateFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidatePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    candidateSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    catologCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    catologCodeFull?: string | null;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof InlineResponseDefault5Results
     */
    committee?: CommitteeHistory;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    committeeDesignatedCoordinatedExpenditureIndicator?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    committeeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    conduitCommitteeCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    conduitCommitteeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    conduitCommitteeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    conduitCommitteeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    conduitCommitteeStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    conduitCommitteeStreet2?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault5Results
     */
    conduitCommitteeZip?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    designatedCommitteeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    designatedCommitteeName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault5Results
     */
    electionCycle?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    entityType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    entityTypeDesc?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault5Results
     */
    expenditureAmount?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof InlineResponseDefault5Results
     */
    expenditureDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    expenditurePurposeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    expenditureType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    expenditureTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault5Results
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    filingForm?: string | null;
    /**
     * An unique identifier for each page the electronic or paper report.
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    imageNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    lineNumber?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault5Results
     */
    linkId?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof InlineResponseDefault5Results
     */
    loadDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    memoCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    memoCodeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    memoText?: string | null;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault5Results
     */
    originalSubId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    payeeFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    payeeLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    payeeMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    payeeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    pdfUrl?: string;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    reportType?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof InlineResponseDefault5Results
     */
    reportYear?: number | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    scheduleType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    scheduleTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    subId?: string;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof InlineResponseDefault5Results
     */
    subordinateCommittee?: CommitteeHistory;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    subordinateCommitteeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    transactionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    unlimitedSpendingFlag?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault5Results
     */
    unlimitedSpendingFlagFull?: string | null;
}
/**
 * 
 * @export
 * @interface OffsetInfo
 */
export interface OffsetInfo {
    /**
     * 
     * @type {number}
     * @memberof OffsetInfo
     */
    count?: number;
    /**
     * 
     * @type {number}
     * @memberof OffsetInfo
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof OffsetInfo
     */
    pages?: number;
    /**
     * 
     * @type {number}
     * @memberof OffsetInfo
     */
    perPage?: number;
}
/**
 * 
 * @export
 * @interface OperationsLog
 */
export interface OperationsLog {
    /**
     *      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
     * @type {string}
     * @memberof OperationsLog
     */
    amendmentIndicator?: string | null;
    /**
     *  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
     * @type {string}
     * @memberof OperationsLog
     */
    beginningImageNumber?: string | null;
    /**
     *  A unique identifier of the registered filer. 
     * @type {string}
     * @memberof OperationsLog
     */
    candidateCommitteeId?: string | null;
    /**
     * Ending date of the reporting period
     * @type {Date}
     * @memberof OperationsLog
     */
    coverageEndDate?: Date | null;
    /**
     * Beginning date of the reporting period
     * @type {Date}
     * @memberof OperationsLog
     */
    coverageStartDate?: Date | null;
    /**
     * Image number is an unique identifier for each page the electronic or paper report. The last image number corresponds to the image number for the last page of the document.
     * @type {string}
     * @memberof OperationsLog
     */
    endingImageNumber?: string | null;
    /**
     *  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
     * @type {string}
     * @memberof OperationsLog
     */
    formType?: string | null;
    /**
     * Date the FEC received the electronic or paper record
     * @type {Date}
     * @memberof OperationsLog
     */
    receiptDate?: Date | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof OperationsLog
     */
    reportType?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof OperationsLog
     */
    reportYear?: number | null;
    /**
     *  Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified. 
     * @type {number}
     * @memberof OperationsLog
     */
    statusNum?: number | null;
    /**
     *  A unique identifier of the transactional report. 
     * @type {number}
     * @memberof OperationsLog
     */
    subId?: number;
    /**
     *  Date when the report is entered into the database 
     * @type {Date}
     * @memberof OperationsLog
     */
    summaryDataCompleteDate?: Date | null;
    /**
     *  Same day or a day after the report is loaded in the database 
     * @type {Date}
     * @memberof OperationsLog
     */
    summaryDataVerificationDate?: Date | null;
    /**
     *  Date when the report is processed completely 
     * @type {string}
     * @memberof OperationsLog
     */
    transactionDataCompleteDate?: string | null;
}
/**
 * 
 * @export
 * @interface OperationsLogPage
 */
export interface OperationsLogPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof OperationsLogPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<OperationsLog>}
     * @memberof OperationsLogPage
     */
    results?: Array<OperationsLog>;
}
/**
 * 
 * @export
 * @interface RadAnalyst
 */
export interface RadAnalyst {
    /**
     * Email of RAD analyst
     * @type {string}
     * @memberof RadAnalyst
     */
    analystEmail?: string | null;
    /**
     * ID of RAD analyst.
     * @type {number}
     * @memberof RadAnalyst
     */
    analystId?: number | null;
    /**
     * Short ID of RAD analyst.
     * @type {number}
     * @memberof RadAnalyst
     */
    analystShortId?: number | null;
    /**
     * Title of RAD analyst
     * @type {string}
     * @memberof RadAnalyst
     */
    analystTitle?: string | null;
    /**
     * Date of most recent RAD analyst assignment change
     * @type {string}
     * @memberof RadAnalyst
     */
    assignmentUpdateDate?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof RadAnalyst
     */
    committeeId: string;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof RadAnalyst
     */
    committeeName?: string | null;
    /**
     * Fist name of RAD analyst
     * @type {string}
     * @memberof RadAnalyst
     */
    firstName?: string | null;
    /**
     * Last name of RAD analyst
     * @type {string}
     * @memberof RadAnalyst
     */
    lastName?: string | null;
    /**
     * Branch of RAD analyst
     * @type {string}
     * @memberof RadAnalyst
     */
    radBranch?: string | null;
    /**
     * Telephone extension of RAD analyst
     * @type {number}
     * @memberof RadAnalyst
     */
    telephoneExt?: number | null;
}
/**
 * 
 * @export
 * @interface RadAnalystPage
 */
export interface RadAnalystPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof RadAnalystPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<RadAnalyst>}
     * @memberof RadAnalystPage
     */
    results?: Array<RadAnalyst>;
}
/**
 * 
 * @export
 * @interface ReportDate
 */
export interface ReportDate {
    /**
     * Date the record was created
     * @type {string}
     * @memberof ReportDate
     */
    createDate?: string | null;
    /**
     * Date the report is due
     * @type {string}
     * @memberof ReportDate
     */
    dueDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ReportDate
     */
    reportType?: string;
    /**
     * 
     * @type {string}
     * @memberof ReportDate
     */
    reportTypeFull?: string;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof ReportDate
     */
    reportYear?: number | null;
    /**
     * Date the record was updated
     * @type {string}
     * @memberof ReportDate
     */
    updateDate?: string | null;
}
/**
 * 
 * @export
 * @interface ReportDatePage
 */
export interface ReportDatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ReportDatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ReportDate>}
     * @memberof ReportDatePage
     */
    results?: Array<ReportDate>;
}
/**
 * 
 * @export
 * @interface ReportType
 */
export interface ReportType {
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof ReportType
     */
    reportType: string;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof ReportType
     */
    reportTypeFull?: string | null;
}
/**
 * 
 * @export
 * @interface ScheduleA
 */
export interface ScheduleA {
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    amendmentIndicatorDesc?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    backReferenceScheduleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    backReferenceTransactionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    candidateFirstName?: string | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof ScheduleA
     */
    candidateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    candidateLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    candidateMiddleName?: string | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof ScheduleA
     */
    candidateName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    candidateOffice?: string | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {string}
     * @memberof ScheduleA
     */
    candidateOfficeDistrict?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    candidateOfficeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    candidateOfficeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    candidateOfficeStateFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    candidatePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    candidateSuffix?: string | null;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof ScheduleA
     */
    committee?: CommitteeHistory;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleA
     */
    committeeId?: string | null;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof ScheduleA
     */
    committeeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    conduitCommitteeCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    conduitCommitteeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    conduitCommitteeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    conduitCommitteeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    conduitCommitteeStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    conduitCommitteeStreet2?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleA
     */
    conduitCommitteeZip?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleA
     */
    contributionReceiptAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    contributionReceiptDate?: string | null;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof ScheduleA
     */
    contributor?: CommitteeHistory;
    /**
     * 
     * @type {number}
     * @memberof ScheduleA
     */
    contributorAggregateYtd?: number;
    /**
     * City of contributor
     * @type {string}
     * @memberof ScheduleA
     */
    contributorCity?: string | null;
    /**
     * Employer of contributor, filers need to make an effort to gather this information
     * @type {string}
     * @memberof ScheduleA
     */
    contributorEmployer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    contributorFirstName?: string | null;
    /**
     * The FEC identifier should be represented here if the contributor is registered with the FEC.
     * @type {string}
     * @memberof ScheduleA
     */
    contributorId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    contributorLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    contributorMiddleName?: string | null;
    /**
     * Name of contributor
     * @type {string}
     * @memberof ScheduleA
     */
    contributorName?: string | null;
    /**
     * Occupation of contributor, filers need to make an effort to gather this information
     * @type {string}
     * @memberof ScheduleA
     */
    contributorOccupation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    contributorPrefix?: string | null;
    /**
     * State of contributor
     * @type {string}
     * @memberof ScheduleA
     */
    contributorState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    contributorStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    contributorStreet2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    contributorSuffix?: string | null;
    /**
     * Zip code of contributor
     * @type {string}
     * @memberof ScheduleA
     */
    contributorZip?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    donorCommitteeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    electionType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    electionTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    entityType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    entityTypeDesc?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    fecElectionTypeDesc?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    fecElectionYear?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleA
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    filingForm?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    imageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    increasedLimit?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ScheduleA
     */
    isIndividual?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    lineNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    lineNumberLabel?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleA
     */
    linkId?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof ScheduleA
     */
    loadDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    memoCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    memoCodeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    memoText?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ScheduleA
     */
    memoedSubtotal?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    nationalCommitteeNonfederalAccount?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    originalSubId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    pdfUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    receiptType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    receiptTypeDesc?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    receiptTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    recipientCommitteeType?: string | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof ScheduleA
     */
    reportType?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof ScheduleA
     */
    reportYear?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    scheduleType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    scheduleTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    subId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    transactionId?: string | null;
    /**
     *  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
     * @type {number}
     * @memberof ScheduleA
     */
    twoYearTransactionPeriod?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleA
     */
    unusedContbrId?: string | null;
}
/**
 * 
 * @export
 * @interface ScheduleAByEmployer
 */
export interface ScheduleAByEmployer {
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleAByEmployer
     */
    committeeId: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleAByEmployer
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ScheduleAByEmployer
     */
    cycle: number;
    /**
     * Employer of contributor as reported on the committee\'s filing
     * @type {string}
     * @memberof ScheduleAByEmployer
     */
    employer: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAByEmployer
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface ScheduleAByEmployerPage
 */
export interface ScheduleAByEmployerPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleAByEmployerPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleAByEmployer>}
     * @memberof ScheduleAByEmployerPage
     */
    results?: Array<ScheduleAByEmployer>;
}
/**
 * 
 * @export
 * @interface ScheduleAByOccupation
 */
export interface ScheduleAByOccupation {
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleAByOccupation
     */
    committeeId: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleAByOccupation
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ScheduleAByOccupation
     */
    cycle: number;
    /**
     * Occupation of contributor as reported on the committee\'s filing
     * @type {string}
     * @memberof ScheduleAByOccupation
     */
    occupation: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAByOccupation
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface ScheduleAByOccupationPage
 */
export interface ScheduleAByOccupationPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleAByOccupationPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleAByOccupation>}
     * @memberof ScheduleAByOccupationPage
     */
    results?: Array<ScheduleAByOccupation>;
}
/**
 * 
 * @export
 * @interface ScheduleABySize
 */
export interface ScheduleABySize {
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleABySize
     */
    committeeId: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleABySize
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ScheduleABySize
     */
    cycle: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleABySize
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleABySize
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface ScheduleABySizeCandidate
 */
export interface ScheduleABySizeCandidate {
    /**
     * 
     * @type {string}
     * @memberof ScheduleABySizeCandidate
     */
    candidateId?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleABySizeCandidate
     */
    count?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleABySizeCandidate
     */
    cycle?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleABySizeCandidate
     */
    size?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleABySizeCandidate
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface ScheduleABySizeCandidatePage
 */
export interface ScheduleABySizeCandidatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleABySizeCandidatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleABySizeCandidate>}
     * @memberof ScheduleABySizeCandidatePage
     */
    results?: Array<ScheduleABySizeCandidate>;
}
/**
 * 
 * @export
 * @interface ScheduleABySizePage
 */
export interface ScheduleABySizePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleABySizePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleABySize>}
     * @memberof ScheduleABySizePage
     */
    results?: Array<ScheduleABySize>;
}
/**
 * 
 * @export
 * @interface ScheduleAByState
 */
export interface ScheduleAByState {
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleAByState
     */
    committeeId: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleAByState
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ScheduleAByState
     */
    cycle: number;
    /**
     * US state or territory
     * @type {string}
     * @memberof ScheduleAByState
     */
    state: string;
    /**
     * US state or territory
     * @type {string}
     * @memberof ScheduleAByState
     */
    stateFull: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAByState
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface ScheduleAByStateCandidate
 */
export interface ScheduleAByStateCandidate {
    /**
     * 
     * @type {string}
     * @memberof ScheduleAByStateCandidate
     */
    candidateId?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAByStateCandidate
     */
    count?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAByStateCandidate
     */
    cycle?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAByStateCandidate
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAByStateCandidate
     */
    stateFull?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAByStateCandidate
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface ScheduleAByStateCandidatePage
 */
export interface ScheduleAByStateCandidatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleAByStateCandidatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleAByStateCandidate>}
     * @memberof ScheduleAByStateCandidatePage
     */
    results?: Array<ScheduleAByStateCandidate>;
}
/**
 * 
 * @export
 * @interface ScheduleAByStatePage
 */
export interface ScheduleAByStatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleAByStatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleAByState>}
     * @memberof ScheduleAByStatePage
     */
    results?: Array<ScheduleAByState>;
}
/**
 * 
 * @export
 * @interface ScheduleAByStateRecipientTotals
 */
export interface ScheduleAByStateRecipientTotals {
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof ScheduleAByStateRecipientTotals
     */
    committeeType?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof ScheduleAByStateRecipientTotals
     */
    committeeTypeFull?: string | null;
    /**
     * Number of records making up the total.
     * @type {number}
     * @memberof ScheduleAByStateRecipientTotals
     */
    count?: number | null;
    /**
     *  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ScheduleAByStateRecipientTotals
     */
    cycle?: number | null;
    /**
     * US state or territory
     * @type {string}
     * @memberof ScheduleAByStateRecipientTotals
     */
    state?: string | null;
    /**
     * US state or territory
     * @type {string}
     * @memberof ScheduleAByStateRecipientTotals
     */
    stateFull?: string | null;
    /**
     * The calculated total.
     * @type {number}
     * @memberof ScheduleAByStateRecipientTotals
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface ScheduleAByStateRecipientTotalsPage
 */
export interface ScheduleAByStateRecipientTotalsPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleAByStateRecipientTotalsPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleAByStateRecipientTotals>}
     * @memberof ScheduleAByStateRecipientTotalsPage
     */
    results?: Array<ScheduleAByStateRecipientTotals>;
}
/**
 * 
 * @export
 * @interface ScheduleAByZip
 */
export interface ScheduleAByZip {
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleAByZip
     */
    committeeId: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleAByZip
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ScheduleAByZip
     */
    cycle: number;
    /**
     * US state or territory
     * @type {string}
     * @memberof ScheduleAByZip
     */
    state?: string | null;
    /**
     * US state or territory
     * @type {string}
     * @memberof ScheduleAByZip
     */
    stateFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAByZip
     */
    total?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAByZip
     */
    zip: string;
}
/**
 * 
 * @export
 * @interface ScheduleAByZipPage
 */
export interface ScheduleAByZipPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleAByZipPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleAByZip>}
     * @memberof ScheduleAByZipPage
     */
    results?: Array<ScheduleAByZip>;
}
/**
 * 
 * @export
 * @interface ScheduleAEfile
 */
export interface ScheduleAEfile {
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    backReferenceScheduleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    backReferenceTransactionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    beginningImageNumber?: string;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof ScheduleAEfile
     */
    committee?: CommitteeHistory;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    conduitCommitteeCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    conduitCommitteeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    conduitCommitteeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    conduitCommitteeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    conduitCommitteeStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    conduitCommitteeStreet2?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAEfile
     */
    conduitCommitteeZip?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAEfile
     */
    contributionReceiptAmount?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributionReceiptDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAEfile
     */
    contributorAggregateYtd?: number | null;
    /**
     * City of contributor
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorCity?: string | null;
    /**
     * Employer of contributor, filers need to make an effort to gather this information
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorEmployer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorName?: string;
    /**
     * Occupation of contributor, filers need to make an effort to gather this information
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorOccupation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorPrefix?: string | null;
    /**
     * State of contributor
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorSuffix?: string | null;
    /**
     * Zip code of contributor
     * @type {string}
     * @memberof ScheduleAEfile
     */
    contributorZip?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    csvUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAEfile
     */
    cycle?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    entityType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    fecElectionTypeDesc?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAEfile
     */
    fileNumber: number;
    /**
     * 
     * @type {EFilings}
     * @memberof ScheduleAEfile
     */
    filing?: EFilings;
    /**
     * An unique identifier for each page the electronic or paper report.
     * @type {string}
     * @memberof ScheduleAEfile
     */
    imageNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    lineNumber?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ScheduleAEfile
     */
    loadTimestamp?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    memoCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    memoText?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    pdfUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    pgo?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleAEfile
     */
    relatedLineNumber: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    reportType?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleAEfile
     */
    transactionId?: string | null;
}
/**
 * 
 * @export
 * @interface ScheduleAEfilePage
 */
export interface ScheduleAEfilePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleAEfilePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleAEfile>}
     * @memberof ScheduleAEfilePage
     */
    results?: Array<ScheduleAEfile>;
}
/**
 * 
 * @export
 * @interface ScheduleAPage
 */
export interface ScheduleAPage {
    /**
     * 
     * @type {SeekInfo}
     * @memberof ScheduleAPage
     */
    pagination?: SeekInfo;
    /**
     * 
     * @type {Array<ScheduleA>}
     * @memberof ScheduleAPage
     */
    results?: Array<ScheduleA>;
}
/**
 * 
 * @export
 * @interface ScheduleB
 */
export interface ScheduleB {
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    amendmentIndicatorDesc?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    backReferenceScheduleId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    backReferenceTransactionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    beneficiaryCommitteeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    candidateFirstName?: string | null;
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {string}
     * @memberof ScheduleB
     */
    candidateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    candidateLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    candidateMiddleName?: string | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof ScheduleB
     */
    candidateName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    candidateOffice?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    candidateOfficeDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    candidateOfficeDistrict?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    candidateOfficeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    candidateOfficeStateFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    candidatePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    candidateSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    categoryCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    categoryCodeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    commDt?: string | null;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof ScheduleB
     */
    committee?: CommitteeHistory;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleB
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    conduitCommitteeCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    conduitCommitteeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    conduitCommitteeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    conduitCommitteeStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    conduitCommitteeStreet2?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleB
     */
    conduitCommitteeZip?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleB
     */
    disbursementAmount?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    disbursementDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    disbursementDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    disbursementPurposeCategory?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    disbursementType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    disbursementTypeDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    electionType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    electionTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    entityType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    entityTypeDesc?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    fecElectionTypeDesc?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    fecElectionYear?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleB
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    filingForm?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    imageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    lineNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    lineNumberLabel?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleB
     */
    linkId?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof ScheduleB
     */
    loadDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    memoCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    memoCodeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    memoText?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ScheduleB
     */
    memoedSubtotal?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    nationalCommitteeNonfederalAccount?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    originalSubId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    payeeEmployer?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    payeeFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    payeeLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    payeeMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    payeeOccupation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    payeePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    payeeSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    pdfUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    recipientCity?: string | null;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof ScheduleB
     */
    recipientCommittee?: CommitteeHistory;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    recipientCommitteeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    recipientName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    recipientState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    recipientZip?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    refDispExcessFlg?: string | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof ScheduleB
     */
    reportType?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof ScheduleB
     */
    reportYear?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    scheduleType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    scheduleTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleB
     */
    semiAnnualBundledRefund?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    spenderCommitteeType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    subId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    transactionId?: string | null;
    /**
     *  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
     * @type {number}
     * @memberof ScheduleB
     */
    twoYearTransactionPeriod?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleB
     */
    unusedRecipientCommitteeId?: string | null;
}
/**
 * 
 * @export
 * @interface ScheduleBByPurpose
 */
export interface ScheduleBByPurpose {
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleBByPurpose
     */
    committeeId: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleBByPurpose
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ScheduleBByPurpose
     */
    cycle: number;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleBByPurpose
     */
    memoCount?: number | null;
    /**
     *  Schedule B disbursements aggregated by memoed items only 
     * @type {number}
     * @memberof ScheduleBByPurpose
     */
    memoTotal?: number | null;
    /**
     * Purpose of the expenditure
     * @type {string}
     * @memberof ScheduleBByPurpose
     */
    purpose: string;
    /**
     *  Schedule B disbursements aggregated by non-memoed items only 
     * @type {number}
     * @memberof ScheduleBByPurpose
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface ScheduleBByPurposePage
 */
export interface ScheduleBByPurposePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleBByPurposePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleBByPurpose>}
     * @memberof ScheduleBByPurposePage
     */
    results?: Array<ScheduleBByPurpose>;
}
/**
 * 
 * @export
 * @interface ScheduleBByRecipient
 */
export interface ScheduleBByRecipient {
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleBByRecipient
     */
    committeeId: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleBByRecipient
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ScheduleBByRecipient
     */
    cycle: number;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleBByRecipient
     */
    memoCount?: number | null;
    /**
     *  Schedule B disbursements aggregated by memoed items only 
     * @type {number}
     * @memberof ScheduleBByRecipient
     */
    memoTotal?: number | null;
    /**
     * Name of the entity receiving the disbursement
     * @type {string}
     * @memberof ScheduleBByRecipient
     */
    recipientName: string;
    /**
     *  Schedule B disbursements aggregated by non-memoed items only 
     * @type {number}
     * @memberof ScheduleBByRecipient
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface ScheduleBByRecipientID
 */
export interface ScheduleBByRecipientID {
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleBByRecipientID
     */
    committeeId: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBByRecipientID
     */
    committeeName?: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleBByRecipientID
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ScheduleBByRecipientID
     */
    cycle: number;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleBByRecipientID
     */
    memoCount?: number | null;
    /**
     *  Schedule B disbursements aggregated by memoed items only 
     * @type {number}
     * @memberof ScheduleBByRecipientID
     */
    memoTotal?: number | null;
    /**
     * The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
     * @type {string}
     * @memberof ScheduleBByRecipientID
     */
    recipientId: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBByRecipientID
     */
    recipientName?: string;
    /**
     *  Schedule B disbursements aggregated by non-memoed items only 
     * @type {number}
     * @memberof ScheduleBByRecipientID
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface ScheduleBByRecipientIDPage
 */
export interface ScheduleBByRecipientIDPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleBByRecipientIDPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleBByRecipientID>}
     * @memberof ScheduleBByRecipientIDPage
     */
    results?: Array<ScheduleBByRecipientID>;
}
/**
 * 
 * @export
 * @interface ScheduleBByRecipientPage
 */
export interface ScheduleBByRecipientPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleBByRecipientPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleBByRecipient>}
     * @memberof ScheduleBByRecipientPage
     */
    results?: Array<ScheduleBByRecipient>;
}
/**
 * 
 * @export
 * @interface ScheduleBEfile
 */
export interface ScheduleBEfile {
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    backReferenceScheduleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    backReferenceTransactionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    beginningImageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    beneficiaryCommitteeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    candidateOffice?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    candidateOfficeDistrict?: string | null;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof ScheduleBEfile
     */
    committee?: CommitteeHistory;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    csvUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleBEfile
     */
    disbursementAmount?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    disbursementDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    disbursementDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    disbursementType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    entityType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleBEfile
     */
    fileNumber: number;
    /**
     * 
     * @type {EFilings}
     * @memberof ScheduleBEfile
     */
    filing?: EFilings;
    /**
     * An unique identifier for each page the electronic or paper report.
     * @type {string}
     * @memberof ScheduleBEfile
     */
    imageNumber?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ScheduleBEfile
     */
    isNotice?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    lineNumber?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ScheduleBEfile
     */
    loadTimestamp?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    memoCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    memoText?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    payeeName?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    pdfUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    recipientCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    recipientName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    recipientPrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    recipientState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    recipientSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    recipientZip?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleBEfile
     */
    relatedLineNumber: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    reportType?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleBEfile
     */
    semiAnnualBundledRefund?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBEfile
     */
    transactionId?: string | null;
}
/**
 * 
 * @export
 * @interface ScheduleBEfilePage
 */
export interface ScheduleBEfilePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleBEfilePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleBEfile>}
     * @memberof ScheduleBEfilePage
     */
    results?: Array<ScheduleBEfile>;
}
/**
 * 
 * @export
 * @interface ScheduleBPage
 */
export interface ScheduleBPage {
    /**
     * 
     * @type {SeekInfo}
     * @memberof ScheduleBPage
     */
    pagination?: SeekInfo;
    /**
     * 
     * @type {Array<ScheduleB>}
     * @memberof ScheduleBPage
     */
    results?: Array<ScheduleB>;
}
/**
 * 
 * @export
 * @interface ScheduleE
 */
export interface ScheduleE {
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    actionCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    actionCodeFull?: string | null;
    /**
     *      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
     * @type {string}
     * @memberof ScheduleE
     */
    amendmentIndicator?: string | null;
    /**
     *  Number of times the report has been amended. 
     * @type {number}
     * @memberof ScheduleE
     */
    amendmentNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    backReferenceScheduleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    backReferenceTransactionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    candidate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    candidateFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    candidateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    candidateLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    candidateMiddleName?: string | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof ScheduleE
     */
    candidateName?: string | null;
    /**
     * Federal office candidate runs for: H, S or P
     * @type {string}
     * @memberof ScheduleE
     */
    candidateOffice?: string | null;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {string}
     * @memberof ScheduleE
     */
    candidateOfficeDistrict?: string | null;
    /**
     * US state or territory
     * @type {string}
     * @memberof ScheduleE
     */
    candidateOfficeState?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof ScheduleE
     */
    candidateParty?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    candidatePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    candidateSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    categoryCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    categoryCodeFull?: string | null;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof ScheduleE
     */
    committee?: CommitteeHistory;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleE
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    conduitCommitteeCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    conduitCommitteeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    conduitCommitteeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    conduitCommitteeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    conduitCommitteeStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    conduitCommitteeStreet2?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleE
     */
    conduitCommitteeZip?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    disseminationDate?: string | null;
    /**
     * Election type  Convention, Primary, General, Special, Runoff etc. 
     * @type {string}
     * @memberof ScheduleE
     */
    electionType?: string | null;
    /**
     * Election type  Convention, Primary, General, Special, Runoff etc. 
     * @type {string}
     * @memberof ScheduleE
     */
    electionTypeFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleE
     */
    expenditureAmount?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    expenditureDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    expenditureDescription?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleE
     */
    fileNumber?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    filerFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    filerLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    filerMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    filerPrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    filerSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    filingForm?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    imageNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    independentSignDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    independentSignName?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ScheduleE
     */
    isNotice?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    lineNumber?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleE
     */
    linkId?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    memoCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    memoCodeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    memoText?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ScheduleE
     */
    memoedSubtotal?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    notaryCommissionExpirationDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    notarySignDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    notarySignName?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleE
     */
    officeTotalYtd?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    originalSubId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeeCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeeFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeeLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeeMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeeStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeeStreet2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeeSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    payeeZip?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    pdfUrl?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleE
     */
    previousFileNumber?: number | null;
    /**
     * Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @type {string}
     * @memberof ScheduleE
     */
    reportType?: string | null;
    /**
     *  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @type {number}
     * @memberof ScheduleE
     */
    reportYear?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    scheduleType?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    scheduleTypeFull?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    subId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleE
     */
    supportOpposeIndicator?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleE
     */
    transactionId?: number | null;
}
/**
 * 
 * @export
 * @interface ScheduleEByCandidate
 */
export interface ScheduleEByCandidate {
    /**
     * 
     * @type {string}
     * @memberof ScheduleEByCandidate
     */
    candidateId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEByCandidate
     */
    candidateName?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEByCandidate
     */
    committeeId?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEByCandidate
     */
    committeeName?: string;
    /**
     *  Number of records making up the total. 
     * @type {number}
     * @memberof ScheduleEByCandidate
     */
    count?: number | null;
    /**
     *  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof ScheduleEByCandidate
     */
    cycle: number;
    /**
     * Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
     * @type {string}
     * @memberof ScheduleEByCandidate
     */
    supportOpposeIndicator: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleEByCandidate
     */
    total?: number | null;
}
/**
 * 
 * @export
 * @interface ScheduleEByCandidatePage
 */
export interface ScheduleEByCandidatePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleEByCandidatePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleEByCandidate>}
     * @memberof ScheduleEByCandidatePage
     */
    results?: Array<ScheduleEByCandidate>;
}
/**
 * 
 * @export
 * @interface ScheduleEEfile
 */
export interface ScheduleEEfile {
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    amendmentIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    backReferenceScheduleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    backReferenceTransactionId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    beginningImageNumber?: string;
    /**
     * Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @type {string}
     * @memberof ScheduleEEfile
     */
    candOfficeDistrict?: string | null;
    /**
     * US state or territory
     * @type {string}
     * @memberof ScheduleEEfile
     */
    candOfficeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    candidateFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    candidateId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    candidateMiddleName?: string | null;
    /**
     * Name of candidate running for office
     * @type {string}
     * @memberof ScheduleEEfile
     */
    candidateName?: string | null;
    /**
     * Federal office candidate runs for: H, S or P
     * @type {string}
     * @memberof ScheduleEEfile
     */
    candidateOffice?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    candidatePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    candidateSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    categoryCode?: string | null;
    /**
     * 
     * @type {CommitteeHistory}
     * @memberof ScheduleEEfile
     */
    committee?: CommitteeHistory;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    committeeId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    csvUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    disseminationDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    entityType?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleEEfile
     */
    expenditureAmount?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    expenditureDate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    expenditureDescription?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    fecUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleEEfile
     */
    fileNumber: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    filerFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    filerLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    filerMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    filerPrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    filerSuffix?: string | null;
    /**
     * 
     * @type {EFilings}
     * @memberof ScheduleEEfile
     */
    filing?: EFilings;
    /**
     * An unique identifier for each page the electronic or paper report.
     * @type {string}
     * @memberof ScheduleEEfile
     */
    imageNumber?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ScheduleEEfile
     */
    isNotice?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    lineNumber?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ScheduleEEfile
     */
    loadTimestamp?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    memoCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    memoText?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    notarySignDate?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleEEfile
     */
    officeTotalYtd?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeeCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeeFirstName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeeLastName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeeMiddleName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeeName?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeePrefix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeeState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeeStreet1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeeStreet2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeeSuffix?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    payeeZip?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    pdfUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof ScheduleEEfile
     */
    relatedLineNumber: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    reportType?: string;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    supportOpposeIndicator?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleEEfile
     */
    transactionId?: string | null;
}
/**
 * 
 * @export
 * @interface ScheduleEEfilePage
 */
export interface ScheduleEEfilePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof ScheduleEEfilePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<ScheduleEEfile>}
     * @memberof ScheduleEEfilePage
     */
    results?: Array<ScheduleEEfile>;
}
/**
 * 
 * @export
 * @interface ScheduleEPage
 */
export interface ScheduleEPage {
    /**
     * 
     * @type {SeekInfo}
     * @memberof ScheduleEPage
     */
    pagination?: SeekInfo;
    /**
     * 
     * @type {Array<ScheduleE>}
     * @memberof ScheduleEPage
     */
    results?: Array<ScheduleE>;
}
/**
 * 
 * @export
 * @interface SeekInfo
 */
export interface SeekInfo {
    /**
     * 
     * @type {number}
     * @memberof SeekInfo
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof SeekInfo
     */
    lastIndexes?: string;
    /**
     * 
     * @type {number}
     * @memberof SeekInfo
     */
    pages?: number;
    /**
     * 
     * @type {number}
     * @memberof SeekInfo
     */
    perPage?: number;
}
/**
 * 
 * @export
 * @interface StateElectionOfficeInfo
 */
export interface StateElectionOfficeInfo {
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    addressLine1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    addressLine2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    city?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    email?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    faxNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    mailingAddress1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    mailingAddress2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    mailingCity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    mailingState?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    mailingZipcode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    officeName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    officeType: string;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    primaryPhoneNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    secondaryPhoneNumber?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    state: string;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    stateFullName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    websiteUrl1?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    websiteUrl2?: string | null;
    /**
     * 
     * @type {string}
     * @memberof StateElectionOfficeInfo
     */
    zipCode?: string | null;
}
/**
 * 
 * @export
 * @interface StateElectionOfficeInfoPage
 */
export interface StateElectionOfficeInfoPage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof StateElectionOfficeInfoPage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<StateElectionOfficeInfo>}
     * @memberof StateElectionOfficeInfoPage
     */
    results?: Array<StateElectionOfficeInfo>;
}
/**
 * 
 * @export
 * @interface TotalByOffice
 */
export interface TotalByOffice {
    /**
     * 
     * @type {number}
     * @memberof TotalByOffice
     */
    electionYear?: number;
    /**
     * 
     * @type {string}
     * @memberof TotalByOffice
     */
    office?: string;
    /**
     * 
     * @type {number}
     * @memberof TotalByOffice
     */
    totalDisbursement?: number;
    /**
     * 
     * @type {number}
     * @memberof TotalByOffice
     */
    totalReceipt?: number;
}
/**
 * 
 * @export
 * @interface TotalByOfficePage
 */
export interface TotalByOfficePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof TotalByOfficePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<TotalByOffice>}
     * @memberof TotalByOfficePage
     */
    results?: Array<TotalByOffice>;
}
/**
 * 
 * @export
 * @interface TotalsCommittee
 */
export interface TotalsCommittee {
    /**
     *  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @type {Array<string>}
     * @memberof TotalsCommittee
     */
    candidateIds?: Array<string> | null;
    /**
     * 
     * @type {number}
     * @memberof TotalsCommittee
     */
    cashOnHandEndPeriod?: number;
    /**
     * City of committee as reported on the Form 1
     * @type {string}
     * @memberof TotalsCommittee
     */
    city?: string | null;
    /**
     *  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\'s begin with the letter C which is followed by eight digits. 
     * @type {string}
     * @memberof TotalsCommittee
     */
    committeeId: string;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof TotalsCommittee
     */
    committeeType?: string | null;
    /**
     * The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @type {string}
     * @memberof TotalsCommittee
     */
    committeeTypeFull?: string | null;
    /**
     *  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @type {number}
     * @memberof TotalsCommittee
     */
    cycle: number;
    /**
     *  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @type {Array<number>}
     * @memberof TotalsCommittee
     */
    cycles?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof TotalsCommittee
     */
    debtsOwedByCommittee?: number;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof TotalsCommittee
     */
    designation?: string | null;
    /**
     * The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @type {string}
     * @memberof TotalsCommittee
     */
    designationFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TotalsCommittee
     */
    disbursements?: number;
    /**
     * The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
     * @type {string}
     * @memberof TotalsCommittee
     */
    filingFrequency?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TotalsCommittee
     */
    independentExpenditures?: number;
    /**
     * The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @type {string}
     * @memberof TotalsCommittee
     */
    name?: string | null;
    /**
     * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @type {string}
     * @memberof TotalsCommittee
     */
    organizationType?: string | null;
    /**
     * The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @type {string}
     * @memberof TotalsCommittee
     */
    organizationTypeFull?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof TotalsCommittee
     */
    party?: string | null;
    /**
     * Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @type {string}
     * @memberof TotalsCommittee
     */
    partyFull?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TotalsCommittee
     */
    receipts?: number;
    /**
     * State of the committee\'s address as filed on the Form 1
     * @type {string}
     * @memberof TotalsCommittee
     */
    state?: string | null;
    /**
     * State of committee as reported on the Form 1
     * @type {string}
     * @memberof TotalsCommittee
     */
    stateFull?: string | null;
    /**
     * Street address of committee as reported on the Form 1
     * @type {string}
     * @memberof TotalsCommittee
     */
    street1?: string | null;
    /**
     * Second line of street address of committee as reported on the Form 1
     * @type {string}
     * @memberof TotalsCommittee
     */
    street2?: string | null;
    /**
     * Name of the Committee\'s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     * @type {string}
     * @memberof TotalsCommittee
     */
    treasurerName?: string | null;
    /**
     * Zip code of committee as reported on the Form 1
     * @type {string}
     * @memberof TotalsCommittee
     */
    zip?: string | null;
}
/**
 * 
 * @export
 * @interface TotalsCommitteePage
 */
export interface TotalsCommitteePage {
    /**
     * 
     * @type {OffsetInfo}
     * @memberof TotalsCommitteePage
     */
    pagination?: OffsetInfo;
    /**
     * 
     * @type {Array<TotalsCommittee>}
     * @memberof TotalsCommitteePage
     */
    results?: Array<TotalsCommittee>;
}

/**
 * AuditApi - axios parameter creator
 * @export
 */
export const AuditApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  This endpoint contains Final Audit Reports approved by the Commission since inception. The search can be based on information about the audited committee (Name, FEC ID Number, Type,  Election Cycle) or the issues covered in the report. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [minElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
         * @param {Array<number>} [auditId]  The audit issue. Each subcategory has an unique ID 
         * @param {Array<string>} [auditCaseId]  Primary/foreign key for audit tables 
         * @param {Array<string>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [committeeDesignation] Type of committee:         - H or S - Congressional         - P - Presidential         - X or Y or Z - Party         - N or Q - PAC         - I - Independent expenditure         - O - Super PAC  
         * @param {number} [maxElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
         * @param {Array<string>} [q] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [qq] Name of candidate running for office
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [subCategoryId]  The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [primaryCategoryId]  Audit category ID (table PK) 
         * @param {Array<number>} [cycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditCaseGet(apiKey: string, minElectionCycle?: number, auditId?: Array<number>, auditCaseId?: Array<string>, committeeType?: Array<string>, committeeId?: Array<string>, committeeDesignation?: string, maxElectionCycle?: number, q?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, qq?: Array<string>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, subCategoryId?: string, perPage?: number, primaryCategoryId?: string, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling auditCaseGet.');
            }
            const localVarPath = `/audit-case/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (minElectionCycle !== undefined) {
                localVarQueryParameter['min_election_cycle'] = minElectionCycle;
            }

            if (auditId) {
                localVarQueryParameter['audit_id'] = auditId;
            }

            if (auditCaseId) {
                localVarQueryParameter['audit_case_id'] = auditCaseId;
            }

            if (committeeType) {
                localVarQueryParameter['committee_type'] = committeeType;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (committeeDesignation !== undefined) {
                localVarQueryParameter['committee_designation'] = committeeDesignation;
            }

            if (maxElectionCycle !== undefined) {
                localVarQueryParameter['max_election_cycle'] = maxElectionCycle;
            }

            if (q) {
                localVarQueryParameter['q'] = q;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (qq) {
                localVarQueryParameter['qq'] = qq;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (subCategoryId !== undefined) {
                localVarQueryParameter['sub_category_id'] = subCategoryId;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (primaryCategoryId !== undefined) {
                localVarQueryParameter['primary_category_id'] = primaryCategoryId;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This lists the options for the categories and subcategories available in the /audit-search/ endpoint. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [primaryCategoryName] Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [primaryCategoryId]  Audit category ID (table PK) 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditCategoryGet(apiKey: string, sortHideNull?: boolean, primaryCategoryName?: Array<string>, page?: number, sortNullOnly?: boolean, perPage?: number, primaryCategoryId?: Array<string>, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling auditCategoryGet.');
            }
            const localVarPath = `/audit-category/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (primaryCategoryName) {
                localVarQueryParameter['primary_category_name'] = primaryCategoryName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (primaryCategoryId) {
                localVarQueryParameter['primary_category_id'] = primaryCategoryId;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This lists the options for the primary categories available in the /audit-search/ endpoint. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [primaryCategoryName] Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [primaryCategoryId]  Audit category ID (table PK) 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditPrimaryCategoryGet(apiKey: string, sortHideNull?: boolean, primaryCategoryName?: Array<string>, page?: number, sortNullOnly?: boolean, perPage?: number, primaryCategoryId?: Array<string>, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling auditPrimaryCategoryGet.');
            }
            const localVarPath = `/audit-primary-category/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (primaryCategoryName) {
                localVarQueryParameter['primary_category_name'] = primaryCategoryName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (primaryCategoryId) {
                localVarQueryParameter['primary_category_id'] = primaryCategoryId;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesAuditCandidatesGet(q: Array<string>, apiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q','Required parameter q was null or undefined when calling namesAuditCandidatesGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling namesAuditCandidatesGet.');
            }
            const localVarPath = `/names/audit_candidates/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (q) {
                localVarQueryParameter['q'] = q;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesAuditCommitteesGet(q: Array<string>, apiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q','Required parameter q was null or undefined when calling namesAuditCommitteesGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling namesAuditCommitteesGet.');
            }
            const localVarPath = `/names/audit_committees/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (q) {
                localVarQueryParameter['q'] = q;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditApi - functional programming interface
 * @export
 */
export const AuditApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  This endpoint contains Final Audit Reports approved by the Commission since inception. The search can be based on information about the audited committee (Name, FEC ID Number, Type,  Election Cycle) or the issues covered in the report. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [minElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
         * @param {Array<number>} [auditId]  The audit issue. Each subcategory has an unique ID 
         * @param {Array<string>} [auditCaseId]  Primary/foreign key for audit tables 
         * @param {Array<string>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [committeeDesignation] Type of committee:         - H or S - Congressional         - P - Presidential         - X or Y or Z - Party         - N or Q - PAC         - I - Independent expenditure         - O - Super PAC  
         * @param {number} [maxElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
         * @param {Array<string>} [q] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [qq] Name of candidate running for office
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [subCategoryId]  The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [primaryCategoryId]  Audit category ID (table PK) 
         * @param {Array<number>} [cycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditCaseGet(apiKey: string, minElectionCycle?: number, auditId?: Array<number>, auditCaseId?: Array<string>, committeeType?: Array<string>, committeeId?: Array<string>, committeeDesignation?: string, maxElectionCycle?: number, q?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, qq?: Array<string>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, subCategoryId?: string, perPage?: number, primaryCategoryId?: string, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditCasePage> {
            const localVarAxiosArgs = AuditApiAxiosParamCreator(configuration).auditCaseGet(apiKey, minElectionCycle, auditId, auditCaseId, committeeType, committeeId, committeeDesignation, maxElectionCycle, q, sort, sortHideNull, qq, page, candidateId, sortNullOnly, subCategoryId, perPage, primaryCategoryId, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  This lists the options for the categories and subcategories available in the /audit-search/ endpoint. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [primaryCategoryName] Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [primaryCategoryId]  Audit category ID (table PK) 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditCategoryGet(apiKey: string, sortHideNull?: boolean, primaryCategoryName?: Array<string>, page?: number, sortNullOnly?: boolean, perPage?: number, primaryCategoryId?: Array<string>, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditCategoryPage> {
            const localVarAxiosArgs = AuditApiAxiosParamCreator(configuration).auditCategoryGet(apiKey, sortHideNull, primaryCategoryName, page, sortNullOnly, perPage, primaryCategoryId, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  This lists the options for the primary categories available in the /audit-search/ endpoint. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [primaryCategoryName] Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [primaryCategoryId]  Audit category ID (table PK) 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditPrimaryCategoryGet(apiKey: string, sortHideNull?: boolean, primaryCategoryName?: Array<string>, page?: number, sortNullOnly?: boolean, perPage?: number, primaryCategoryId?: Array<string>, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditPrimaryCategoryPage> {
            const localVarAxiosArgs = AuditApiAxiosParamCreator(configuration).auditPrimaryCategoryGet(apiKey, sortHideNull, primaryCategoryName, page, sortNullOnly, perPage, primaryCategoryId, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesAuditCandidatesGet(q: Array<string>, apiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditCandidateSearchList> {
            const localVarAxiosArgs = AuditApiAxiosParamCreator(configuration).namesAuditCandidatesGet(q, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesAuditCommitteesGet(q: Array<string>, apiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuditCommitteeSearchList> {
            const localVarAxiosArgs = AuditApiAxiosParamCreator(configuration).namesAuditCommitteesGet(q, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuditApi - factory interface
 * @export
 */
export const AuditApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  This endpoint contains Final Audit Reports approved by the Commission since inception. The search can be based on information about the audited committee (Name, FEC ID Number, Type,  Election Cycle) or the issues covered in the report. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [minElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
         * @param {Array<number>} [auditId]  The audit issue. Each subcategory has an unique ID 
         * @param {Array<string>} [auditCaseId]  Primary/foreign key for audit tables 
         * @param {Array<string>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [committeeDesignation] Type of committee:         - H or S - Congressional         - P - Presidential         - X or Y or Z - Party         - N or Q - PAC         - I - Independent expenditure         - O - Super PAC  
         * @param {number} [maxElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
         * @param {Array<string>} [q] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [qq] Name of candidate running for office
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [subCategoryId]  The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [primaryCategoryId]  Audit category ID (table PK) 
         * @param {Array<number>} [cycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditCaseGet(apiKey: string, minElectionCycle?: number, auditId?: Array<number>, auditCaseId?: Array<string>, committeeType?: Array<string>, committeeId?: Array<string>, committeeDesignation?: string, maxElectionCycle?: number, q?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, qq?: Array<string>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, subCategoryId?: string, perPage?: number, primaryCategoryId?: string, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return AuditApiFp(configuration).auditCaseGet(apiKey, minElectionCycle, auditId, auditCaseId, committeeType, committeeId, committeeDesignation, maxElectionCycle, q, sort, sortHideNull, qq, page, candidateId, sortNullOnly, subCategoryId, perPage, primaryCategoryId, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  This lists the options for the categories and subcategories available in the /audit-search/ endpoint. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [primaryCategoryName] Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [primaryCategoryId]  Audit category ID (table PK) 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditCategoryGet(apiKey: string, sortHideNull?: boolean, primaryCategoryName?: Array<string>, page?: number, sortNullOnly?: boolean, perPage?: number, primaryCategoryId?: Array<string>, sort?: string, sortNullsLast?: boolean, options?: any) {
            return AuditApiFp(configuration).auditCategoryGet(apiKey, sortHideNull, primaryCategoryName, page, sortNullOnly, perPage, primaryCategoryId, sort, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  This lists the options for the primary categories available in the /audit-search/ endpoint. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [primaryCategoryName] Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [primaryCategoryId]  Audit category ID (table PK) 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        auditPrimaryCategoryGet(apiKey: string, sortHideNull?: boolean, primaryCategoryName?: Array<string>, page?: number, sortNullOnly?: boolean, perPage?: number, primaryCategoryId?: Array<string>, sort?: string, sortNullsLast?: boolean, options?: any) {
            return AuditApiFp(configuration).auditPrimaryCategoryGet(apiKey, sortHideNull, primaryCategoryName, page, sortNullOnly, perPage, primaryCategoryId, sort, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesAuditCandidatesGet(q: Array<string>, apiKey: string, options?: any) {
            return AuditApiFp(configuration).namesAuditCandidatesGet(q, apiKey, options)(axios, basePath);
        },
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesAuditCommitteesGet(q: Array<string>, apiKey: string, options?: any) {
            return AuditApiFp(configuration).namesAuditCommitteesGet(q, apiKey, options)(axios, basePath);
        },
    };
};

/**
 * AuditApi - object-oriented interface
 * @export
 * @class AuditApi
 * @extends {BaseAPI}
 */
export class AuditApi extends BaseAPI {
    /**
     *  This endpoint contains Final Audit Reports approved by the Commission since inception. The search can be based on information about the audited committee (Name, FEC ID Number, Type,  Election Cycle) or the issues covered in the report. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {number} [minElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Array<number>} [auditId]  The audit issue. Each subcategory has an unique ID 
     * @param {Array<string>} [auditCaseId]  Primary/foreign key for audit tables 
     * @param {Array<string>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [committeeDesignation] Type of committee:         - H or S - Congressional         - P - Presidential         - X or Y or Z - Party         - N or Q - PAC         - I - Independent expenditure         - O - Super PAC  
     * @param {number} [maxElectionCycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param {Array<string>} [q] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<string>} [qq] Name of candidate running for office
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [subCategoryId]  The finding id of an audit. Finding are a category of broader issues. Each category has an unique ID. 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [primaryCategoryId]  Audit category ID (table PK) 
     * @param {Array<number>} [cycle]  Filter records to only those that are applicable to a given two-year period. This cycle follows the traditional House election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    public auditCaseGet(apiKey: string, minElectionCycle?: number, auditId?: Array<number>, auditCaseId?: Array<string>, committeeType?: Array<string>, committeeId?: Array<string>, committeeDesignation?: string, maxElectionCycle?: number, q?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, qq?: Array<string>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, subCategoryId?: string, perPage?: number, primaryCategoryId?: string, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return AuditApiFp(this.configuration).auditCaseGet(apiKey, minElectionCycle, auditId, auditCaseId, committeeType, committeeId, committeeDesignation, maxElectionCycle, q, sort, sortHideNull, qq, page, candidateId, sortNullOnly, subCategoryId, perPage, primaryCategoryId, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  This lists the options for the categories and subcategories available in the /audit-search/ endpoint. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<string>} [primaryCategoryName] Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed 
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [primaryCategoryId]  Audit category ID (table PK) 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    public auditCategoryGet(apiKey: string, sortHideNull?: boolean, primaryCategoryName?: Array<string>, page?: number, sortNullOnly?: boolean, perPage?: number, primaryCategoryId?: Array<string>, sort?: string, sortNullsLast?: boolean, options?: any) {
        return AuditApiFp(this.configuration).auditCategoryGet(apiKey, sortHideNull, primaryCategoryName, page, sortNullOnly, perPage, primaryCategoryId, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  This lists the options for the primary categories available in the /audit-search/ endpoint. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<string>} [primaryCategoryName] Primary Audit Category     - No Findings or Issues/Not a Committee     - Net Outstanding Campaign/Convention Expenditures/Obligations     - Payments/Disgorgements     - Allocation Issues     - Prohibited Contributions     - Disclosure     - Recordkeeping     - Repayment to US Treasury     - Other     - Misstatement of Financial Activity     - Excessive Contributions     - Failure to File Reports/Schedules/Notices     - Loans     - Referred Findings Not Listed 
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [primaryCategoryId]  Audit category ID (table PK) 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    public auditPrimaryCategoryGet(apiKey: string, sortHideNull?: boolean, primaryCategoryName?: Array<string>, page?: number, sortNullOnly?: boolean, perPage?: number, primaryCategoryId?: Array<string>, sort?: string, sortNullsLast?: boolean, options?: any) {
        return AuditApiFp(this.configuration).auditPrimaryCategoryGet(apiKey, sortHideNull, primaryCategoryName, page, sortNullOnly, perPage, primaryCategoryId, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
     * @param {Array<string>} q Name (candidate or committee) to search for
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    public namesAuditCandidatesGet(q: Array<string>, apiKey: string, options?: any) {
        return AuditApiFp(this.configuration).namesAuditCandidatesGet(q, apiKey, options)(this.axios, this.basePath);
    }

    /**
     *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
     * @param {Array<string>} q Name (candidate or committee) to search for
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditApi
     */
    public namesAuditCommitteesGet(q: Array<string>, apiKey: string, options?: any) {
        return AuditApiFp(this.configuration).namesAuditCommitteesGet(q, apiKey, options)(this.axios, this.basePath);
    }

}


/**
 * CandidateApi - axios parameter creator
 * @export
 */
export const CandidateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdGet(apiKey: string, candidateId: string, name?: Array<string>, district?: Array<string>, year?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidateCandidateIdGet.');
            }
            // verify required parameter 'candidateId' is not null or undefined
            if (candidateId === null || candidateId === undefined) {
                throw new RequiredError('candidateId','Required parameter candidateId was null or undefined when calling candidateCandidateIdGet.');
            }
            const localVarPath = `/candidate/{candidate_id}/`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (district) {
                localVarQueryParameter['district'] = district;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (party) {
                localVarQueryParameter['party'] = party;
            }

            if (candidateStatus) {
                localVarQueryParameter['candidate_status'] = candidateStatus;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (electionYear) {
                localVarQueryParameter['election_year'] = electionYear;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (hasRaisedFunds !== undefined) {
                localVarQueryParameter['has_raised_funds'] = hasRaisedFunds;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (incumbentChallenge) {
                localVarQueryParameter['incumbent_challenge'] = incumbentChallenge;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office) {
                localVarQueryParameter['office'] = office;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (federalFundsFlag !== undefined) {
                localVarQueryParameter['federal_funds_flag'] = federalFundsFlag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdHistoryCycleGet(apiKey: string, candidateId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidateCandidateIdHistoryCycleGet.');
            }
            // verify required parameter 'candidateId' is not null or undefined
            if (candidateId === null || candidateId === undefined) {
                throw new RequiredError('candidateId','Required parameter candidateId was null or undefined when calling candidateCandidateIdHistoryCycleGet.');
            }
            // verify required parameter 'cycle' is not null or undefined
            if (cycle === null || cycle === undefined) {
                throw new RequiredError('cycle','Required parameter cycle was null or undefined when calling candidateCandidateIdHistoryCycleGet.');
            }
            const localVarPath = `/candidate/{candidate_id}/history/{cycle}/`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)))
                .replace(`{${"cycle"}}`, encodeURIComponent(String(cycle)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdHistoryGet(apiKey: string, candidateId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidateCandidateIdHistoryGet.');
            }
            // verify required parameter 'candidateId' is not null or undefined
            if (candidateId === null || candidateId === undefined) {
                throw new RequiredError('candidateId','Required parameter candidateId was null or undefined when calling candidateCandidateIdHistoryGet.');
            }
            const localVarPath = `/candidate/{candidate_id}/history/`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [fullElection] Get totals for full election period.
         * @param {string} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdTotalsGet(apiKey: string, candidateId: string, sortHideNull?: boolean, fullElection?: boolean, type?: string, page?: number, designation?: string, sortNullOnly?: boolean, sortNullsLast?: boolean, perPage?: number, cycle?: Array<number>, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidateCandidateIdTotalsGet.');
            }
            // verify required parameter 'candidateId' is not null or undefined
            if (candidateId === null || candidateId === undefined) {
                throw new RequiredError('candidateId','Required parameter candidateId was null or undefined when calling candidateCandidateIdTotalsGet.');
            }
            const localVarPath = `/candidate/{candidate_id}/totals/`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (fullElection !== undefined) {
                localVarQueryParameter['full_election'] = fullElection;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (designation !== undefined) {
                localVarQueryParameter['designation'] = designation;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Fetch basic information about candidates, and use parameters to filter results to the candidates you\'re looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {string} [maxFirstFileDate] Selects all candidates whose first filing was received by the FEC before this date
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {Array<string>} [q] Name of candidate running for office
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minFirstFileDate] Selects all candidates whose first filing was received by the FEC after this date
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesGet(apiKey: string, name?: Array<string>, district?: Array<string>, year?: string, maxFirstFileDate?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, q?: Array<string>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, minFirstFileDate?: string, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidatesGet.');
            }
            const localVarPath = `/candidates/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (district) {
                localVarQueryParameter['district'] = district;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (maxFirstFileDate !== undefined) {
                localVarQueryParameter['max_first_file_date'] = (maxFirstFileDate as any instanceof Date) ?
                    (maxFirstFileDate as any).toISOString().substr(0,10) :
                    maxFirstFileDate;
            }

            if (party) {
                localVarQueryParameter['party'] = party;
            }

            if (candidateStatus) {
                localVarQueryParameter['candidate_status'] = candidateStatus;
            }

            if (q) {
                localVarQueryParameter['q'] = q;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (electionYear) {
                localVarQueryParameter['election_year'] = electionYear;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (minFirstFileDate !== undefined) {
                localVarQueryParameter['min_first_file_date'] = (minFirstFileDate as any instanceof Date) ?
                    (minFirstFileDate as any).toISOString().substr(0,10) :
                    minFirstFileDate;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (hasRaisedFunds !== undefined) {
                localVarQueryParameter['has_raised_funds'] = hasRaisedFunds;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (incumbentChallenge) {
                localVarQueryParameter['incumbent_challenge'] = incumbentChallenge;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office) {
                localVarQueryParameter['office'] = office;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (federalFundsFlag !== undefined) {
                localVarQueryParameter['federal_funds_flag'] = federalFundsFlag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](http://www.fec.gov/pdf/forms/fecfrm1.pdf), for candidate information, and [Form 2](http://www.fec.gov/pdf/forms/fecfrm2.pdf), for committees information, with additional information to provide context. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {string} [maxFirstFileDate] Selects all candidates whose first filing was received by the FEC before this date
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {Array<string>} [q] Name of candidate running for office
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minFirstFileDate] Selects all candidates whose first filing was received by the FEC after this date
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesSearchGet(apiKey: string, name?: Array<string>, district?: Array<string>, year?: string, maxFirstFileDate?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, q?: Array<string>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, minFirstFileDate?: string, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidatesSearchGet.');
            }
            const localVarPath = `/candidates/search/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (district) {
                localVarQueryParameter['district'] = district;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (maxFirstFileDate !== undefined) {
                localVarQueryParameter['max_first_file_date'] = (maxFirstFileDate as any instanceof Date) ?
                    (maxFirstFileDate as any).toISOString().substr(0,10) :
                    maxFirstFileDate;
            }

            if (party) {
                localVarQueryParameter['party'] = party;
            }

            if (candidateStatus) {
                localVarQueryParameter['candidate_status'] = candidateStatus;
            }

            if (q) {
                localVarQueryParameter['q'] = q;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (electionYear) {
                localVarQueryParameter['election_year'] = electionYear;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (minFirstFileDate !== undefined) {
                localVarQueryParameter['min_first_file_date'] = (minFirstFileDate as any instanceof Date) ?
                    (minFirstFileDate as any).toISOString().substr(0,10) :
                    minFirstFileDate;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (hasRaisedFunds !== undefined) {
                localVarQueryParameter['has_raised_funds'] = hasRaisedFunds;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (incumbentChallenge) {
                localVarQueryParameter['incumbent_challenge'] = incumbentChallenge;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office) {
                localVarQueryParameter['office'] = office;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (federalFundsFlag !== undefined) {
                localVarQueryParameter['federal_funds_flag'] = federalFundsFlag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Aggregated candidate receipts and disbursements grouped by office by cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [activeCandidates]  Candidates who are actively running. if no value specified, all candidates data is returned. When True is specified, only active candidates data are returned. When False is  specified, only inactive candidates data is returned. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'' | 'H' | 'S' | 'P'} [office] Federal office candidate runs for: H, S or P
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesTotalsByOfficeGet(apiKey: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, activeCandidates?: boolean, perPage?: number, office?: '' | 'H' | 'S' | 'P', sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidatesTotalsByOfficeGet.');
            }
            const localVarPath = `/candidates/totals/by_office/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (electionYear) {
                localVarQueryParameter['election_year'] = electionYear;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (activeCandidates !== undefined) {
                localVarQueryParameter['active_candidates'] = activeCandidates;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office !== undefined) {
                localVarQueryParameter['office'] = office;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Aggregated candidate receipts and disbursements grouped by cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [district] District of candidate
         * @param {string} [maxDisbursements] Maximum aggregated disbursements
         * @param {string} [maxDebtsOwedByCommittee] Maximum debt
         * @param {string} [minCashOnHandEndPeriod] Minimum cash on hand
         * @param {Array<string>} [party] Three-letter party code
         * @param {Array<string>} [q] Name of candidate running for office
         * @param {boolean} [isActiveCandidate]  Candidates who are actively running. if no value specified, all candidates data is returned. When True is specified, only active candidates data are returned. When False is  specified, only inactive candidates data is returned. 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [minReceipts] Minimum aggregated receipts
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [minDebtsOwedByCommittee] Minimum debt
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [maxReceipts] Maximum aggregated receipts
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {string} [maxCashOnHandEndPeriod] Maximum cash on hand
         * @param {string} [minDisbursements] Minimum aggregated disbursements
         * @param {Array<string>} [state] State of candidate
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Governmental office candidate runs for: House, Senate or presidential
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesTotalsGet(apiKey: string, district?: Array<string>, maxDisbursements?: string, maxDebtsOwedByCommittee?: string, minCashOnHandEndPeriod?: string, party?: Array<string>, q?: Array<string>, isActiveCandidate?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, minReceipts?: string, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, minDebtsOwedByCommittee?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, maxReceipts?: string, hasRaisedFunds?: boolean, maxCashOnHandEndPeriod?: string, minDisbursements?: string, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, electionFull?: boolean, federalFundsFlag?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidatesTotalsGet.');
            }
            const localVarPath = `/candidates/totals/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (district) {
                localVarQueryParameter['district'] = district;
            }

            if (maxDisbursements !== undefined) {
                localVarQueryParameter['max_disbursements'] = maxDisbursements;
            }

            if (maxDebtsOwedByCommittee !== undefined) {
                localVarQueryParameter['max_debts_owed_by_committee'] = maxDebtsOwedByCommittee;
            }

            if (minCashOnHandEndPeriod !== undefined) {
                localVarQueryParameter['min_cash_on_hand_end_period'] = minCashOnHandEndPeriod;
            }

            if (party) {
                localVarQueryParameter['party'] = party;
            }

            if (q) {
                localVarQueryParameter['q'] = q;
            }

            if (isActiveCandidate !== undefined) {
                localVarQueryParameter['is_active_candidate'] = isActiveCandidate;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (minReceipts !== undefined) {
                localVarQueryParameter['min_receipts'] = minReceipts;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (electionYear) {
                localVarQueryParameter['election_year'] = electionYear;
            }

            if (minDebtsOwedByCommittee !== undefined) {
                localVarQueryParameter['min_debts_owed_by_committee'] = minDebtsOwedByCommittee;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (maxReceipts !== undefined) {
                localVarQueryParameter['max_receipts'] = maxReceipts;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (hasRaisedFunds !== undefined) {
                localVarQueryParameter['has_raised_funds'] = hasRaisedFunds;
            }

            if (maxCashOnHandEndPeriod !== undefined) {
                localVarQueryParameter['max_cash_on_hand_end_period'] = maxCashOnHandEndPeriod;
            }

            if (minDisbursements !== undefined) {
                localVarQueryParameter['min_disbursements'] = minDisbursements;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office) {
                localVarQueryParameter['office'] = office;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (federalFundsFlag !== undefined) {
                localVarQueryParameter['federal_funds_flag'] = federalFundsFlag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCandidatesGet(apiKey: string, committeeId: string, name?: Array<string>, district?: Array<string>, year?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdCandidatesGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdCandidatesGet.');
            }
            const localVarPath = `/committee/{committee_id}/candidates/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (district) {
                localVarQueryParameter['district'] = district;
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (party) {
                localVarQueryParameter['party'] = party;
            }

            if (candidateStatus) {
                localVarQueryParameter['candidate_status'] = candidateStatus;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (electionYear) {
                localVarQueryParameter['election_year'] = electionYear;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (hasRaisedFunds !== undefined) {
                localVarQueryParameter['has_raised_funds'] = hasRaisedFunds;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (incumbentChallenge) {
                localVarQueryParameter['incumbent_challenge'] = incumbentChallenge;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office) {
                localVarQueryParameter['office'] = office;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (federalFundsFlag !== undefined) {
                localVarQueryParameter['federal_funds_flag'] = federalFundsFlag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCandidatesHistoryCycleGet(apiKey: string, committeeId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdCandidatesHistoryCycleGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdCandidatesHistoryCycleGet.');
            }
            // verify required parameter 'cycle' is not null or undefined
            if (cycle === null || cycle === undefined) {
                throw new RequiredError('cycle','Required parameter cycle was null or undefined when calling committeeCommitteeIdCandidatesHistoryCycleGet.');
            }
            const localVarPath = `/committee/{committee_id}/candidates/history/{cycle}/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)))
                .replace(`{${"cycle"}}`, encodeURIComponent(String(cycle)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCandidatesHistoryGet(apiKey: string, committeeId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdCandidatesHistoryGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdCandidatesHistoryGet.');
            }
            const localVarPath = `/committee/{committee_id}/candidates/history/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CandidateApi - functional programming interface
 * @export
 */
export const CandidateApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdGet(apiKey: string, candidateId: string, name?: Array<string>, district?: Array<string>, year?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDetailPage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).candidateCandidateIdGet(apiKey, candidateId, name, district, year, party, candidateStatus, sortNullsLast, sort, sortHideNull, electionYear, page, sortNullOnly, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdHistoryCycleGet(apiKey: string, candidateId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateHistoryPage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).candidateCandidateIdHistoryCycleGet(apiKey, candidateId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdHistoryGet(apiKey: string, candidateId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateHistoryPage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).candidateCandidateIdHistoryGet(apiKey, candidateId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [fullElection] Get totals for full election period.
         * @param {string} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdTotalsGet(apiKey: string, candidateId: string, sortHideNull?: boolean, fullElection?: boolean, type?: string, page?: number, designation?: string, sortNullOnly?: boolean, sortNullsLast?: boolean, perPage?: number, cycle?: Array<number>, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeTotalsPage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).candidateCandidateIdTotalsGet(apiKey, candidateId, sortHideNull, fullElection, type, page, designation, sortNullOnly, sortNullsLast, perPage, cycle, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Fetch basic information about candidates, and use parameters to filter results to the candidates you\'re looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {string} [maxFirstFileDate] Selects all candidates whose first filing was received by the FEC before this date
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {Array<string>} [q] Name of candidate running for office
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minFirstFileDate] Selects all candidates whose first filing was received by the FEC after this date
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesGet(apiKey: string, name?: Array<string>, district?: Array<string>, year?: string, maxFirstFileDate?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, q?: Array<string>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, minFirstFileDate?: string, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidatePage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).candidatesGet(apiKey, name, district, year, maxFirstFileDate, party, candidateStatus, q, sortNullsLast, sort, sortHideNull, electionYear, page, candidateId, sortNullOnly, minFirstFileDate, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](http://www.fec.gov/pdf/forms/fecfrm1.pdf), for candidate information, and [Form 2](http://www.fec.gov/pdf/forms/fecfrm2.pdf), for committees information, with additional information to provide context. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {string} [maxFirstFileDate] Selects all candidates whose first filing was received by the FEC before this date
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {Array<string>} [q] Name of candidate running for office
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minFirstFileDate] Selects all candidates whose first filing was received by the FEC after this date
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesSearchGet(apiKey: string, name?: Array<string>, district?: Array<string>, year?: string, maxFirstFileDate?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, q?: Array<string>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, minFirstFileDate?: string, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidatePage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).candidatesSearchGet(apiKey, name, district, year, maxFirstFileDate, party, candidateStatus, q, sortNullsLast, sort, sortHideNull, electionYear, page, candidateId, sortNullOnly, minFirstFileDate, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Aggregated candidate receipts and disbursements grouped by office by cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [activeCandidates]  Candidates who are actively running. if no value specified, all candidates data is returned. When True is specified, only active candidates data are returned. When False is  specified, only inactive candidates data is returned. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'' | 'H' | 'S' | 'P'} [office] Federal office candidate runs for: H, S or P
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesTotalsByOfficeGet(apiKey: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, activeCandidates?: boolean, perPage?: number, office?: '' | 'H' | 'S' | 'P', sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TotalByOfficePage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).candidatesTotalsByOfficeGet(apiKey, sortHideNull, electionYear, page, sortNullOnly, activeCandidates, perPage, office, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Aggregated candidate receipts and disbursements grouped by cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [district] District of candidate
         * @param {string} [maxDisbursements] Maximum aggregated disbursements
         * @param {string} [maxDebtsOwedByCommittee] Maximum debt
         * @param {string} [minCashOnHandEndPeriod] Minimum cash on hand
         * @param {Array<string>} [party] Three-letter party code
         * @param {Array<string>} [q] Name of candidate running for office
         * @param {boolean} [isActiveCandidate]  Candidates who are actively running. if no value specified, all candidates data is returned. When True is specified, only active candidates data are returned. When False is  specified, only inactive candidates data is returned. 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [minReceipts] Minimum aggregated receipts
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [minDebtsOwedByCommittee] Minimum debt
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [maxReceipts] Maximum aggregated receipts
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {string} [maxCashOnHandEndPeriod] Maximum cash on hand
         * @param {string} [minDisbursements] Minimum aggregated disbursements
         * @param {Array<string>} [state] State of candidate
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Governmental office candidate runs for: House, Senate or presidential
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesTotalsGet(apiKey: string, district?: Array<string>, maxDisbursements?: string, maxDebtsOwedByCommittee?: string, minCashOnHandEndPeriod?: string, party?: Array<string>, q?: Array<string>, isActiveCandidate?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, minReceipts?: string, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, minDebtsOwedByCommittee?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, maxReceipts?: string, hasRaisedFunds?: boolean, maxCashOnHandEndPeriod?: string, minDisbursements?: string, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, electionFull?: boolean, federalFundsFlag?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateHistoryTotalPage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).candidatesTotalsGet(apiKey, district, maxDisbursements, maxDebtsOwedByCommittee, minCashOnHandEndPeriod, party, q, isActiveCandidate, cycle, sortNullsLast, minReceipts, sort, sortHideNull, electionYear, minDebtsOwedByCommittee, page, candidateId, sortNullOnly, maxReceipts, hasRaisedFunds, maxCashOnHandEndPeriod, minDisbursements, state, perPage, office, electionFull, federalFundsFlag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCandidatesGet(apiKey: string, committeeId: string, name?: Array<string>, district?: Array<string>, year?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateDetailPage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).committeeCommitteeIdCandidatesGet(apiKey, committeeId, name, district, year, party, candidateStatus, sortNullsLast, sort, sortHideNull, electionYear, page, sortNullOnly, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCandidatesHistoryCycleGet(apiKey: string, committeeId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateHistoryPage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).committeeCommitteeIdCandidatesHistoryCycleGet(apiKey, committeeId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCandidatesHistoryGet(apiKey: string, committeeId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateHistoryPage> {
            const localVarAxiosArgs = CandidateApiAxiosParamCreator(configuration).committeeCommitteeIdCandidatesHistoryGet(apiKey, committeeId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CandidateApi - factory interface
 * @export
 */
export const CandidateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdGet(apiKey: string, candidateId: string, name?: Array<string>, district?: Array<string>, year?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any) {
            return CandidateApiFp(configuration).candidateCandidateIdGet(apiKey, candidateId, name, district, year, party, candidateStatus, sortNullsLast, sort, sortHideNull, electionYear, page, sortNullOnly, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options)(axios, basePath);
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdHistoryCycleGet(apiKey: string, candidateId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
            return CandidateApiFp(configuration).candidateCandidateIdHistoryCycleGet(apiKey, candidateId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(axios, basePath);
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdHistoryGet(apiKey: string, candidateId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
            return CandidateApiFp(configuration).candidateCandidateIdHistoryGet(apiKey, candidateId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(axios, basePath);
        },
        /**
         *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [fullElection] Get totals for full election period.
         * @param {string} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdTotalsGet(apiKey: string, candidateId: string, sortHideNull?: boolean, fullElection?: boolean, type?: string, page?: number, designation?: string, sortNullOnly?: boolean, sortNullsLast?: boolean, perPage?: number, cycle?: Array<number>, sort?: string, options?: any) {
            return CandidateApiFp(configuration).candidateCandidateIdTotalsGet(apiKey, candidateId, sortHideNull, fullElection, type, page, designation, sortNullOnly, sortNullsLast, perPage, cycle, sort, options)(axios, basePath);
        },
        /**
         *  Fetch basic information about candidates, and use parameters to filter results to the candidates you\'re looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {string} [maxFirstFileDate] Selects all candidates whose first filing was received by the FEC before this date
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {Array<string>} [q] Name of candidate running for office
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minFirstFileDate] Selects all candidates whose first filing was received by the FEC after this date
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesGet(apiKey: string, name?: Array<string>, district?: Array<string>, year?: string, maxFirstFileDate?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, q?: Array<string>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, minFirstFileDate?: string, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any) {
            return CandidateApiFp(configuration).candidatesGet(apiKey, name, district, year, maxFirstFileDate, party, candidateStatus, q, sortNullsLast, sort, sortHideNull, electionYear, page, candidateId, sortNullOnly, minFirstFileDate, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options)(axios, basePath);
        },
        /**
         *  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](http://www.fec.gov/pdf/forms/fecfrm1.pdf), for candidate information, and [Form 2](http://www.fec.gov/pdf/forms/fecfrm2.pdf), for committees information, with additional information to provide context. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {string} [maxFirstFileDate] Selects all candidates whose first filing was received by the FEC before this date
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {Array<string>} [q] Name of candidate running for office
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minFirstFileDate] Selects all candidates whose first filing was received by the FEC after this date
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesSearchGet(apiKey: string, name?: Array<string>, district?: Array<string>, year?: string, maxFirstFileDate?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, q?: Array<string>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, minFirstFileDate?: string, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any) {
            return CandidateApiFp(configuration).candidatesSearchGet(apiKey, name, district, year, maxFirstFileDate, party, candidateStatus, q, sortNullsLast, sort, sortHideNull, electionYear, page, candidateId, sortNullOnly, minFirstFileDate, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options)(axios, basePath);
        },
        /**
         *  Aggregated candidate receipts and disbursements grouped by office by cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [activeCandidates]  Candidates who are actively running. if no value specified, all candidates data is returned. When True is specified, only active candidates data are returned. When False is  specified, only inactive candidates data is returned. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'' | 'H' | 'S' | 'P'} [office] Federal office candidate runs for: H, S or P
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesTotalsByOfficeGet(apiKey: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, activeCandidates?: boolean, perPage?: number, office?: '' | 'H' | 'S' | 'P', sort?: string, sortNullsLast?: boolean, options?: any) {
            return CandidateApiFp(configuration).candidatesTotalsByOfficeGet(apiKey, sortHideNull, electionYear, page, sortNullOnly, activeCandidates, perPage, office, sort, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Aggregated candidate receipts and disbursements grouped by cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [district] District of candidate
         * @param {string} [maxDisbursements] Maximum aggregated disbursements
         * @param {string} [maxDebtsOwedByCommittee] Maximum debt
         * @param {string} [minCashOnHandEndPeriod] Minimum cash on hand
         * @param {Array<string>} [party] Three-letter party code
         * @param {Array<string>} [q] Name of candidate running for office
         * @param {boolean} [isActiveCandidate]  Candidates who are actively running. if no value specified, all candidates data is returned. When True is specified, only active candidates data are returned. When False is  specified, only inactive candidates data is returned. 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [minReceipts] Minimum aggregated receipts
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [minDebtsOwedByCommittee] Minimum debt
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [maxReceipts] Maximum aggregated receipts
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {string} [maxCashOnHandEndPeriod] Maximum cash on hand
         * @param {string} [minDisbursements] Minimum aggregated disbursements
         * @param {Array<string>} [state] State of candidate
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Governmental office candidate runs for: House, Senate or presidential
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidatesTotalsGet(apiKey: string, district?: Array<string>, maxDisbursements?: string, maxDebtsOwedByCommittee?: string, minCashOnHandEndPeriod?: string, party?: Array<string>, q?: Array<string>, isActiveCandidate?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, minReceipts?: string, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, minDebtsOwedByCommittee?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, maxReceipts?: string, hasRaisedFunds?: boolean, maxCashOnHandEndPeriod?: string, minDisbursements?: string, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, electionFull?: boolean, federalFundsFlag?: boolean, options?: any) {
            return CandidateApiFp(configuration).candidatesTotalsGet(apiKey, district, maxDisbursements, maxDebtsOwedByCommittee, minCashOnHandEndPeriod, party, q, isActiveCandidate, cycle, sortNullsLast, minReceipts, sort, sortHideNull, electionYear, minDebtsOwedByCommittee, page, candidateId, sortNullOnly, maxReceipts, hasRaisedFunds, maxCashOnHandEndPeriod, minDisbursements, state, perPage, office, electionFull, federalFundsFlag, options)(axios, basePath);
        },
        /**
         *  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<number>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCandidatesGet(apiKey: string, committeeId: string, name?: Array<string>, district?: Array<string>, year?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any) {
            return CandidateApiFp(configuration).committeeCommitteeIdCandidatesGet(apiKey, committeeId, name, district, year, party, candidateStatus, sortNullsLast, sort, sortHideNull, electionYear, page, sortNullOnly, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options)(axios, basePath);
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCandidatesHistoryCycleGet(apiKey: string, committeeId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
            return CandidateApiFp(configuration).committeeCommitteeIdCandidatesHistoryCycleGet(apiKey, committeeId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(axios, basePath);
        },
        /**
         *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCandidatesHistoryGet(apiKey: string, committeeId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
            return CandidateApiFp(configuration).committeeCommitteeIdCandidatesHistoryGet(apiKey, committeeId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(axios, basePath);
        },
    };
};

/**
 * CandidateApi - object-oriented interface
 * @export
 * @class CandidateApi
 * @extends {BaseAPI}
 */
export class CandidateApi extends BaseAPI {
    /**
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.  
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
     * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
     * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<number>} [electionYear] Year of election
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @param {Array<string>} [state] US state or territory where a candidate runs for office
     * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
     * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
     * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public candidateCandidateIdGet(apiKey: string, candidateId: string, name?: Array<string>, district?: Array<string>, year?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any) {
        return CandidateApiFp(this.configuration).candidateCandidateIdGet(apiKey, candidateId, name, district, year, party, candidateStatus, sortNullsLast, sort, sortHideNull, electionYear, page, sortNullOnly, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options)(this.axios, this.basePath);
    }

    /**
     *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public candidateCandidateIdHistoryCycleGet(apiKey: string, candidateId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
        return CandidateApiFp(this.configuration).candidateCandidateIdHistoryCycleGet(apiKey, candidateId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(this.axios, this.basePath);
    }

    /**
     *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public candidateCandidateIdHistoryGet(apiKey: string, candidateId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
        return CandidateApiFp(this.configuration).candidateCandidateIdHistoryGet(apiKey, candidateId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(this.axios, this.basePath);
    }

    /**
     *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {boolean} [fullElection] Get totals for full election period.
     * @param {string} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {string} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public candidateCandidateIdTotalsGet(apiKey: string, candidateId: string, sortHideNull?: boolean, fullElection?: boolean, type?: string, page?: number, designation?: string, sortNullOnly?: boolean, sortNullsLast?: boolean, perPage?: number, cycle?: Array<number>, sort?: string, options?: any) {
        return CandidateApiFp(this.configuration).candidateCandidateIdTotalsGet(apiKey, candidateId, sortHideNull, fullElection, type, page, designation, sortNullOnly, sortNullsLast, perPage, cycle, sort, options)(this.axios, this.basePath);
    }

    /**
     *  Fetch basic information about candidates, and use parameters to filter results to the candidates you\'re looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
     * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
     * @param {string} [maxFirstFileDate] Selects all candidates whose first filing was received by the FEC before this date
     * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @param {Array<string>} [q] Name of candidate running for office
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<number>} [electionYear] Year of election
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [minFirstFileDate] Selects all candidates whose first filing was received by the FEC after this date
     * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @param {Array<string>} [state] US state or territory where a candidate runs for office
     * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
     * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
     * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public candidatesGet(apiKey: string, name?: Array<string>, district?: Array<string>, year?: string, maxFirstFileDate?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, q?: Array<string>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, minFirstFileDate?: string, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any) {
        return CandidateApiFp(this.configuration).candidatesGet(apiKey, name, district, year, maxFirstFileDate, party, candidateStatus, q, sortNullsLast, sort, sortHideNull, electionYear, page, candidateId, sortNullOnly, minFirstFileDate, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options)(this.axios, this.basePath);
    }

    /**
     *  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices â€” for example, a House candidate runs for a Senate office â€” that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](http://www.fec.gov/pdf/forms/fecfrm1.pdf), for candidate information, and [Form 2](http://www.fec.gov/pdf/forms/fecfrm2.pdf), for committees information, with additional information to provide context. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
     * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
     * @param {string} [maxFirstFileDate] Selects all candidates whose first filing was received by the FEC before this date
     * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @param {Array<string>} [q] Name of candidate running for office
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<number>} [electionYear] Year of election
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [minFirstFileDate] Selects all candidates whose first filing was received by the FEC after this date
     * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @param {Array<string>} [state] US state or territory where a candidate runs for office
     * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
     * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
     * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public candidatesSearchGet(apiKey: string, name?: Array<string>, district?: Array<string>, year?: string, maxFirstFileDate?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, q?: Array<string>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, minFirstFileDate?: string, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any) {
        return CandidateApiFp(this.configuration).candidatesSearchGet(apiKey, name, district, year, maxFirstFileDate, party, candidateStatus, q, sortNullsLast, sort, sortHideNull, electionYear, page, candidateId, sortNullOnly, minFirstFileDate, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options)(this.axios, this.basePath);
    }

    /**
     *  Aggregated candidate receipts and disbursements grouped by office by cycle. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [activeCandidates]  Candidates who are actively running. if no value specified, all candidates data is returned. When True is specified, only active candidates data are returned. When False is  specified, only inactive candidates data is returned. 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {'' | 'H' | 'S' | 'P'} [office] Federal office candidate runs for: H, S or P
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public candidatesTotalsByOfficeGet(apiKey: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, activeCandidates?: boolean, perPage?: number, office?: '' | 'H' | 'S' | 'P', sort?: string, sortNullsLast?: boolean, options?: any) {
        return CandidateApiFp(this.configuration).candidatesTotalsByOfficeGet(apiKey, sortHideNull, electionYear, page, sortNullOnly, activeCandidates, perPage, office, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Aggregated candidate receipts and disbursements grouped by cycle. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<string>} [district] District of candidate
     * @param {string} [maxDisbursements] Maximum aggregated disbursements
     * @param {string} [maxDebtsOwedByCommittee] Maximum debt
     * @param {string} [minCashOnHandEndPeriod] Minimum cash on hand
     * @param {Array<string>} [party] Three-letter party code
     * @param {Array<string>} [q] Name of candidate running for office
     * @param {boolean} [isActiveCandidate]  Candidates who are actively running. if no value specified, all candidates data is returned. When True is specified, only active candidates data are returned. When False is  specified, only inactive candidates data is returned. 
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {string} [minReceipts] Minimum aggregated receipts
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<number>} [electionYear]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [minDebtsOwedByCommittee] Minimum debt
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [maxReceipts] Maximum aggregated receipts
     * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @param {string} [maxCashOnHandEndPeriod] Maximum cash on hand
     * @param {string} [minDisbursements] Minimum aggregated disbursements
     * @param {Array<string>} [state] State of candidate
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Governmental office candidate runs for: House, Senate or presidential
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public candidatesTotalsGet(apiKey: string, district?: Array<string>, maxDisbursements?: string, maxDebtsOwedByCommittee?: string, minCashOnHandEndPeriod?: string, party?: Array<string>, q?: Array<string>, isActiveCandidate?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, minReceipts?: string, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, minDebtsOwedByCommittee?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, maxReceipts?: string, hasRaisedFunds?: boolean, maxCashOnHandEndPeriod?: string, minDisbursements?: string, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, electionFull?: boolean, federalFundsFlag?: boolean, options?: any) {
        return CandidateApiFp(this.configuration).candidatesTotalsGet(apiKey, district, maxDisbursements, maxDebtsOwedByCommittee, minCashOnHandEndPeriod, party, q, isActiveCandidate, cycle, sortNullsLast, minReceipts, sort, sortHideNull, electionYear, minDebtsOwedByCommittee, page, candidateId, sortNullOnly, maxReceipts, hasRaisedFunds, maxCashOnHandEndPeriod, minDisbursements, state, perPage, office, electionFull, federalFundsFlag, options)(this.axios, this.basePath);
    }

    /**
     *  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.  
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<string>} [name] Name (candidate or committee) to search for. Alias for \&#39;q\&#39;.
     * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {string} [year] See records pertaining to a particular election year. The list of election years is based on a candidate filing a statement of candidacy (F2) for that year.
     * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Array<'' | 'C' | 'F' | 'N' | 'P'>} [candidateStatus] One-letter code explaining if the candidate is:         - C present candidate         - F future candidate         - N not yet a candidate         - P prior candidate 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<number>} [electionYear] Year of election
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [hasRaisedFunds] A boolean that describes if a candidate\&#39;s committee has ever received any receipts for their campaign for this particular office. (Candidates have separate candidate IDs for each office.)
     * @param {Array<string>} [state] US state or territory where a candidate runs for office
     * @param {Array<'' | 'I' | 'C' | 'O'>} [incumbentChallenge] One-letter code (\&#39;I\&#39;, \&#39;C\&#39;, \&#39;O\&#39;) explaining if the candidate is an incumbent, a challenger, or if the seat is open.
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
     * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
     * @param {boolean} [federalFundsFlag] A boolean the describes if a presidential candidate has accepted federal funds. The flag will be false for House and Senate candidates.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public committeeCommitteeIdCandidatesGet(apiKey: string, committeeId: string, name?: Array<string>, district?: Array<string>, year?: string, party?: Array<string>, candidateStatus?: Array<'' | 'C' | 'F' | 'N' | 'P'>, sortNullsLast?: boolean, sort?: string, sortHideNull?: boolean, electionYear?: Array<number>, page?: number, sortNullOnly?: boolean, hasRaisedFunds?: boolean, state?: Array<string>, incumbentChallenge?: Array<'' | 'I' | 'C' | 'O'>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, federalFundsFlag?: boolean, options?: any) {
        return CandidateApiFp(this.configuration).committeeCommitteeIdCandidatesGet(apiKey, committeeId, name, district, year, party, candidateStatus, sortNullsLast, sort, sortHideNull, electionYear, page, sortNullOnly, hasRaisedFunds, state, incumbentChallenge, perPage, office, cycle, federalFundsFlag, options)(this.axios, this.basePath);
    }

    /**
     *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public committeeCommitteeIdCandidatesHistoryCycleGet(apiKey: string, committeeId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
        return CandidateApiFp(this.configuration).committeeCommitteeIdCandidatesHistoryCycleGet(apiKey, committeeId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(this.axios, this.basePath);
    }

    /**
     *  Find out a candidate\'s characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate\'s previous races.  This information is organized by `candidate_id`, so it won\'t help you find a candidate who ran for different offices over time; candidates get a new ID for each office. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public committeeCommitteeIdCandidatesHistoryGet(apiKey: string, committeeId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
        return CandidateApiFp(this.configuration).committeeCommitteeIdCandidatesHistoryGet(apiKey, committeeId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(this.axios, this.basePath);
    }

}


/**
 * CommitteeApi - axios parameter creator
 * @export
 */
export const CommitteeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
         * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
         * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdCommitteesGet(apiKey: string, candidateId: string, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, sortNullOnly?: boolean, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidateCandidateIdCommitteesGet.');
            }
            // verify required parameter 'candidateId' is not null or undefined
            if (candidateId === null || candidateId === undefined) {
                throw new RequiredError('candidateId','Required parameter candidateId was null or undefined when calling candidateCandidateIdCommitteesGet.');
            }
            const localVarPath = `/candidate/{candidate_id}/committees/`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (filingFrequency) {
                localVarQueryParameter['filing_frequency'] = filingFrequency;
            }

            if (designation) {
                localVarQueryParameter['designation'] = designation;
            }

            if (year) {
                localVarQueryParameter['year'] = year;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (committeeType) {
                localVarQueryParameter['committee_type'] = committeeType;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (organizationType) {
                localVarQueryParameter['organization_type'] = organizationType;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {number} cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdCommitteesHistoryCycleGet(apiKey: string, candidateId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidateCandidateIdCommitteesHistoryCycleGet.');
            }
            // verify required parameter 'candidateId' is not null or undefined
            if (candidateId === null || candidateId === undefined) {
                throw new RequiredError('candidateId','Required parameter candidateId was null or undefined when calling candidateCandidateIdCommitteesHistoryCycleGet.');
            }
            // verify required parameter 'cycle' is not null or undefined
            if (cycle === null || cycle === undefined) {
                throw new RequiredError('cycle','Required parameter cycle was null or undefined when calling candidateCandidateIdCommitteesHistoryCycleGet.');
            }
            const localVarPath = `/candidate/{candidate_id}/committees/history/{cycle}/`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)))
                .replace(`{${"cycle"}}`, encodeURIComponent(String(cycle)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdCommitteesHistoryGet(apiKey: string, candidateId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidateCandidateIdCommitteesHistoryGet.');
            }
            // verify required parameter 'candidateId' is not null or undefined
            if (candidateId === null || candidateId === undefined) {
                throw new RequiredError('candidateId','Required parameter candidateId was null or undefined when calling candidateCandidateIdCommitteesHistoryGet.');
            }
            const localVarPath = `/candidate/{candidate_id}/committees/history/`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
         * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
         * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, sortNullOnly?: boolean, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdGet.');
            }
            const localVarPath = `/committee/{committee_id}/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (filingFrequency) {
                localVarQueryParameter['filing_frequency'] = filingFrequency;
            }

            if (designation) {
                localVarQueryParameter['designation'] = designation;
            }

            if (year) {
                localVarQueryParameter['year'] = year;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (committeeType) {
                localVarQueryParameter['committee_type'] = committeeType;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (organizationType) {
                localVarQueryParameter['organization_type'] = organizationType;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdHistoryCycleGet(apiKey: string, committeeId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdHistoryCycleGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdHistoryCycleGet.');
            }
            // verify required parameter 'cycle' is not null or undefined
            if (cycle === null || cycle === undefined) {
                throw new RequiredError('cycle','Required parameter cycle was null or undefined when calling committeeCommitteeIdHistoryCycleGet.');
            }
            const localVarPath = `/committee/{committee_id}/history/{cycle}/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)))
                .replace(`{${"cycle"}}`, encodeURIComponent(String(cycle)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdHistoryGet(apiKey: string, committeeId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdHistoryGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdHistoryGet.');
            }
            const localVarPath = `/committee/{committee_id}/history/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Fetch basic information about committees and filers. Use parameters to filter for particular characteristics.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [maxLastF1Date] Filter for committees whose latest Form 1 was received on or before this date
         * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
         * @param {string} [maxFirstFileDate] Filter for committees whose first filing was received on or before this date
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<string>} [q] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {Array<string>} [treasurerName] Name of the Committee\&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
         * @param {string} [minLastF1Date] Filter for committees whose latest Form 1 was received on or after this date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minFirstFileDate] Filter for committees whose first filing was received on or after this date
         * @param {Array<string>} [state] US state or territory
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
         * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeesGet(apiKey: string, maxLastF1Date?: string, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, maxFirstFileDate?: string, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, committeeId?: Array<string>, party?: Array<string>, q?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, candidateId?: Array<string>, treasurerName?: Array<string>, minLastF1Date?: string, sortNullOnly?: boolean, minFirstFileDate?: string, state?: Array<string>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeesGet.');
            }
            const localVarPath = `/committees/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (maxLastF1Date !== undefined) {
                localVarQueryParameter['max_last_f1_date'] = (maxLastF1Date as any instanceof Date) ?
                    (maxLastF1Date as any).toISOString().substr(0,10) :
                    maxLastF1Date;
            }

            if (designation) {
                localVarQueryParameter['designation'] = designation;
            }

            if (year) {
                localVarQueryParameter['year'] = year;
            }

            if (maxFirstFileDate !== undefined) {
                localVarQueryParameter['max_first_file_date'] = (maxFirstFileDate as any instanceof Date) ?
                    (maxFirstFileDate as any).toISOString().substr(0,10) :
                    maxFirstFileDate;
            }

            if (committeeType) {
                localVarQueryParameter['committee_type'] = committeeType;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (party) {
                localVarQueryParameter['party'] = party;
            }

            if (q) {
                localVarQueryParameter['q'] = q;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (filingFrequency) {
                localVarQueryParameter['filing_frequency'] = filingFrequency;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (treasurerName) {
                localVarQueryParameter['treasurer_name'] = treasurerName;
            }

            if (minLastF1Date !== undefined) {
                localVarQueryParameter['min_last_f1_date'] = (minLastF1Date as any instanceof Date) ?
                    (minLastF1Date as any).toISOString().substr(0,10) :
                    minLastF1Date;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (minFirstFileDate !== undefined) {
                localVarQueryParameter['min_first_file_date'] = (minFirstFileDate as any instanceof Date) ?
                    (minFirstFileDate as any).toISOString().substr(0,10) :
                    minFirstFileDate;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (organizationType) {
                localVarQueryParameter['organization_type'] = organizationType;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommitteeApi - functional programming interface
 * @export
 */
export const CommitteeApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
         * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
         * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdCommitteesGet(apiKey: string, candidateId: string, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, sortNullOnly?: boolean, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeDetailPage> {
            const localVarAxiosArgs = CommitteeApiAxiosParamCreator(configuration).candidateCandidateIdCommitteesGet(apiKey, candidateId, sort, sortHideNull, page, filingFrequency, designation, year, sortNullOnly, committeeType, perPage, organizationType, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {number} cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdCommitteesHistoryCycleGet(apiKey: string, candidateId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeHistoryPage> {
            const localVarAxiosArgs = CommitteeApiAxiosParamCreator(configuration).candidateCandidateIdCommitteesHistoryCycleGet(apiKey, candidateId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdCommitteesHistoryGet(apiKey: string, candidateId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeHistoryPage> {
            const localVarAxiosArgs = CommitteeApiAxiosParamCreator(configuration).candidateCandidateIdCommitteesHistoryGet(apiKey, candidateId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
         * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
         * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, sortNullOnly?: boolean, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeDetailPage> {
            const localVarAxiosArgs = CommitteeApiAxiosParamCreator(configuration).committeeCommitteeIdGet(apiKey, committeeId, sort, sortHideNull, page, filingFrequency, designation, year, sortNullOnly, committeeType, perPage, organizationType, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdHistoryCycleGet(apiKey: string, committeeId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeHistoryPage> {
            const localVarAxiosArgs = CommitteeApiAxiosParamCreator(configuration).committeeCommitteeIdHistoryCycleGet(apiKey, committeeId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdHistoryGet(apiKey: string, committeeId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeHistoryPage> {
            const localVarAxiosArgs = CommitteeApiAxiosParamCreator(configuration).committeeCommitteeIdHistoryGet(apiKey, committeeId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Fetch basic information about committees and filers. Use parameters to filter for particular characteristics.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [maxLastF1Date] Filter for committees whose latest Form 1 was received on or before this date
         * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
         * @param {string} [maxFirstFileDate] Filter for committees whose first filing was received on or before this date
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<string>} [q] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {Array<string>} [treasurerName] Name of the Committee\&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
         * @param {string} [minLastF1Date] Filter for committees whose latest Form 1 was received on or after this date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minFirstFileDate] Filter for committees whose first filing was received on or after this date
         * @param {Array<string>} [state] US state or territory
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
         * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeesGet(apiKey: string, maxLastF1Date?: string, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, maxFirstFileDate?: string, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, committeeId?: Array<string>, party?: Array<string>, q?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, candidateId?: Array<string>, treasurerName?: Array<string>, minLastF1Date?: string, sortNullOnly?: boolean, minFirstFileDate?: string, state?: Array<string>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteePage> {
            const localVarAxiosArgs = CommitteeApiAxiosParamCreator(configuration).committeesGet(apiKey, maxLastF1Date, designation, year, maxFirstFileDate, committeeType, committeeId, party, q, sort, sortHideNull, page, filingFrequency, candidateId, treasurerName, minLastF1Date, sortNullOnly, minFirstFileDate, state, perPage, organizationType, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CommitteeApi - factory interface
 * @export
 */
export const CommitteeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
         * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
         * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdCommitteesGet(apiKey: string, candidateId: string, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, sortNullOnly?: boolean, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return CommitteeApiFp(configuration).candidateCandidateIdCommitteesGet(apiKey, candidateId, sort, sortHideNull, page, filingFrequency, designation, year, sortNullOnly, committeeType, perPage, organizationType, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {number} cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdCommitteesHistoryCycleGet(apiKey: string, candidateId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
            return CommitteeApiFp(configuration).candidateCandidateIdCommitteesHistoryCycleGet(apiKey, candidateId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(axios, basePath);
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdCommitteesHistoryGet(apiKey: string, candidateId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
            return CommitteeApiFp(configuration).candidateCandidateIdCommitteesHistoryGet(apiKey, candidateId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(axios, basePath);
        },
        /**
         *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
         * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
         * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, sortNullOnly?: boolean, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return CommitteeApiFp(configuration).committeeCommitteeIdGet(apiKey, committeeId, sort, sortHideNull, page, filingFrequency, designation, year, sortNullOnly, committeeType, perPage, organizationType, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdHistoryCycleGet(apiKey: string, committeeId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
            return CommitteeApiFp(configuration).committeeCommitteeIdHistoryCycleGet(apiKey, committeeId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(axios, basePath);
        },
        /**
         *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdHistoryGet(apiKey: string, committeeId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
            return CommitteeApiFp(configuration).committeeCommitteeIdHistoryGet(apiKey, committeeId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(axios, basePath);
        },
        /**
         *  Fetch basic information about committees and filers. Use parameters to filter for particular characteristics.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [maxLastF1Date] Filter for committees whose latest Form 1 was received on or before this date
         * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
         * @param {string} [maxFirstFileDate] Filter for committees whose first filing was received on or before this date
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<string>} [q] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {Array<string>} [treasurerName] Name of the Committee\&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
         * @param {string} [minLastF1Date] Filter for committees whose latest Form 1 was received on or after this date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minFirstFileDate] Filter for committees whose first filing was received on or after this date
         * @param {Array<string>} [state] US state or territory
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
         * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeesGet(apiKey: string, maxLastF1Date?: string, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, maxFirstFileDate?: string, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, committeeId?: Array<string>, party?: Array<string>, q?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, candidateId?: Array<string>, treasurerName?: Array<string>, minLastF1Date?: string, sortNullOnly?: boolean, minFirstFileDate?: string, state?: Array<string>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return CommitteeApiFp(configuration).committeesGet(apiKey, maxLastF1Date, designation, year, maxFirstFileDate, committeeType, committeeId, party, q, sort, sortHideNull, page, filingFrequency, candidateId, treasurerName, minLastF1Date, sortNullOnly, minFirstFileDate, state, perPage, organizationType, cycle, sortNullsLast, options)(axios, basePath);
        },
    };
};

/**
 * CommitteeApi - object-oriented interface
 * @export
 * @class CommitteeApi
 * @extends {BaseAPI}
 */
export class CommitteeApi extends BaseAPI {
    /**
     *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
     * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitteeApi
     */
    public candidateCandidateIdCommitteesGet(apiKey: string, candidateId: string, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, sortNullOnly?: boolean, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return CommitteeApiFp(this.configuration).candidateCandidateIdCommitteesGet(apiKey, candidateId, sort, sortHideNull, page, filingFrequency, designation, year, sortNullOnly, committeeType, perPage, organizationType, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {number} cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitteeApi
     */
    public candidateCandidateIdCommitteesHistoryCycleGet(apiKey: string, candidateId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
        return CommitteeApiFp(this.configuration).candidateCandidateIdCommitteesHistoryCycleGet(apiKey, candidateId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(this.axios, this.basePath);
    }

    /**
     *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitteeApi
     */
    public candidateCandidateIdCommitteesHistoryGet(apiKey: string, candidateId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
        return CommitteeApiFp(this.configuration).candidateCandidateIdCommitteesHistoryGet(apiKey, candidateId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(this.axios, this.basePath);
    }

    /**
     *  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
     * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitteeApi
     */
    public committeeCommitteeIdGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, sortNullOnly?: boolean, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return CommitteeApiFp(this.configuration).committeeCommitteeIdGet(apiKey, committeeId, sort, sortHideNull, page, filingFrequency, designation, year, sortNullOnly, committeeType, perPage, organizationType, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {number} cycle  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitteeApi
     */
    public committeeCommitteeIdHistoryCycleGet(apiKey: string, committeeId: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
        return CommitteeApiFp(this.configuration).committeeCommitteeIdHistoryCycleGet(apiKey, committeeId, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(this.axios, this.basePath);
    }

    /**
     *  Explore a filer\'s characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitteeApi
     */
    public committeeCommitteeIdHistoryGet(apiKey: string, committeeId: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, electionFull?: boolean, sort?: string, options?: any) {
        return CommitteeApiFp(this.configuration).committeeCommitteeIdHistoryGet(apiKey, committeeId, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, electionFull, sort, options)(this.axios, this.basePath);
    }

    /**
     *  Fetch basic information about committees and filers. Use parameters to filter for particular characteristics.  
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [maxLastF1Date] Filter for committees whose latest Form 1 was received on or before this date
     * @param {Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {Array<number>} [year] A year that the committee was activeâ€” (after original registration date     or filing but before expiration date)
     * @param {string} [maxFirstFileDate] Filter for committees whose first filing was received on or before this date
     * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Array<string>} [q] The name of the committee. If a committee changes its name,     the most recent name will be shown. Committee names are not unique. Use committee_id     for looking up records.
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>} [filingFrequency] The one-letter      code of the filing frequency:          - A Administratively terminated          - D Debt          - M Monthly filer          - Q Quarterly filer          - T Terminated          - W Waived 
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {Array<string>} [treasurerName] Name of the Committee\&#39;s treasurer. If multiple treasurers for the committee, the most recent treasurer will be shown.
     * @param {string} [minLastF1Date] Filter for committees whose latest Form 1 was received on or after this date
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [minFirstFileDate] Filter for committees whose first filing was received on or after this date
     * @param {Array<string>} [state] US state or territory
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>} [organizationType] The one-letter code for the kind for organization:         - C corporation         - L labor organization         - M membership organization         - T trade association         - V cooperative         - W corporation without capital stock 
     * @param {Array<number>} [cycle]  A two year election cycle that the committee was active- (after original registration date but before expiration date in FEC Form 1s) The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitteeApi
     */
    public committeesGet(apiKey: string, maxLastF1Date?: string, designation?: Array<'' | 'A' | 'J' | 'P' | 'U' | 'B' | 'D'>, year?: Array<number>, maxFirstFileDate?: string, committeeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, committeeId?: Array<string>, party?: Array<string>, q?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, filingFrequency?: Array<'' | 'A' | 'M' | 'N' | 'Q' | 'T' | 'W' | '-A' | '-T'>, candidateId?: Array<string>, treasurerName?: Array<string>, minLastF1Date?: string, sortNullOnly?: boolean, minFirstFileDate?: string, state?: Array<string>, perPage?: number, organizationType?: Array<'' | 'C' | 'L' | 'M' | 'T' | 'V' | 'W'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return CommitteeApiFp(this.configuration).committeesGet(apiKey, maxLastF1Date, designation, year, maxFirstFileDate, committeeType, committeeId, party, q, sort, sortHideNull, page, filingFrequency, candidateId, treasurerName, minLastF1Date, sortNullOnly, minFirstFileDate, state, perPage, organizationType, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

}


/**
 * CommunicationCostApi - axios parameter creator
 * @export
 */
export const CommunicationCostApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Communication cost aggregated by candidate ID and committee ID.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCommunicationCostsByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdCommunicationCostsByCandidateGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdCommunicationCostsByCandidateGet.');
            }
            const localVarPath = `/committee/{committee_id}/communication_costs/by_candidate/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (district !== undefined) {
                localVarQueryParameter['district'] = district;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (supportOppose !== undefined) {
                localVarQueryParameter['support_oppose'] = supportOppose;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office !== undefined) {
                localVarQueryParameter['office'] = office;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Communication cost aggregated by candidate ID and committee ID.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communicationCostsByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling communicationCostsByCandidateGet.');
            }
            const localVarPath = `/communication_costs/by_candidate/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (district !== undefined) {
                localVarQueryParameter['district'] = district;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (supportOppose !== undefined) {
                localVarQueryParameter['support_oppose'] = supportOppose;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office !== undefined) {
                localVarQueryParameter['office'] = office;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  52 U.S.C. 30118 allows \"communications by a corporation to its stockholders and executive or administrative personnel and their families or by a labor organization to its members and their families on any subject,\" including the express advocacy of the election or defeat of any Federal candidate.  The costs of such communications must be reported to the Federal Election Commission under certain circumstances. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Support or opposition
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [minImageNumber] 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communicationCostsGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, sortHideNull?: boolean, maxAmount?: string, supportOpposeIndicator?: Array<'S' | 'O'>, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minImageNumber?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling communicationCostsGet.');
            }
            const localVarPath = `/communication-costs/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (lineNumber !== undefined) {
                localVarQueryParameter['line_number'] = lineNumber;
            }

            if (maxImageNumber !== undefined) {
                localVarQueryParameter['max_image_number'] = maxImageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (supportOpposeIndicator) {
                localVarQueryParameter['support_oppose_indicator'] = supportOpposeIndicator;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (minImageNumber !== undefined) {
                localVarQueryParameter['min_image_number'] = minImageNumber;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommunicationCostApi - functional programming interface
 * @export
 */
export const CommunicationCostApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Communication cost aggregated by candidate ID and committee ID.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCommunicationCostsByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationCostByCandidatePage> {
            const localVarAxiosArgs = CommunicationCostApiAxiosParamCreator(configuration).committeeCommitteeIdCommunicationCostsByCandidateGet(apiKey, committeeId, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Communication cost aggregated by candidate ID and committee ID.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communicationCostsByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationCostByCandidatePage> {
            const localVarAxiosArgs = CommunicationCostApiAxiosParamCreator(configuration).communicationCostsByCandidateGet(apiKey, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  52 U.S.C. 30118 allows \"communications by a corporation to its stockholders and executive or administrative personnel and their families or by a labor organization to its members and their families on any subject,\" including the express advocacy of the election or defeat of any Federal candidate.  The costs of such communications must be reported to the Federal Election Commission under certain circumstances. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Support or opposition
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [minImageNumber] 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communicationCostsGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, sortHideNull?: boolean, maxAmount?: string, supportOpposeIndicator?: Array<'S' | 'O'>, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minImageNumber?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommunicationCostPage> {
            const localVarAxiosArgs = CommunicationCostApiAxiosParamCreator(configuration).communicationCostsGet(apiKey, minAmount, maxDate, committeeId, lineNumber, maxImageNumber, sort, sortHideNull, maxAmount, supportOpposeIndicator, page, candidateId, minDate, sortNullOnly, imageNumber, perPage, minImageNumber, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CommunicationCostApi - factory interface
 * @export
 */
export const CommunicationCostApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Communication cost aggregated by candidate ID and committee ID.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdCommunicationCostsByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
            return CommunicationCostApiFp(configuration).committeeCommitteeIdCommunicationCostsByCandidateGet(apiKey, committeeId, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options)(axios, basePath);
        },
        /**
         * Communication cost aggregated by candidate ID and committee ID.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communicationCostsByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
            return CommunicationCostApiFp(configuration).communicationCostsByCandidateGet(apiKey, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  52 U.S.C. 30118 allows \"communications by a corporation to its stockholders and executive or administrative personnel and their families or by a labor organization to its members and their families on any subject,\" including the express advocacy of the election or defeat of any Federal candidate.  The costs of such communications must be reported to the Federal Election Commission under certain circumstances. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Support or opposition
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [minImageNumber] 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communicationCostsGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, sortHideNull?: boolean, maxAmount?: string, supportOpposeIndicator?: Array<'S' | 'O'>, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minImageNumber?: string, sortNullsLast?: boolean, options?: any) {
            return CommunicationCostApiFp(configuration).communicationCostsGet(apiKey, minAmount, maxDate, committeeId, lineNumber, maxImageNumber, sort, sortHideNull, maxAmount, supportOpposeIndicator, page, candidateId, minDate, sortNullOnly, imageNumber, perPage, minImageNumber, sortNullsLast, options)(axios, basePath);
        },
    };
};

/**
 * CommunicationCostApi - object-oriented interface
 * @export
 * @class CommunicationCostApi
 * @extends {BaseAPI}
 */
export class CommunicationCostApi extends BaseAPI {
    /**
     * Communication cost aggregated by candidate ID and committee ID.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {'S' | 'O'} [supportOppose] Support or opposition
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [state] US state or territory where a candidate runs for office
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunicationCostApi
     */
    public committeeCommitteeIdCommunicationCostsByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
        return CommunicationCostApiFp(this.configuration).committeeCommitteeIdCommunicationCostsByCandidateGet(apiKey, committeeId, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     * Communication cost aggregated by candidate ID and committee ID.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {'S' | 'O'} [supportOppose] Support or opposition
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [state] US state or territory where a candidate runs for office
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunicationCostApi
     */
    public communicationCostsByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
        return CommunicationCostApiFp(this.configuration).communicationCostsByCandidateGet(apiKey, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  52 U.S.C. 30118 allows \"communications by a corporation to its stockholders and executive or administrative personnel and their families or by a labor organization to its members and their families on any subject,\" including the express advocacy of the election or defeat of any Federal candidate.  The costs of such communications must be reported to the Federal Election Commission under certain circumstances. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {string} [maxDate] Maximum date
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
     * @param {string} [maxImageNumber] 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Support or opposition
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {string} [minDate] Minimum date
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [minImageNumber] 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommunicationCostApi
     */
    public communicationCostsGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, sortHideNull?: boolean, maxAmount?: string, supportOpposeIndicator?: Array<'S' | 'O'>, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minImageNumber?: string, sortNullsLast?: boolean, options?: any) {
        return CommunicationCostApiFp(this.configuration).communicationCostsGet(apiKey, minAmount, maxDate, committeeId, lineNumber, maxImageNumber, sort, sortHideNull, maxAmount, supportOpposeIndicator, page, candidateId, minDate, sortNullOnly, imageNumber, perPage, minImageNumber, sortNullsLast, options)(this.axios, this.basePath);
    }

}


/**
 * DatesApi - axios parameter creator
 * @export
 */
export const DatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxEndDate]  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [eventId] An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<number>} [calendarCategoryId]  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
         * @param {Array<string>} [summary] Longer description of event
         * @param {Array<string>} [description] Brief description of event
         * @param {string} [minEndDate]  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'ics' | 'csv'} [renderer] 
         * @param {string} [maxStartDate]  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minStartDate]  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarDatesExportGet(apiKey: string, sortHideNull?: boolean, maxEndDate?: string, eventId?: number, page?: number, calendarCategoryId?: Array<number>, summary?: Array<string>, description?: Array<string>, minEndDate?: string, sortNullOnly?: boolean, renderer?: 'ics' | 'csv', maxStartDate?: string, minStartDate?: string, perPage?: number, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling calendarDatesExportGet.');
            }
            const localVarPath = `/calendar-dates/export/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxEndDate !== undefined) {
                localVarQueryParameter['max_end_date'] = (maxEndDate as any instanceof Date) ?
                    (maxEndDate as any).toISOString().substr(0,10) :
                    maxEndDate;
            }

            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (calendarCategoryId) {
                localVarQueryParameter['calendar_category_id'] = calendarCategoryId;
            }

            if (summary) {
                localVarQueryParameter['summary'] = summary;
            }

            if (description) {
                localVarQueryParameter['description'] = description;
            }

            if (minEndDate !== undefined) {
                localVarQueryParameter['min_end_date'] = (minEndDate as any instanceof Date) ?
                    (minEndDate as any).toISOString().substr(0,10) :
                    minEndDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (renderer !== undefined) {
                localVarQueryParameter['renderer'] = renderer;
            }

            if (maxStartDate !== undefined) {
                localVarQueryParameter['max_start_date'] = (maxStartDate as any instanceof Date) ?
                    (maxStartDate as any).toISOString().substr(0,10) :
                    maxStartDate;
            }

            if (minStartDate !== undefined) {
                localVarQueryParameter['min_start_date'] = (minStartDate as any instanceof Date) ?
                    (minStartDate as any).toISOString().substr(0,10) :
                    minStartDate;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [eventId] An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
         * @param {Array<string>} [summary] Longer description of event
         * @param {Array<number>} [calendarCategoryId]  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [description] Brief description of event
         * @param {string} [minEndDate]  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [maxStartDate]  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minStartDate]  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxEndDate]  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarDatesGet(apiKey: string, sortHideNull?: boolean, eventId?: number, summary?: Array<string>, calendarCategoryId?: Array<number>, page?: number, description?: Array<string>, minEndDate?: string, sortNullOnly?: boolean, perPage?: number, maxStartDate?: string, minStartDate?: string, maxEndDate?: string, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling calendarDatesGet.');
            }
            const localVarPath = `/calendar-dates/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (eventId !== undefined) {
                localVarQueryParameter['event_id'] = eventId;
            }

            if (summary) {
                localVarQueryParameter['summary'] = summary;
            }

            if (calendarCategoryId) {
                localVarQueryParameter['calendar_category_id'] = calendarCategoryId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (description) {
                localVarQueryParameter['description'] = description;
            }

            if (minEndDate !== undefined) {
                localVarQueryParameter['min_end_date'] = (minEndDate as any instanceof Date) ?
                    (minEndDate as any).toISOString().substr(0,10) :
                    minEndDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (maxStartDate !== undefined) {
                localVarQueryParameter['max_start_date'] = (maxStartDate as any instanceof Date) ?
                    (maxStartDate as any).toISOString().substr(0,10) :
                    maxStartDate;
            }

            if (minStartDate !== undefined) {
                localVarQueryParameter['min_start_date'] = (minStartDate as any instanceof Date) ?
                    (minStartDate as any).toISOString().substr(0,10) :
                    minStartDate;
            }

            if (maxEndDate !== undefined) {
                localVarQueryParameter['max_end_date'] = (maxEndDate as any instanceof Date) ?
                    (maxEndDate as any).toISOString().substr(0,10) :
                    maxEndDate;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  FEC election dates since 1995. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [electionTypeId]  Election type id 
         * @param {string} [minPrimaryGeneralDate]  The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxUpdateDate]  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxPrimaryGeneralDate]  The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minElectionDate]  The minimum date of election. 
         * @param {Array<string>} [electionState]  State or territory of the office sought. 
         * @param {string} [maxCreateDate]  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [electionDistrict]  House district of the office sought, if applicable. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [maxElectionDate]  The maximum date of election. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [electionParty]  Party, if applicable. 
         * @param {Array<'H' | 'S' | 'P'>} [officeSought]  House, Senate or presidential office. 
         * @param {Array<string>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minCreateDate]  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minUpdateDate]  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionDatesGet(apiKey: string, electionTypeId?: Array<string>, minPrimaryGeneralDate?: string, maxUpdateDate?: string, maxPrimaryGeneralDate?: string, minElectionDate?: string, electionState?: Array<string>, maxCreateDate?: string, electionDistrict?: Array<string>, sort?: string, maxElectionDate?: string, sortHideNull?: boolean, electionParty?: Array<string>, officeSought?: Array<'H' | 'S' | 'P'>, electionYear?: Array<string>, page?: number, sortNullOnly?: boolean, minCreateDate?: string, minUpdateDate?: string, perPage?: number, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling electionDatesGet.');
            }
            const localVarPath = `/election-dates/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (electionTypeId) {
                localVarQueryParameter['election_type_id'] = electionTypeId;
            }

            if (minPrimaryGeneralDate !== undefined) {
                localVarQueryParameter['min_primary_general_date'] = (minPrimaryGeneralDate as any instanceof Date) ?
                    (minPrimaryGeneralDate as any).toISOString().substr(0,10) :
                    minPrimaryGeneralDate;
            }

            if (maxUpdateDate !== undefined) {
                localVarQueryParameter['max_update_date'] = (maxUpdateDate as any instanceof Date) ?
                    (maxUpdateDate as any).toISOString().substr(0,10) :
                    maxUpdateDate;
            }

            if (maxPrimaryGeneralDate !== undefined) {
                localVarQueryParameter['max_primary_general_date'] = (maxPrimaryGeneralDate as any instanceof Date) ?
                    (maxPrimaryGeneralDate as any).toISOString().substr(0,10) :
                    maxPrimaryGeneralDate;
            }

            if (minElectionDate !== undefined) {
                localVarQueryParameter['min_election_date'] = (minElectionDate as any instanceof Date) ?
                    (minElectionDate as any).toISOString().substr(0,10) :
                    minElectionDate;
            }

            if (electionState) {
                localVarQueryParameter['election_state'] = electionState;
            }

            if (maxCreateDate !== undefined) {
                localVarQueryParameter['max_create_date'] = (maxCreateDate as any instanceof Date) ?
                    (maxCreateDate as any).toISOString().substr(0,10) :
                    maxCreateDate;
            }

            if (electionDistrict) {
                localVarQueryParameter['election_district'] = electionDistrict;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (maxElectionDate !== undefined) {
                localVarQueryParameter['max_election_date'] = (maxElectionDate as any instanceof Date) ?
                    (maxElectionDate as any).toISOString().substr(0,10) :
                    maxElectionDate;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (electionParty) {
                localVarQueryParameter['election_party'] = electionParty;
            }

            if (officeSought) {
                localVarQueryParameter['office_sought'] = officeSought;
            }

            if (electionYear) {
                localVarQueryParameter['election_year'] = electionYear;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (minCreateDate !== undefined) {
                localVarQueryParameter['min_create_date'] = (minCreateDate as any instanceof Date) ?
                    (minCreateDate as any).toISOString().substr(0,10) :
                    minCreateDate;
            }

            if (minUpdateDate !== undefined) {
                localVarQueryParameter['min_update_date'] = (minUpdateDate as any instanceof Date) ?
                    (minUpdateDate as any).toISOString().substr(0,10) :
                    minUpdateDate;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  FEC election dates since 1995. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minDueDate]  The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxUpdateDate]  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxDueDate]  The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {string} [minCreateDate]  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minUpdateDate]  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxCreateDate]  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportingDatesGet(apiKey: string, sortHideNull?: boolean, reportType?: Array<string>, page?: number, minDueDate?: string, maxUpdateDate?: string, maxDueDate?: string, sortNullOnly?: boolean, reportYear?: Array<number>, minCreateDate?: string, minUpdateDate?: string, maxCreateDate?: string, perPage?: number, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling reportingDatesGet.');
            }
            const localVarPath = `/reporting-dates/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (reportType) {
                localVarQueryParameter['report_type'] = reportType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (minDueDate !== undefined) {
                localVarQueryParameter['min_due_date'] = (minDueDate as any instanceof Date) ?
                    (minDueDate as any).toISOString().substr(0,10) :
                    minDueDate;
            }

            if (maxUpdateDate !== undefined) {
                localVarQueryParameter['max_update_date'] = (maxUpdateDate as any instanceof Date) ?
                    (maxUpdateDate as any).toISOString().substr(0,10) :
                    maxUpdateDate;
            }

            if (maxDueDate !== undefined) {
                localVarQueryParameter['max_due_date'] = (maxDueDate as any instanceof Date) ?
                    (maxDueDate as any).toISOString().substr(0,10) :
                    maxDueDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (reportYear) {
                localVarQueryParameter['report_year'] = reportYear;
            }

            if (minCreateDate !== undefined) {
                localVarQueryParameter['min_create_date'] = (minCreateDate as any instanceof Date) ?
                    (minCreateDate as any).toISOString().substr(0,10) :
                    minCreateDate;
            }

            if (minUpdateDate !== undefined) {
                localVarQueryParameter['min_update_date'] = (minUpdateDate as any instanceof Date) ?
                    (minUpdateDate as any).toISOString().substr(0,10) :
                    minUpdateDate;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (maxCreateDate !== undefined) {
                localVarQueryParameter['max_create_date'] = (maxCreateDate as any instanceof Date) ?
                    (maxCreateDate as any).toISOString().substr(0,10) :
                    maxCreateDate;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DatesApi - functional programming interface
 * @export
 */
export const DatesApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxEndDate]  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [eventId] An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<number>} [calendarCategoryId]  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
         * @param {Array<string>} [summary] Longer description of event
         * @param {Array<string>} [description] Brief description of event
         * @param {string} [minEndDate]  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'ics' | 'csv'} [renderer] 
         * @param {string} [maxStartDate]  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minStartDate]  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarDatesExportGet(apiKey: string, sortHideNull?: boolean, maxEndDate?: string, eventId?: number, page?: number, calendarCategoryId?: Array<number>, summary?: Array<string>, description?: Array<string>, minEndDate?: string, sortNullOnly?: boolean, renderer?: 'ics' | 'csv', maxStartDate?: string, minStartDate?: string, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarDatePage> {
            const localVarAxiosArgs = DatesApiAxiosParamCreator(configuration).calendarDatesExportGet(apiKey, sortHideNull, maxEndDate, eventId, page, calendarCategoryId, summary, description, minEndDate, sortNullOnly, renderer, maxStartDate, minStartDate, perPage, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [eventId] An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
         * @param {Array<string>} [summary] Longer description of event
         * @param {Array<number>} [calendarCategoryId]  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [description] Brief description of event
         * @param {string} [minEndDate]  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [maxStartDate]  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minStartDate]  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxEndDate]  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarDatesGet(apiKey: string, sortHideNull?: boolean, eventId?: number, summary?: Array<string>, calendarCategoryId?: Array<number>, page?: number, description?: Array<string>, minEndDate?: string, sortNullOnly?: boolean, perPage?: number, maxStartDate?: string, minStartDate?: string, maxEndDate?: string, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CalendarDatePage> {
            const localVarAxiosArgs = DatesApiAxiosParamCreator(configuration).calendarDatesGet(apiKey, sortHideNull, eventId, summary, calendarCategoryId, page, description, minEndDate, sortNullOnly, perPage, maxStartDate, minStartDate, maxEndDate, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  FEC election dates since 1995. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [electionTypeId]  Election type id 
         * @param {string} [minPrimaryGeneralDate]  The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxUpdateDate]  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxPrimaryGeneralDate]  The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minElectionDate]  The minimum date of election. 
         * @param {Array<string>} [electionState]  State or territory of the office sought. 
         * @param {string} [maxCreateDate]  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [electionDistrict]  House district of the office sought, if applicable. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [maxElectionDate]  The maximum date of election. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [electionParty]  Party, if applicable. 
         * @param {Array<'H' | 'S' | 'P'>} [officeSought]  House, Senate or presidential office. 
         * @param {Array<string>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minCreateDate]  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minUpdateDate]  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionDatesGet(apiKey: string, electionTypeId?: Array<string>, minPrimaryGeneralDate?: string, maxUpdateDate?: string, maxPrimaryGeneralDate?: string, minElectionDate?: string, electionState?: Array<string>, maxCreateDate?: string, electionDistrict?: Array<string>, sort?: string, maxElectionDate?: string, sortHideNull?: boolean, electionParty?: Array<string>, officeSought?: Array<'H' | 'S' | 'P'>, electionYear?: Array<string>, page?: number, sortNullOnly?: boolean, minCreateDate?: string, minUpdateDate?: string, perPage?: number, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponseDefault> {
            const localVarAxiosArgs = DatesApiAxiosParamCreator(configuration).electionDatesGet(apiKey, electionTypeId, minPrimaryGeneralDate, maxUpdateDate, maxPrimaryGeneralDate, minElectionDate, electionState, maxCreateDate, electionDistrict, sort, maxElectionDate, sortHideNull, electionParty, officeSought, electionYear, page, sortNullOnly, minCreateDate, minUpdateDate, perPage, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  FEC election dates since 1995. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minDueDate]  The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxUpdateDate]  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxDueDate]  The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {string} [minCreateDate]  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minUpdateDate]  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxCreateDate]  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportingDatesGet(apiKey: string, sortHideNull?: boolean, reportType?: Array<string>, page?: number, minDueDate?: string, maxUpdateDate?: string, maxDueDate?: string, sortNullOnly?: boolean, reportYear?: Array<number>, minCreateDate?: string, minUpdateDate?: string, maxCreateDate?: string, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponseDefault2> {
            const localVarAxiosArgs = DatesApiAxiosParamCreator(configuration).reportingDatesGet(apiKey, sortHideNull, reportType, page, minDueDate, maxUpdateDate, maxDueDate, sortNullOnly, reportYear, minCreateDate, minUpdateDate, maxCreateDate, perPage, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DatesApi - factory interface
 * @export
 */
export const DatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.  
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxEndDate]  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [eventId] An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<number>} [calendarCategoryId]  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
         * @param {Array<string>} [summary] Longer description of event
         * @param {Array<string>} [description] Brief description of event
         * @param {string} [minEndDate]  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'ics' | 'csv'} [renderer] 
         * @param {string} [maxStartDate]  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minStartDate]  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarDatesExportGet(apiKey: string, sortHideNull?: boolean, maxEndDate?: string, eventId?: number, page?: number, calendarCategoryId?: Array<number>, summary?: Array<string>, description?: Array<string>, minEndDate?: string, sortNullOnly?: boolean, renderer?: 'ics' | 'csv', maxStartDate?: string, minStartDate?: string, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
            return DatesApiFp(configuration).calendarDatesExportGet(apiKey, sortHideNull, maxEndDate, eventId, page, calendarCategoryId, summary, description, minEndDate, sortNullOnly, renderer, maxStartDate, minStartDate, perPage, sort, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [eventId] An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
         * @param {Array<string>} [summary] Longer description of event
         * @param {Array<number>} [calendarCategoryId]  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [description] Brief description of event
         * @param {string} [minEndDate]  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [maxStartDate]  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minStartDate]  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxEndDate]  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calendarDatesGet(apiKey: string, sortHideNull?: boolean, eventId?: number, summary?: Array<string>, calendarCategoryId?: Array<number>, page?: number, description?: Array<string>, minEndDate?: string, sortNullOnly?: boolean, perPage?: number, maxStartDate?: string, minStartDate?: string, maxEndDate?: string, sort?: string, sortNullsLast?: boolean, options?: any) {
            return DatesApiFp(configuration).calendarDatesGet(apiKey, sortHideNull, eventId, summary, calendarCategoryId, page, description, minEndDate, sortNullOnly, perPage, maxStartDate, minStartDate, maxEndDate, sort, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  FEC election dates since 1995. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [electionTypeId]  Election type id 
         * @param {string} [minPrimaryGeneralDate]  The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxUpdateDate]  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxPrimaryGeneralDate]  The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minElectionDate]  The minimum date of election. 
         * @param {Array<string>} [electionState]  State or territory of the office sought. 
         * @param {string} [maxCreateDate]  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [electionDistrict]  House district of the office sought, if applicable. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [maxElectionDate]  The maximum date of election. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [electionParty]  Party, if applicable. 
         * @param {Array<'H' | 'S' | 'P'>} [officeSought]  House, Senate or presidential office. 
         * @param {Array<string>} [electionYear] Year of election
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minCreateDate]  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minUpdateDate]  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionDatesGet(apiKey: string, electionTypeId?: Array<string>, minPrimaryGeneralDate?: string, maxUpdateDate?: string, maxPrimaryGeneralDate?: string, minElectionDate?: string, electionState?: Array<string>, maxCreateDate?: string, electionDistrict?: Array<string>, sort?: string, maxElectionDate?: string, sortHideNull?: boolean, electionParty?: Array<string>, officeSought?: Array<'H' | 'S' | 'P'>, electionYear?: Array<string>, page?: number, sortNullOnly?: boolean, minCreateDate?: string, minUpdateDate?: string, perPage?: number, sortNullsLast?: boolean, options?: any) {
            return DatesApiFp(configuration).electionDatesGet(apiKey, electionTypeId, minPrimaryGeneralDate, maxUpdateDate, maxPrimaryGeneralDate, minElectionDate, electionState, maxCreateDate, electionDistrict, sort, maxElectionDate, sortHideNull, electionParty, officeSought, electionYear, page, sortNullOnly, minCreateDate, minUpdateDate, perPage, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  FEC election dates since 1995. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minDueDate]  The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxUpdateDate]  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxDueDate]  The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {string} [minCreateDate]  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [minUpdateDate]  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxCreateDate]  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportingDatesGet(apiKey: string, sortHideNull?: boolean, reportType?: Array<string>, page?: number, minDueDate?: string, maxUpdateDate?: string, maxDueDate?: string, sortNullOnly?: boolean, reportYear?: Array<number>, minCreateDate?: string, minUpdateDate?: string, maxCreateDate?: string, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
            return DatesApiFp(configuration).reportingDatesGet(apiKey, sortHideNull, reportType, page, minDueDate, maxUpdateDate, maxDueDate, sortNullOnly, reportYear, minCreateDate, minUpdateDate, maxCreateDate, perPage, sort, sortNullsLast, options)(axios, basePath);
        },
    };
};

/**
 * DatesApi - object-oriented interface
 * @export
 * @class DatesApi
 * @extends {BaseAPI}
 */
export class DatesApi extends BaseAPI {
    /**
     *  Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.  
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [maxEndDate]  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {number} [eventId] An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<number>} [calendarCategoryId]  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
     * @param {Array<string>} [summary] Longer description of event
     * @param {Array<string>} [description] Brief description of event
     * @param {string} [minEndDate]  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {'ics' | 'csv'} [renderer] 
     * @param {string} [maxStartDate]  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [minStartDate]  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatesApi
     */
    public calendarDatesExportGet(apiKey: string, sortHideNull?: boolean, maxEndDate?: string, eventId?: number, page?: number, calendarCategoryId?: Array<number>, summary?: Array<string>, description?: Array<string>, minEndDate?: string, sortNullOnly?: boolean, renderer?: 'ics' | 'csv', maxStartDate?: string, minStartDate?: string, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
        return DatesApiFp(this.configuration).calendarDatesExportGet(apiKey, sortHideNull, maxEndDate, eventId, page, calendarCategoryId, summary, description, minEndDate, sortNullOnly, renderer, maxStartDate, minStartDate, perPage, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [eventId] An unique ID for an event. Useful for downloading a single event to your calendar. This ID is not a permanent, persistent ID.
     * @param {Array<string>} [summary] Longer description of event
     * @param {Array<number>} [calendarCategoryId]  Each type of event has a calendar category with an integer id. Options are: Open Meetings: 32, Executive Sessions: 39, Public Hearings: 40, Conferences: 33, Roundtables: 34, Election Dates: 36, Federal Holidays: 37, FEA Periods: 38, Commission Meetings: 20, Reporting Deadlines: 21, Conferences and Outreach: 22, AOs and Rules: 23, Other: 24, Quarterly: 25, Monthly: 26, Pre and Post-Elections: 27, EC Periods:28, and IE Periods: 29 
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [description] Brief description of event
     * @param {string} [minEndDate]  The minimum end date.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [maxStartDate]  The maximum start date.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [minStartDate]  The minimum start date.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxEndDate]  The maximum end date.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatesApi
     */
    public calendarDatesGet(apiKey: string, sortHideNull?: boolean, eventId?: number, summary?: Array<string>, calendarCategoryId?: Array<number>, page?: number, description?: Array<string>, minEndDate?: string, sortNullOnly?: boolean, perPage?: number, maxStartDate?: string, minStartDate?: string, maxEndDate?: string, sort?: string, sortNullsLast?: boolean, options?: any) {
        return DatesApiFp(this.configuration).calendarDatesGet(apiKey, sortHideNull, eventId, summary, calendarCategoryId, page, description, minEndDate, sortNullOnly, perPage, maxStartDate, minStartDate, maxEndDate, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  FEC election dates since 1995. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<string>} [electionTypeId]  Election type id 
     * @param {string} [minPrimaryGeneralDate]  The minimum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxUpdateDate]  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxPrimaryGeneralDate]  The maximum date of primary or general election.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [minElectionDate]  The minimum date of election. 
     * @param {Array<string>} [electionState]  State or territory of the office sought. 
     * @param {string} [maxCreateDate]  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Array<string>} [electionDistrict]  House district of the office sought, if applicable. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {string} [maxElectionDate]  The maximum date of election. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<string>} [electionParty]  Party, if applicable. 
     * @param {Array<'H' | 'S' | 'P'>} [officeSought]  House, Senate or presidential office. 
     * @param {Array<string>} [electionYear] Year of election
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [minCreateDate]  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [minUpdateDate]  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatesApi
     */
    public electionDatesGet(apiKey: string, electionTypeId?: Array<string>, minPrimaryGeneralDate?: string, maxUpdateDate?: string, maxPrimaryGeneralDate?: string, minElectionDate?: string, electionState?: Array<string>, maxCreateDate?: string, electionDistrict?: Array<string>, sort?: string, maxElectionDate?: string, sortHideNull?: boolean, electionParty?: Array<string>, officeSought?: Array<'H' | 'S' | 'P'>, electionYear?: Array<string>, page?: number, sortNullOnly?: boolean, minCreateDate?: string, minUpdateDate?: string, perPage?: number, sortNullsLast?: boolean, options?: any) {
        return DatesApiFp(this.configuration).electionDatesGet(apiKey, electionTypeId, minPrimaryGeneralDate, maxUpdateDate, maxPrimaryGeneralDate, minElectionDate, electionState, maxCreateDate, electionDistrict, sort, maxElectionDate, sortHideNull, electionParty, officeSought, electionYear, page, sortNullOnly, minCreateDate, minUpdateDate, perPage, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  FEC election dates since 1995. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {string} [minDueDate]  The minimum date the report is due.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxUpdateDate]  The maximum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxDueDate]  The maximum date the report is due.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @param {string} [minCreateDate]  The minimum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [minUpdateDate]  The minimum date this record was last updated.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxCreateDate]  The maximum date this record was added to the system.(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DatesApi
     */
    public reportingDatesGet(apiKey: string, sortHideNull?: boolean, reportType?: Array<string>, page?: number, minDueDate?: string, maxUpdateDate?: string, maxDueDate?: string, sortNullOnly?: boolean, reportYear?: Array<number>, minCreateDate?: string, minUpdateDate?: string, maxCreateDate?: string, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
        return DatesApiFp(this.configuration).reportingDatesGet(apiKey, sortHideNull, reportType, page, minDueDate, maxUpdateDate, maxDueDate, sortNullOnly, reportYear, minCreateDate, minUpdateDate, maxCreateDate, perPage, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

}


/**
 * DebtsApi - axios parameter creator
 * @export
 */
export const DebtsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Schedule D, it shows debts and obligations owed to or by the committee that are required to be disclosed.   
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [creditorDebtorName] 
         * @param {string} [natureOfDebt] 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [maxAmountIncurred] 
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [minAmountIncurred] 
         * @param {number} [maxPaymentPeriod] 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [minPaymentPeriod] 
         * @param {string} [minImageNumber] 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleDGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, creditorDebtorName?: Array<string>, natureOfDebt?: string, lineNumber?: string, maxImageNumber?: string, sort?: string, sortHideNull?: boolean, maxAmountIncurred?: number, maxAmount?: string, minAmountIncurred?: number, maxPaymentPeriod?: number, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minPaymentPeriod?: number, minImageNumber?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleDGet.');
            }
            const localVarPath = `/schedules/schedule_d/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (creditorDebtorName) {
                localVarQueryParameter['creditor_debtor_name'] = creditorDebtorName;
            }

            if (natureOfDebt !== undefined) {
                localVarQueryParameter['nature_of_debt'] = natureOfDebt;
            }

            if (lineNumber !== undefined) {
                localVarQueryParameter['line_number'] = lineNumber;
            }

            if (maxImageNumber !== undefined) {
                localVarQueryParameter['max_image_number'] = maxImageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxAmountIncurred !== undefined) {
                localVarQueryParameter['max_amount_incurred'] = maxAmountIncurred;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (minAmountIncurred !== undefined) {
                localVarQueryParameter['min_amount_incurred'] = minAmountIncurred;
            }

            if (maxPaymentPeriod !== undefined) {
                localVarQueryParameter['max_payment_period'] = maxPaymentPeriod;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (minPaymentPeriod !== undefined) {
                localVarQueryParameter['min_payment_period'] = minPaymentPeriod;
            }

            if (minImageNumber !== undefined) {
                localVarQueryParameter['min_image_number'] = minImageNumber;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule D, it shows debts and obligations owed to or by the committee that are required to be disclosed.   
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleDSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleDSubIdGet.');
            }
            // verify required parameter 'subId' is not null or undefined
            if (subId === null || subId === undefined) {
                throw new RequiredError('subId','Required parameter subId was null or undefined when calling schedulesScheduleDSubIdGet.');
            }
            const localVarPath = `/schedules/schedule_d/{sub_id}/`
                .replace(`{${"sub_id"}}`, encodeURIComponent(String(subId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DebtsApi - functional programming interface
 * @export
 */
export const DebtsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  Schedule D, it shows debts and obligations owed to or by the committee that are required to be disclosed.   
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [creditorDebtorName] 
         * @param {string} [natureOfDebt] 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [maxAmountIncurred] 
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [minAmountIncurred] 
         * @param {number} [maxPaymentPeriod] 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [minPaymentPeriod] 
         * @param {string} [minImageNumber] 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleDGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, creditorDebtorName?: Array<string>, natureOfDebt?: string, lineNumber?: string, maxImageNumber?: string, sort?: string, sortHideNull?: boolean, maxAmountIncurred?: number, maxAmount?: string, minAmountIncurred?: number, maxPaymentPeriod?: number, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minPaymentPeriod?: number, minImageNumber?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponseDefault4> {
            const localVarAxiosArgs = DebtsApiAxiosParamCreator(configuration).schedulesScheduleDGet(apiKey, minAmount, maxDate, committeeId, creditorDebtorName, natureOfDebt, lineNumber, maxImageNumber, sort, sortHideNull, maxAmountIncurred, maxAmount, minAmountIncurred, maxPaymentPeriod, page, candidateId, minDate, sortNullOnly, imageNumber, perPage, minPaymentPeriod, minImageNumber, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule D, it shows debts and obligations owed to or by the committee that are required to be disclosed.   
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleDSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponseDefault4> {
            const localVarAxiosArgs = DebtsApiAxiosParamCreator(configuration).schedulesScheduleDSubIdGet(apiKey, subId, perPage, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DebtsApi - factory interface
 * @export
 */
export const DebtsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  Schedule D, it shows debts and obligations owed to or by the committee that are required to be disclosed.   
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [creditorDebtorName] 
         * @param {string} [natureOfDebt] 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [maxAmountIncurred] 
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [minAmountIncurred] 
         * @param {number} [maxPaymentPeriod] 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [minPaymentPeriod] 
         * @param {string} [minImageNumber] 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleDGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, creditorDebtorName?: Array<string>, natureOfDebt?: string, lineNumber?: string, maxImageNumber?: string, sort?: string, sortHideNull?: boolean, maxAmountIncurred?: number, maxAmount?: string, minAmountIncurred?: number, maxPaymentPeriod?: number, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minPaymentPeriod?: number, minImageNumber?: string, sortNullsLast?: boolean, options?: any) {
            return DebtsApiFp(configuration).schedulesScheduleDGet(apiKey, minAmount, maxDate, committeeId, creditorDebtorName, natureOfDebt, lineNumber, maxImageNumber, sort, sortHideNull, maxAmountIncurred, maxAmount, minAmountIncurred, maxPaymentPeriod, page, candidateId, minDate, sortNullOnly, imageNumber, perPage, minPaymentPeriod, minImageNumber, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule D, it shows debts and obligations owed to or by the committee that are required to be disclosed.   
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleDSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options?: any) {
            return DebtsApiFp(configuration).schedulesScheduleDSubIdGet(apiKey, subId, perPage, page, options)(axios, basePath);
        },
    };
};

/**
 * DebtsApi - object-oriented interface
 * @export
 * @class DebtsApi
 * @extends {BaseAPI}
 */
export class DebtsApi extends BaseAPI {
    /**
     *  Schedule D, it shows debts and obligations owed to or by the committee that are required to be disclosed.   
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {string} [maxDate] Maximum date
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<string>} [creditorDebtorName] 
     * @param {string} [natureOfDebt] 
     * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
     * @param {string} [maxImageNumber] 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [maxAmountIncurred] 
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {number} [minAmountIncurred] 
     * @param {number} [maxPaymentPeriod] 
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {string} [minDate] Minimum date
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {number} [minPaymentPeriod] 
     * @param {string} [minImageNumber] 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtsApi
     */
    public schedulesScheduleDGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, creditorDebtorName?: Array<string>, natureOfDebt?: string, lineNumber?: string, maxImageNumber?: string, sort?: string, sortHideNull?: boolean, maxAmountIncurred?: number, maxAmount?: string, minAmountIncurred?: number, maxPaymentPeriod?: number, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minPaymentPeriod?: number, minImageNumber?: string, sortNullsLast?: boolean, options?: any) {
        return DebtsApiFp(this.configuration).schedulesScheduleDGet(apiKey, minAmount, maxDate, committeeId, creditorDebtorName, natureOfDebt, lineNumber, maxImageNumber, sort, sortHideNull, maxAmountIncurred, maxAmount, minAmountIncurred, maxPaymentPeriod, page, candidateId, minDate, sortNullOnly, imageNumber, perPage, minPaymentPeriod, minImageNumber, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule D, it shows debts and obligations owed to or by the committee that are required to be disclosed.   
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} subId 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DebtsApi
     */
    public schedulesScheduleDSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options?: any) {
        return DebtsApiFp(this.configuration).schedulesScheduleDSubIdGet(apiKey, subId, perPage, page, options)(this.axios, this.basePath);
    }

}


/**
 * DisbursementsApi - axios parameter creator
 * @export
 */
export const DisbursementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. See the `disbursement_purpose` sql function within the migrations for more details. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [purpose] Disbursement purpose category
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleBByPurposeGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, purpose?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdSchedulesScheduleBByPurposeGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdSchedulesScheduleBByPurposeGet.');
            }
            const localVarPath = `/committee/{committee_id}/schedules/schedule_b/by_purpose/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (purpose) {
                localVarQueryParameter['purpose'] = purpose;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [recipientName] Name of the entity receiving the disbursement
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleBByRecipientGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, recipientName?: Array<string>, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdSchedulesScheduleBByRecipientGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdSchedulesScheduleBByRecipientGet.');
            }
            const localVarPath = `/committee/{committee_id}/schedules/schedule_b/by_recipient/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (recipientName) {
                localVarQueryParameter['recipient_name'] = recipientName;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [recipientId] The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleBByRecipientIdGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, recipientId?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdSchedulesScheduleBByRecipientIdGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdSchedulesScheduleBByRecipientIdGet.');
            }
            const localVarPath = `/committee/{committee_id}/schedules/schedule_b/by_recipient_id/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (recipientId) {
                localVarQueryParameter['recipient_id'] = recipientId;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. See the `disbursement_purpose` sql function within the migrations for more details. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [purpose] Disbursement purpose category
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBByPurposeGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, purpose?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleBByPurposeGet.');
            }
            const localVarPath = `/schedules/schedule_b/by_purpose/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (purpose) {
                localVarQueryParameter['purpose'] = purpose;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [recipientName] Name of the entity receiving the disbursement
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBByRecipientGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, recipientName?: Array<string>, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleBByRecipientGet.');
            }
            const localVarPath = `/schedules/schedule_b/by_recipient/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (recipientName) {
                localVarQueryParameter['recipient_name'] = recipientName;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [recipientId] The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBByRecipientIdGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, recipientId?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleBByRecipientIdGet.');
            }
            const localVarPath = `/schedules/schedule_b/by_recipient_id/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (recipientId) {
                localVarQueryParameter['recipient_id'] = recipientId;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [recipientCity] City of recipient
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [disbursementDescription] Description of disbursement
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [recipientState] State of recipient
         * @param {string} [minDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [maxDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBEfileGet(apiKey: string, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, page?: number, minAmount?: string, recipientState?: Array<string>, minDate?: string, maxDate?: string, imageNumber?: Array<string>, sortNullOnly?: boolean, committeeId?: Array<string>, perPage?: number, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleBEfileGet.');
            }
            const localVarPath = `/schedules/schedule_b/efile/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (recipientCity) {
                localVarQueryParameter['recipient_city'] = recipientCity;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (disbursementDescription) {
                localVarQueryParameter['disbursement_description'] = disbursementDescription;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (recipientState) {
                localVarQueryParameter['recipient_state'] = recipientState;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<string>} [disbursementPurposeCategory] Disbursement purpose category
         * @param {Array<string>} [recipientCommitteeId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lastDisbursementDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {Array<string>} [recipientName] Name of recipient
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [recipientState] State of recipient
         * @param {Array<string>} [recipientCity] City of recipient
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [disbursementDescription] Description of disbursement
         * @param {number} [lastDisbursementAmount] When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [spenderCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {string} [minImageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBGet(twoYearTransactionPeriod: number, apiKey: string, lastIndex?: number, disbursementPurposeCategory?: Array<string>, recipientCommitteeId?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lastDisbursementDate?: string, lineNumber?: string, recipientName?: Array<string>, maxImageNumber?: string, sort?: string, recipientState?: Array<string>, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, lastDisbursementAmount?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, spenderCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, minImageNumber?: string, options: any = {}): RequestArgs {
            // verify required parameter 'twoYearTransactionPeriod' is not null or undefined
            if (twoYearTransactionPeriod === null || twoYearTransactionPeriod === undefined) {
                throw new RequiredError('twoYearTransactionPeriod','Required parameter twoYearTransactionPeriod was null or undefined when calling schedulesScheduleBGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleBGet.');
            }
            const localVarPath = `/schedules/schedule_b/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (lastIndex !== undefined) {
                localVarQueryParameter['last_index'] = lastIndex;
            }

            if (disbursementPurposeCategory) {
                localVarQueryParameter['disbursement_purpose_category'] = disbursementPurposeCategory;
            }

            if (recipientCommitteeId) {
                localVarQueryParameter['recipient_committee_id'] = recipientCommitteeId;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (twoYearTransactionPeriod !== undefined) {
                localVarQueryParameter['two_year_transaction_period'] = twoYearTransactionPeriod;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (lastDisbursementDate !== undefined) {
                localVarQueryParameter['last_disbursement_date'] = (lastDisbursementDate as any instanceof Date) ?
                    (lastDisbursementDate as any).toISOString().substr(0,10) :
                    lastDisbursementDate;
            }

            if (lineNumber !== undefined) {
                localVarQueryParameter['line_number'] = lineNumber;
            }

            if (recipientName) {
                localVarQueryParameter['recipient_name'] = recipientName;
            }

            if (maxImageNumber !== undefined) {
                localVarQueryParameter['max_image_number'] = maxImageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (recipientState) {
                localVarQueryParameter['recipient_state'] = recipientState;
            }

            if (recipientCity) {
                localVarQueryParameter['recipient_city'] = recipientCity;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (disbursementDescription) {
                localVarQueryParameter['disbursement_description'] = disbursementDescription;
            }

            if (lastDisbursementAmount !== undefined) {
                localVarQueryParameter['last_disbursement_amount'] = lastDisbursementAmount;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (spenderCommitteeType) {
                localVarQueryParameter['spender_committee_type'] = spenderCommitteeType;
            }

            if (minImageNumber !== undefined) {
                localVarQueryParameter['min_image_number'] = minImageNumber;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<string>} [disbursementPurposeCategory] Disbursement purpose category
         * @param {Array<string>} [recipientCommitteeId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lastDisbursementDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {Array<string>} [recipientName] Name of recipient
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [recipientState] State of recipient
         * @param {Array<string>} [recipientCity] City of recipient
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [disbursementDescription] Description of disbursement
         * @param {number} [lastDisbursementAmount] When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [spenderCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {string} [minImageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBSubIdGet(twoYearTransactionPeriod: number, apiKey: string, subId: string, lastIndex?: number, disbursementPurposeCategory?: Array<string>, recipientCommitteeId?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lastDisbursementDate?: string, lineNumber?: string, recipientName?: Array<string>, maxImageNumber?: string, sort?: string, recipientState?: Array<string>, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, lastDisbursementAmount?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, spenderCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, minImageNumber?: string, options: any = {}): RequestArgs {
            // verify required parameter 'twoYearTransactionPeriod' is not null or undefined
            if (twoYearTransactionPeriod === null || twoYearTransactionPeriod === undefined) {
                throw new RequiredError('twoYearTransactionPeriod','Required parameter twoYearTransactionPeriod was null or undefined when calling schedulesScheduleBSubIdGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleBSubIdGet.');
            }
            // verify required parameter 'subId' is not null or undefined
            if (subId === null || subId === undefined) {
                throw new RequiredError('subId','Required parameter subId was null or undefined when calling schedulesScheduleBSubIdGet.');
            }
            const localVarPath = `/schedules/schedule_b/{sub_id}/`
                .replace(`{${"sub_id"}}`, encodeURIComponent(String(subId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (lastIndex !== undefined) {
                localVarQueryParameter['last_index'] = lastIndex;
            }

            if (disbursementPurposeCategory) {
                localVarQueryParameter['disbursement_purpose_category'] = disbursementPurposeCategory;
            }

            if (recipientCommitteeId) {
                localVarQueryParameter['recipient_committee_id'] = recipientCommitteeId;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (twoYearTransactionPeriod !== undefined) {
                localVarQueryParameter['two_year_transaction_period'] = twoYearTransactionPeriod;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (lastDisbursementDate !== undefined) {
                localVarQueryParameter['last_disbursement_date'] = (lastDisbursementDate as any instanceof Date) ?
                    (lastDisbursementDate as any).toISOString().substr(0,10) :
                    lastDisbursementDate;
            }

            if (lineNumber !== undefined) {
                localVarQueryParameter['line_number'] = lineNumber;
            }

            if (recipientName) {
                localVarQueryParameter['recipient_name'] = recipientName;
            }

            if (maxImageNumber !== undefined) {
                localVarQueryParameter['max_image_number'] = maxImageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (recipientState) {
                localVarQueryParameter['recipient_state'] = recipientState;
            }

            if (recipientCity) {
                localVarQueryParameter['recipient_city'] = recipientCity;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (disbursementDescription) {
                localVarQueryParameter['disbursement_description'] = disbursementDescription;
            }

            if (lastDisbursementAmount !== undefined) {
                localVarQueryParameter['last_disbursement_amount'] = lastDisbursementAmount;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (spenderCommitteeType) {
                localVarQueryParameter['spender_committee_type'] = spenderCommitteeType;
            }

            if (minImageNumber !== undefined) {
                localVarQueryParameter['min_image_number'] = minImageNumber;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DisbursementsApi - functional programming interface
 * @export
 */
export const DisbursementsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. See the `disbursement_purpose` sql function within the migrations for more details. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [purpose] Disbursement purpose category
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleBByPurposeGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, purpose?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleBByPurposePage> {
            const localVarAxiosArgs = DisbursementsApiAxiosParamCreator(configuration).committeeCommitteeIdSchedulesScheduleBByPurposeGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, purpose, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [recipientName] Name of the entity receiving the disbursement
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleBByRecipientGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, recipientName?: Array<string>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleBByRecipientPage> {
            const localVarAxiosArgs = DisbursementsApiAxiosParamCreator(configuration).committeeCommitteeIdSchedulesScheduleBByRecipientGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, perPage, recipientName, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [recipientId] The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleBByRecipientIdGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, recipientId?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleBByRecipientIDPage> {
            const localVarAxiosArgs = DisbursementsApiAxiosParamCreator(configuration).committeeCommitteeIdSchedulesScheduleBByRecipientIdGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, recipientId, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. See the `disbursement_purpose` sql function within the migrations for more details. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [purpose] Disbursement purpose category
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBByPurposeGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, purpose?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleBByPurposePage> {
            const localVarAxiosArgs = DisbursementsApiAxiosParamCreator(configuration).schedulesScheduleBByPurposeGet(apiKey, sort, sortHideNull, page, sortNullOnly, purpose, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [recipientName] Name of the entity receiving the disbursement
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBByRecipientGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, recipientName?: Array<string>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleBByRecipientPage> {
            const localVarAxiosArgs = DisbursementsApiAxiosParamCreator(configuration).schedulesScheduleBByRecipientGet(apiKey, sort, sortHideNull, page, sortNullOnly, perPage, recipientName, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [recipientId] The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBByRecipientIdGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, recipientId?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleBByRecipientIDPage> {
            const localVarAxiosArgs = DisbursementsApiAxiosParamCreator(configuration).schedulesScheduleBByRecipientIdGet(apiKey, sort, sortHideNull, page, sortNullOnly, recipientId, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [recipientCity] City of recipient
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [disbursementDescription] Description of disbursement
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [recipientState] State of recipient
         * @param {string} [minDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [maxDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBEfileGet(apiKey: string, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, page?: number, minAmount?: string, recipientState?: Array<string>, minDate?: string, maxDate?: string, imageNumber?: Array<string>, sortNullOnly?: boolean, committeeId?: Array<string>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleBEfilePage> {
            const localVarAxiosArgs = DisbursementsApiAxiosParamCreator(configuration).schedulesScheduleBEfileGet(apiKey, recipientCity, sortHideNull, maxAmount, disbursementDescription, page, minAmount, recipientState, minDate, maxDate, imageNumber, sortNullOnly, committeeId, perPage, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<string>} [disbursementPurposeCategory] Disbursement purpose category
         * @param {Array<string>} [recipientCommitteeId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lastDisbursementDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {Array<string>} [recipientName] Name of recipient
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [recipientState] State of recipient
         * @param {Array<string>} [recipientCity] City of recipient
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [disbursementDescription] Description of disbursement
         * @param {number} [lastDisbursementAmount] When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [spenderCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {string} [minImageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBGet(twoYearTransactionPeriod: number, apiKey: string, lastIndex?: number, disbursementPurposeCategory?: Array<string>, recipientCommitteeId?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lastDisbursementDate?: string, lineNumber?: string, recipientName?: Array<string>, maxImageNumber?: string, sort?: string, recipientState?: Array<string>, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, lastDisbursementAmount?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, spenderCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, minImageNumber?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleBPage> {
            const localVarAxiosArgs = DisbursementsApiAxiosParamCreator(configuration).schedulesScheduleBGet(twoYearTransactionPeriod, apiKey, lastIndex, disbursementPurposeCategory, recipientCommitteeId, minAmount, maxDate, committeeId, lastDisbursementDate, lineNumber, recipientName, maxImageNumber, sort, recipientState, recipientCity, sortHideNull, maxAmount, disbursementDescription, lastDisbursementAmount, minDate, sortNullOnly, imageNumber, perPage, spenderCommitteeType, minImageNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<string>} [disbursementPurposeCategory] Disbursement purpose category
         * @param {Array<string>} [recipientCommitteeId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lastDisbursementDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {Array<string>} [recipientName] Name of recipient
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [recipientState] State of recipient
         * @param {Array<string>} [recipientCity] City of recipient
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [disbursementDescription] Description of disbursement
         * @param {number} [lastDisbursementAmount] When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [spenderCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {string} [minImageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBSubIdGet(twoYearTransactionPeriod: number, apiKey: string, subId: string, lastIndex?: number, disbursementPurposeCategory?: Array<string>, recipientCommitteeId?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lastDisbursementDate?: string, lineNumber?: string, recipientName?: Array<string>, maxImageNumber?: string, sort?: string, recipientState?: Array<string>, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, lastDisbursementAmount?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, spenderCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, minImageNumber?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleBPage> {
            const localVarAxiosArgs = DisbursementsApiAxiosParamCreator(configuration).schedulesScheduleBSubIdGet(twoYearTransactionPeriod, apiKey, subId, lastIndex, disbursementPurposeCategory, recipientCommitteeId, minAmount, maxDate, committeeId, lastDisbursementDate, lineNumber, recipientName, maxImageNumber, sort, recipientState, recipientCity, sortHideNull, maxAmount, disbursementDescription, lastDisbursementAmount, minDate, sortNullOnly, imageNumber, perPage, spenderCommitteeType, minImageNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DisbursementsApi - factory interface
 * @export
 */
export const DisbursementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. See the `disbursement_purpose` sql function within the migrations for more details. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [purpose] Disbursement purpose category
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleBByPurposeGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, purpose?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return DisbursementsApiFp(configuration).committeeCommitteeIdSchedulesScheduleBByPurposeGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, purpose, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [recipientName] Name of the entity receiving the disbursement
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleBByRecipientGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, recipientName?: Array<string>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return DisbursementsApiFp(configuration).committeeCommitteeIdSchedulesScheduleBByRecipientGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, perPage, recipientName, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [recipientId] The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleBByRecipientIdGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, recipientId?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return DisbursementsApiFp(configuration).committeeCommitteeIdSchedulesScheduleBByRecipientIdGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, recipientId, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. See the `disbursement_purpose` sql function within the migrations for more details. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [purpose] Disbursement purpose category
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBByPurposeGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, purpose?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return DisbursementsApiFp(configuration).schedulesScheduleBByPurposeGet(apiKey, sort, sortHideNull, page, sortNullOnly, purpose, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [recipientName] Name of the entity receiving the disbursement
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBByRecipientGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, recipientName?: Array<string>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return DisbursementsApiFp(configuration).schedulesScheduleBByRecipientGet(apiKey, sort, sortHideNull, page, sortNullOnly, perPage, recipientName, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [recipientId] The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBByRecipientIdGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, recipientId?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return DisbursementsApiFp(configuration).schedulesScheduleBByRecipientIdGet(apiKey, sort, sortHideNull, page, sortNullOnly, recipientId, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [recipientCity] City of recipient
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [disbursementDescription] Description of disbursement
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [recipientState] State of recipient
         * @param {string} [minDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [maxDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBEfileGet(apiKey: string, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, page?: number, minAmount?: string, recipientState?: Array<string>, minDate?: string, maxDate?: string, imageNumber?: Array<string>, sortNullOnly?: boolean, committeeId?: Array<string>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
            return DisbursementsApiFp(configuration).schedulesScheduleBEfileGet(apiKey, recipientCity, sortHideNull, maxAmount, disbursementDescription, page, minAmount, recipientState, minDate, maxDate, imageNumber, sortNullOnly, committeeId, perPage, sort, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<string>} [disbursementPurposeCategory] Disbursement purpose category
         * @param {Array<string>} [recipientCommitteeId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lastDisbursementDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {Array<string>} [recipientName] Name of recipient
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [recipientState] State of recipient
         * @param {Array<string>} [recipientCity] City of recipient
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [disbursementDescription] Description of disbursement
         * @param {number} [lastDisbursementAmount] When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [spenderCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {string} [minImageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBGet(twoYearTransactionPeriod: number, apiKey: string, lastIndex?: number, disbursementPurposeCategory?: Array<string>, recipientCommitteeId?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lastDisbursementDate?: string, lineNumber?: string, recipientName?: Array<string>, maxImageNumber?: string, sort?: string, recipientState?: Array<string>, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, lastDisbursementAmount?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, spenderCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, minImageNumber?: string, options?: any) {
            return DisbursementsApiFp(configuration).schedulesScheduleBGet(twoYearTransactionPeriod, apiKey, lastIndex, disbursementPurposeCategory, recipientCommitteeId, minAmount, maxDate, committeeId, lastDisbursementDate, lineNumber, recipientName, maxImageNumber, sort, recipientState, recipientCity, sortHideNull, maxAmount, disbursementDescription, lastDisbursementAmount, minDate, sortNullOnly, imageNumber, perPage, spenderCommitteeType, minImageNumber, options)(axios, basePath);
        },
        /**
         *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<string>} [disbursementPurposeCategory] Disbursement purpose category
         * @param {Array<string>} [recipientCommitteeId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lastDisbursementDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {Array<string>} [recipientName] Name of recipient
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [recipientState] State of recipient
         * @param {Array<string>} [recipientCity] City of recipient
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [disbursementDescription] Description of disbursement
         * @param {number} [lastDisbursementAmount] When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [spenderCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {string} [minImageNumber] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleBSubIdGet(twoYearTransactionPeriod: number, apiKey: string, subId: string, lastIndex?: number, disbursementPurposeCategory?: Array<string>, recipientCommitteeId?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lastDisbursementDate?: string, lineNumber?: string, recipientName?: Array<string>, maxImageNumber?: string, sort?: string, recipientState?: Array<string>, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, lastDisbursementAmount?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, spenderCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, minImageNumber?: string, options?: any) {
            return DisbursementsApiFp(configuration).schedulesScheduleBSubIdGet(twoYearTransactionPeriod, apiKey, subId, lastIndex, disbursementPurposeCategory, recipientCommitteeId, minAmount, maxDate, committeeId, lastDisbursementDate, lineNumber, recipientName, maxImageNumber, sort, recipientState, recipientCity, sortHideNull, maxAmount, disbursementDescription, lastDisbursementAmount, minDate, sortNullOnly, imageNumber, perPage, spenderCommitteeType, minImageNumber, options)(axios, basePath);
        },
    };
};

/**
 * DisbursementsApi - object-oriented interface
 * @export
 * @class DisbursementsApi
 * @extends {BaseAPI}
 */
export class DisbursementsApi extends BaseAPI {
    /**
     *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. See the `disbursement_purpose` sql function within the migrations for more details. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [purpose] Disbursement purpose category
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbursementsApi
     */
    public committeeCommitteeIdSchedulesScheduleBByPurposeGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, purpose?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return DisbursementsApiFp(this.configuration).committeeCommitteeIdSchedulesScheduleBByPurposeGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, purpose, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [recipientName] Name of the entity receiving the disbursement
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbursementsApi
     */
    public committeeCommitteeIdSchedulesScheduleBByRecipientGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, recipientName?: Array<string>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return DisbursementsApiFp(this.configuration).committeeCommitteeIdSchedulesScheduleBByRecipientGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, perPage, recipientName, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [recipientId] The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbursementsApi
     */
    public committeeCommitteeIdSchedulesScheduleBByRecipientIdGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, recipientId?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return DisbursementsApiFp(this.configuration).committeeCommitteeIdSchedulesScheduleBByRecipientIdGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, recipientId, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. See the `disbursement_purpose` sql function within the migrations for more details. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [purpose] Disbursement purpose category
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbursementsApi
     */
    public schedulesScheduleBByPurposeGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, purpose?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return DisbursementsApiFp(this.configuration).schedulesScheduleBByPurposeGet(apiKey, sort, sortHideNull, page, sortNullOnly, purpose, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule B disbursements aggregated by recipient name. To avoid double counting, memoed items are not included. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [recipientName] Name of the entity receiving the disbursement
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbursementsApi
     */
    public schedulesScheduleBByRecipientGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, recipientName?: Array<string>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return DisbursementsApiFp(this.configuration).schedulesScheduleBByRecipientGet(apiKey, sort, sortHideNull, page, sortNullOnly, perPage, recipientName, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule B disbursements aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [recipientId] The FEC identifier should be represented here if the entity receiving the disbursement is registered with the FEC.
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbursementsApi
     */
    public schedulesScheduleBByRecipientIdGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, recipientId?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return DisbursementsApiFp(this.configuration).schedulesScheduleBByRecipientIdGet(apiKey, sort, sortHideNull, page, sortNullOnly, recipientId, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<string>} [recipientCity] City of recipient
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {Array<string>} [disbursementDescription] Description of disbursement
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {string} [minAmount] Filter for all amounts less than a value.
     * @param {Array<string>} [recipientState] State of recipient
     * @param {string} [minDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [maxDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbursementsApi
     */
    public schedulesScheduleBEfileGet(apiKey: string, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, page?: number, minAmount?: string, recipientState?: Array<string>, minDate?: string, maxDate?: string, imageNumber?: Array<string>, sortNullOnly?: boolean, committeeId?: Array<string>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
        return DisbursementsApiFp(this.configuration).schedulesScheduleBEfileGet(apiKey, recipientCity, sortHideNull, maxAmount, disbursementDescription, page, minAmount, recipientState, minDate, maxDate, imageNumber, sortNullOnly, committeeId, perPage, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {number} [lastIndex] Index of last result from previous page
     * @param {Array<string>} [disbursementPurposeCategory] Disbursement purpose category
     * @param {Array<string>} [recipientCommitteeId] The FEC identifier should be represented here if the contributor is registered with the FEC.
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {string} [maxDate] Maximum date
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [lastDisbursementDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
     * @param {Array<string>} [recipientName] Name of recipient
     * @param {string} [maxImageNumber] 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {Array<string>} [recipientState] State of recipient
     * @param {Array<string>} [recipientCity] City of recipient
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {Array<string>} [disbursementDescription] Description of disbursement
     * @param {number} [lastDisbursementAmount] When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [minDate] Minimum date
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [spenderCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {string} [minImageNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbursementsApi
     */
    public schedulesScheduleBGet(twoYearTransactionPeriod: number, apiKey: string, lastIndex?: number, disbursementPurposeCategory?: Array<string>, recipientCommitteeId?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lastDisbursementDate?: string, lineNumber?: string, recipientName?: Array<string>, maxImageNumber?: string, sort?: string, recipientState?: Array<string>, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, lastDisbursementAmount?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, spenderCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, minImageNumber?: string, options?: any) {
        return DisbursementsApiFp(this.configuration).schedulesScheduleBGet(twoYearTransactionPeriod, apiKey, lastIndex, disbursementPurposeCategory, recipientCommitteeId, minAmount, maxDate, committeeId, lastDisbursementDate, lineNumber, recipientName, maxImageNumber, sort, recipientState, recipientCity, sortHideNull, maxAmount, disbursementDescription, lastDisbursementAmount, minDate, sortNullOnly, imageNumber, perPage, spenderCommitteeType, minImageNumber, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} subId 
     * @param {number} [lastIndex] Index of last result from previous page
     * @param {Array<string>} [disbursementPurposeCategory] Disbursement purpose category
     * @param {Array<string>} [recipientCommitteeId] The FEC identifier should be represented here if the contributor is registered with the FEC.
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {string} [maxDate] Maximum date
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [lastDisbursementDate] When sorting by &#x60;disbursement_date&#x60;, this is populated with the &#x60;disbursement_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
     * @param {Array<string>} [recipientName] Name of recipient
     * @param {string} [maxImageNumber] 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {Array<string>} [recipientState] State of recipient
     * @param {Array<string>} [recipientCity] City of recipient
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {Array<string>} [disbursementDescription] Description of disbursement
     * @param {number} [lastDisbursementAmount] When sorting by &#x60;disbursement_amount&#x60;, this is populated with the &#x60;disbursement_amount&#x60; of the last result.  However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [minDate] Minimum date
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [spenderCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {string} [minImageNumber] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DisbursementsApi
     */
    public schedulesScheduleBSubIdGet(twoYearTransactionPeriod: number, apiKey: string, subId: string, lastIndex?: number, disbursementPurposeCategory?: Array<string>, recipientCommitteeId?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lastDisbursementDate?: string, lineNumber?: string, recipientName?: Array<string>, maxImageNumber?: string, sort?: string, recipientState?: Array<string>, recipientCity?: Array<string>, sortHideNull?: boolean, maxAmount?: string, disbursementDescription?: Array<string>, lastDisbursementAmount?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, spenderCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, minImageNumber?: string, options?: any) {
        return DisbursementsApiFp(this.configuration).schedulesScheduleBSubIdGet(twoYearTransactionPeriod, apiKey, subId, lastIndex, disbursementPurposeCategory, recipientCommitteeId, minAmount, maxDate, committeeId, lastDisbursementDate, lineNumber, recipientName, maxImageNumber, sort, recipientState, recipientCity, sortHideNull, maxAmount, disbursementDescription, lastDisbursementAmount, minDate, sortNullOnly, imageNumber, perPage, spenderCommitteeType, minImageNumber, options)(this.axios, this.basePath);
    }

}


/**
 * EfilingApi - axios parameter creator
 * @export
 */
export const EfilingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Basic information about electronic files coming into the FEC, posted as they are received.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileFilingsGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling efileFilingsGet.');
            }
            const localVarPath = `/efile/filings/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (minReceiptDate !== undefined) {
                localVarQueryParameter['min_receipt_date'] = (minReceiptDate as any instanceof Date) ?
                    (minReceiptDate as any).toISOString().substr(0,10) :
                    minReceiptDate;
            }

            if (maxReceiptDate !== undefined) {
                localVarQueryParameter['max_receipt_date'] = (maxReceiptDate as any instanceof Date) ?
                    (maxReceiptDate as any).toISOString().substr(0,10) :
                    maxReceiptDate;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (fileNumber) {
                localVarQueryParameter['file_number'] = fileNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileReportsHouseSenateGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling efileReportsHouseSenateGet.');
            }
            const localVarPath = `/efile/reports/house-senate/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (minReceiptDate !== undefined) {
                localVarQueryParameter['min_receipt_date'] = (minReceiptDate as any instanceof Date) ?
                    (minReceiptDate as any).toISOString().substr(0,10) :
                    minReceiptDate;
            }

            if (maxReceiptDate !== undefined) {
                localVarQueryParameter['max_receipt_date'] = (maxReceiptDate as any instanceof Date) ?
                    (maxReceiptDate as any).toISOString().substr(0,10) :
                    maxReceiptDate;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (fileNumber) {
                localVarQueryParameter['file_number'] = fileNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileReportsPacPartyGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling efileReportsPacPartyGet.');
            }
            const localVarPath = `/efile/reports/pac-party/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (minReceiptDate !== undefined) {
                localVarQueryParameter['min_receipt_date'] = (minReceiptDate as any instanceof Date) ?
                    (minReceiptDate as any).toISOString().substr(0,10) :
                    minReceiptDate;
            }

            if (maxReceiptDate !== undefined) {
                localVarQueryParameter['max_receipt_date'] = (maxReceiptDate as any instanceof Date) ?
                    (maxReceiptDate as any).toISOString().substr(0,10) :
                    maxReceiptDate;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (fileNumber) {
                localVarQueryParameter['file_number'] = fileNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileReportsPresidentialGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling efileReportsPresidentialGet.');
            }
            const localVarPath = `/efile/reports/presidential/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (minReceiptDate !== undefined) {
                localVarQueryParameter['min_receipt_date'] = (minReceiptDate as any instanceof Date) ?
                    (minReceiptDate as any).toISOString().substr(0,10) :
                    minReceiptDate;
            }

            if (maxReceiptDate !== undefined) {
                localVarQueryParameter['max_receipt_date'] = (maxReceiptDate as any instanceof Date) ?
                    (maxReceiptDate as any).toISOString().substr(0,10) :
                    maxReceiptDate;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (fileNumber) {
                localVarQueryParameter['file_number'] = fileNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EfilingApi - functional programming interface
 * @export
 */
export const EfilingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Basic information about electronic files coming into the FEC, posted as they are received.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileFilingsGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EFilingsPage> {
            const localVarAxiosArgs = EfilingApiAxiosParamCreator(configuration).efileFilingsGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileReportsHouseSenateGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseF3FilingPage> {
            const localVarAxiosArgs = EfilingApiAxiosParamCreator(configuration).efileReportsHouseSenateGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileReportsPacPartyGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseF3XFilingPage> {
            const localVarAxiosArgs = EfilingApiAxiosParamCreator(configuration).efileReportsPacPartyGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileReportsPresidentialGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaseF3PFilingPage> {
            const localVarAxiosArgs = EfilingApiAxiosParamCreator(configuration).efileReportsPresidentialGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EfilingApi - factory interface
 * @export
 */
export const EfilingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Basic information about electronic files coming into the FEC, posted as they are received.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileFilingsGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
            return EfilingApiFp(configuration).efileFilingsGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileReportsHouseSenateGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
            return EfilingApiFp(configuration).efileReportsHouseSenateGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileReportsPacPartyGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
            return EfilingApiFp(configuration).efileReportsPacPartyGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        efileReportsPresidentialGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
            return EfilingApiFp(configuration).efileReportsPresidentialGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options)(axios, basePath);
        },
    };
};

/**
 * EfilingApi - object-oriented interface
 * @export
 * @class EfilingApi
 * @extends {BaseAPI}
 */
export class EfilingApi extends BaseAPI {
    /**
     * Basic information about electronic files coming into the FEC, posted as they are received.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<number>} [fileNumber] Filing ID number
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EfilingApi
     */
    public efileFilingsGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
        return EfilingApiFp(this.configuration).efileFilingsGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<number>} [fileNumber] Filing ID number
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EfilingApi
     */
    public efileReportsHouseSenateGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
        return EfilingApiFp(this.configuration).efileReportsHouseSenateGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<number>} [fileNumber] Filing ID number
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EfilingApi
     */
    public efileReportsPacPartyGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
        return EfilingApiFp(this.configuration).efileReportsPacPartyGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<number>} [fileNumber] Filing ID number
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EfilingApi
     */
    public efileReportsPresidentialGet(apiKey: string, minReceiptDate?: string, maxReceiptDate?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, fileNumber?: Array<number>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
        return EfilingApiFp(this.configuration).efileReportsPresidentialGet(apiKey, minReceiptDate, maxReceiptDate, sortHideNull, page, sortNullOnly, committeeId, fileNumber, perPage, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

}


/**
 * ElectioneeringApi - axios parameter creator
 * @export
 */
export const ElectioneeringApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Electioneering costs aggregated by candidate.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdElectioneeringByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdElectioneeringByCandidateGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdElectioneeringByCandidateGet.');
            }
            const localVarPath = `/committee/{committee_id}/electioneering/by_candidate/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (district !== undefined) {
                localVarQueryParameter['district'] = district;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office !== undefined) {
                localVarQueryParameter['office'] = office;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Electioneering costs aggregated by candidate.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electioneeringByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling electioneeringByCandidateGet.');
            }
            const localVarPath = `/electioneering/by_candidate/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (district !== undefined) {
                localVarQueryParameter['district'] = district;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office !== undefined) {
                localVarQueryParameter['office'] = office;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions:  _The communication refers to a clearly identified federal candidate._  _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._  _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._ 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [minDate] Minimum disbursement date
         * @param {string} [description] 
         * @param {string} [maxDate] Maximum disbursement date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electioneeringGet(apiKey: string, lastIndex?: number, sortHideNull?: boolean, maxAmount?: string, page?: number, candidateId?: Array<string>, minAmount?: string, minDate?: string, description?: string, maxDate?: string, sortNullOnly?: boolean, reportYear?: Array<number>, committeeId?: Array<string>, perPage?: number, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling electioneeringGet.');
            }
            const localVarPath = `/electioneering/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (lastIndex !== undefined) {
                localVarQueryParameter['last_index'] = lastIndex;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (reportYear) {
                localVarQueryParameter['report_year'] = reportYear;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ElectioneeringApi - functional programming interface
 * @export
 */
export const ElectioneeringApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Electioneering costs aggregated by candidate.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdElectioneeringByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectioneeringByCandidatePage> {
            const localVarAxiosArgs = ElectioneeringApiAxiosParamCreator(configuration).committeeCommitteeIdElectioneeringByCandidateGet(apiKey, committeeId, sort, sortHideNull, district, page, candidateId, sortNullOnly, cycle, state, perPage, office, electionFull, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Electioneering costs aggregated by candidate.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electioneeringByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectioneeringByCandidatePage> {
            const localVarAxiosArgs = ElectioneeringApiAxiosParamCreator(configuration).electioneeringByCandidateGet(apiKey, sort, sortHideNull, district, page, candidateId, sortNullOnly, cycle, state, perPage, office, electionFull, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions:  _The communication refers to a clearly identified federal candidate._  _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._  _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._ 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [minDate] Minimum disbursement date
         * @param {string} [description] 
         * @param {string} [maxDate] Maximum disbursement date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electioneeringGet(apiKey: string, lastIndex?: number, sortHideNull?: boolean, maxAmount?: string, page?: number, candidateId?: Array<string>, minAmount?: string, minDate?: string, description?: string, maxDate?: string, sortNullOnly?: boolean, reportYear?: Array<number>, committeeId?: Array<string>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectioneeringPage> {
            const localVarAxiosArgs = ElectioneeringApiAxiosParamCreator(configuration).electioneeringGet(apiKey, lastIndex, sortHideNull, maxAmount, page, candidateId, minAmount, minDate, description, maxDate, sortNullOnly, reportYear, committeeId, perPage, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ElectioneeringApi - factory interface
 * @export
 */
export const ElectioneeringApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Electioneering costs aggregated by candidate.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdElectioneeringByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
            return ElectioneeringApiFp(configuration).committeeCommitteeIdElectioneeringByCandidateGet(apiKey, committeeId, sort, sortHideNull, district, page, candidateId, sortNullOnly, cycle, state, perPage, office, electionFull, sortNullsLast, options)(axios, basePath);
        },
        /**
         * Electioneering costs aggregated by candidate.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electioneeringByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
            return ElectioneeringApiFp(configuration).electioneeringByCandidateGet(apiKey, sort, sortHideNull, district, page, candidateId, sortNullOnly, cycle, state, perPage, office, electionFull, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions:  _The communication refers to a clearly identified federal candidate._  _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._  _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._ 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [minDate] Minimum disbursement date
         * @param {string} [description] 
         * @param {string} [maxDate] Maximum disbursement date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electioneeringGet(apiKey: string, lastIndex?: number, sortHideNull?: boolean, maxAmount?: string, page?: number, candidateId?: Array<string>, minAmount?: string, minDate?: string, description?: string, maxDate?: string, sortNullOnly?: boolean, reportYear?: Array<number>, committeeId?: Array<string>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
            return ElectioneeringApiFp(configuration).electioneeringGet(apiKey, lastIndex, sortHideNull, maxAmount, page, candidateId, minAmount, minDate, description, maxDate, sortNullOnly, reportYear, committeeId, perPage, sort, sortNullsLast, options)(axios, basePath);
        },
    };
};

/**
 * ElectioneeringApi - object-oriented interface
 * @export
 * @class ElectioneeringApi
 * @extends {BaseAPI}
 */
export class ElectioneeringApi extends BaseAPI {
    /**
     * Electioneering costs aggregated by candidate.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [state] US state or territory where a candidate runs for office
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElectioneeringApi
     */
    public committeeCommitteeIdElectioneeringByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
        return ElectioneeringApiFp(this.configuration).committeeCommitteeIdElectioneeringByCandidateGet(apiKey, committeeId, sort, sortHideNull, district, page, candidateId, sortNullOnly, cycle, state, perPage, office, electionFull, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     * Electioneering costs aggregated by candidate.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [state] US state or territory where a candidate runs for office
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElectioneeringApi
     */
    public electioneeringByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
        return ElectioneeringApiFp(this.configuration).electioneeringByCandidateGet(apiKey, sort, sortHideNull, district, page, candidateId, sortNullOnly, cycle, state, perPage, office, electionFull, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions:  _The communication refers to a clearly identified federal candidate._  _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._  _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._ 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {number} [lastIndex] Index of last result from previous page
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {string} [minDate] Minimum disbursement date
     * @param {string} [description] 
     * @param {string} [maxDate] Maximum disbursement date
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ElectioneeringApi
     */
    public electioneeringGet(apiKey: string, lastIndex?: number, sortHideNull?: boolean, maxAmount?: string, page?: number, candidateId?: Array<string>, minAmount?: string, minDate?: string, description?: string, maxDate?: string, sortNullOnly?: boolean, reportYear?: Array<number>, committeeId?: Array<string>, perPage?: number, sort?: string, sortNullsLast?: boolean, options?: any) {
        return ElectioneeringApiFp(this.configuration).electioneeringGet(apiKey, lastIndex, sortHideNull, maxAmount, page, candidateId, minAmount, minDate, description, maxDate, sortNullOnly, reportYear, committeeId, perPage, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

}


/**
 * FilerResourcesApi - axios parameter creator
 * @export
 */
export const FilerResourcesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Use this endpoint to look up the RAD Analyst for a committee.  The mission of the Reports Analysis Division (RAD) is to ensure that campaigns and political committees file timely and accurate reports that fully disclose their financial activities.  RAD is responsible for reviewing statements and financial reports filed by political committees participating in federal elections, providing assistance and guidance to the committees to properly file their reports, and for taking appropriate action to ensure compliance with the Federal Election Campaign Act (FECA). 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [name] Name of RAD analyst
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [minAssignmentUpdateDate] Filter results for assignment updates made after this date
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [analystShortId] Short ID of RAD analyst
         * @param {Array<number>} [analystId] ID of RAD analyst
         * @param {Array<string>} [email] Email of RAD analyst
         * @param {Array<string>} [title] Title of RAD analyst
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [maxAssignmentUpdateDate] Filter results for assignment updates made before this date
         * @param {Array<number>} [telephoneExt] Telephone extension of RAD analyst
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radAnalystGet(apiKey: string, name?: Array<string>, sortHideNull?: boolean, minAssignmentUpdateDate?: string, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, analystShortId?: Array<number>, analystId?: Array<number>, email?: Array<string>, title?: Array<string>, perPage?: number, maxAssignmentUpdateDate?: string, telephoneExt?: Array<number>, sort?: string, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling radAnalystGet.');
            }
            const localVarPath = `/rad-analyst/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (name) {
                localVarQueryParameter['name'] = name;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (minAssignmentUpdateDate !== undefined) {
                localVarQueryParameter['min_assignment_update_date'] = (minAssignmentUpdateDate as any instanceof Date) ?
                    (minAssignmentUpdateDate as any).toISOString().substr(0,10) :
                    minAssignmentUpdateDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (analystShortId) {
                localVarQueryParameter['analyst_short_id'] = analystShortId;
            }

            if (analystId) {
                localVarQueryParameter['analyst_id'] = analystId;
            }

            if (email) {
                localVarQueryParameter['email'] = email;
            }

            if (title) {
                localVarQueryParameter['title'] = title;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (maxAssignmentUpdateDate !== undefined) {
                localVarQueryParameter['max_assignment_update_date'] = (maxAssignmentUpdateDate as any instanceof Date) ?
                    (maxAssignmentUpdateDate as any).toISOString().substr(0,10) :
                    maxAssignmentUpdateDate;
            }

            if (telephoneExt) {
                localVarQueryParameter['telephone_ext'] = telephoneExt;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  State laws and procedures govern elections for state or local offices as well as how candidates appear on election ballots. Contact the appropriate state election office for more information. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} state  Enter a state (Ex: AK, TX, VA etc..) to find the local election offices contact information.  
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateElectionOfficeGet(apiKey: string, state: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling stateElectionOfficeGet.');
            }
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new RequiredError('state','Required parameter state was null or undefined when calling stateElectionOfficeGet.');
            }
            const localVarPath = `/state-election-office/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilerResourcesApi - functional programming interface
 * @export
 */
export const FilerResourcesApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  Use this endpoint to look up the RAD Analyst for a committee.  The mission of the Reports Analysis Division (RAD) is to ensure that campaigns and political committees file timely and accurate reports that fully disclose their financial activities.  RAD is responsible for reviewing statements and financial reports filed by political committees participating in federal elections, providing assistance and guidance to the committees to properly file their reports, and for taking appropriate action to ensure compliance with the Federal Election Campaign Act (FECA). 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [name] Name of RAD analyst
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [minAssignmentUpdateDate] Filter results for assignment updates made after this date
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [analystShortId] Short ID of RAD analyst
         * @param {Array<number>} [analystId] ID of RAD analyst
         * @param {Array<string>} [email] Email of RAD analyst
         * @param {Array<string>} [title] Title of RAD analyst
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [maxAssignmentUpdateDate] Filter results for assignment updates made before this date
         * @param {Array<number>} [telephoneExt] Telephone extension of RAD analyst
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radAnalystGet(apiKey: string, name?: Array<string>, sortHideNull?: boolean, minAssignmentUpdateDate?: string, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, analystShortId?: Array<number>, analystId?: Array<number>, email?: Array<string>, title?: Array<string>, perPage?: number, maxAssignmentUpdateDate?: string, telephoneExt?: Array<number>, sort?: string, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RadAnalystPage> {
            const localVarAxiosArgs = FilerResourcesApiAxiosParamCreator(configuration).radAnalystGet(apiKey, name, sortHideNull, minAssignmentUpdateDate, page, sortNullOnly, committeeId, analystShortId, analystId, email, title, perPage, maxAssignmentUpdateDate, telephoneExt, sort, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  State laws and procedures govern elections for state or local offices as well as how candidates appear on election ballots. Contact the appropriate state election office for more information. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} state  Enter a state (Ex: AK, TX, VA etc..) to find the local election offices contact information.  
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateElectionOfficeGet(apiKey: string, state: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StateElectionOfficeInfoPage> {
            const localVarAxiosArgs = FilerResourcesApiAxiosParamCreator(configuration).stateElectionOfficeGet(apiKey, state, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FilerResourcesApi - factory interface
 * @export
 */
export const FilerResourcesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  Use this endpoint to look up the RAD Analyst for a committee.  The mission of the Reports Analysis Division (RAD) is to ensure that campaigns and political committees file timely and accurate reports that fully disclose their financial activities.  RAD is responsible for reviewing statements and financial reports filed by political committees participating in federal elections, providing assistance and guidance to the committees to properly file their reports, and for taking appropriate action to ensure compliance with the Federal Election Campaign Act (FECA). 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [name] Name of RAD analyst
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [minAssignmentUpdateDate] Filter results for assignment updates made after this date
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<number>} [analystShortId] Short ID of RAD analyst
         * @param {Array<number>} [analystId] ID of RAD analyst
         * @param {Array<string>} [email] Email of RAD analyst
         * @param {Array<string>} [title] Title of RAD analyst
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [maxAssignmentUpdateDate] Filter results for assignment updates made before this date
         * @param {Array<number>} [telephoneExt] Telephone extension of RAD analyst
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        radAnalystGet(apiKey: string, name?: Array<string>, sortHideNull?: boolean, minAssignmentUpdateDate?: string, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, analystShortId?: Array<number>, analystId?: Array<number>, email?: Array<string>, title?: Array<string>, perPage?: number, maxAssignmentUpdateDate?: string, telephoneExt?: Array<number>, sort?: string, sortNullsLast?: boolean, options?: any) {
            return FilerResourcesApiFp(configuration).radAnalystGet(apiKey, name, sortHideNull, minAssignmentUpdateDate, page, sortNullOnly, committeeId, analystShortId, analystId, email, title, perPage, maxAssignmentUpdateDate, telephoneExt, sort, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  State laws and procedures govern elections for state or local offices as well as how candidates appear on election ballots. Contact the appropriate state election office for more information. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} state  Enter a state (Ex: AK, TX, VA etc..) to find the local election offices contact information.  
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stateElectionOfficeGet(apiKey: string, state: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, sort?: string, options?: any) {
            return FilerResourcesApiFp(configuration).stateElectionOfficeGet(apiKey, state, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, sort, options)(axios, basePath);
        },
    };
};

/**
 * FilerResourcesApi - object-oriented interface
 * @export
 * @class FilerResourcesApi
 * @extends {BaseAPI}
 */
export class FilerResourcesApi extends BaseAPI {
    /**
     *  Use this endpoint to look up the RAD Analyst for a committee.  The mission of the Reports Analysis Division (RAD) is to ensure that campaigns and political committees file timely and accurate reports that fully disclose their financial activities.  RAD is responsible for reviewing statements and financial reports filed by political committees participating in federal elections, providing assistance and guidance to the committees to properly file their reports, and for taking appropriate action to ensure compliance with the Federal Election Campaign Act (FECA). 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<string>} [name] Name of RAD analyst
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [minAssignmentUpdateDate] Filter results for assignment updates made after this date
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<number>} [analystShortId] Short ID of RAD analyst
     * @param {Array<number>} [analystId] ID of RAD analyst
     * @param {Array<string>} [email] Email of RAD analyst
     * @param {Array<string>} [title] Title of RAD analyst
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [maxAssignmentUpdateDate] Filter results for assignment updates made before this date
     * @param {Array<number>} [telephoneExt] Telephone extension of RAD analyst
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilerResourcesApi
     */
    public radAnalystGet(apiKey: string, name?: Array<string>, sortHideNull?: boolean, minAssignmentUpdateDate?: string, page?: number, sortNullOnly?: boolean, committeeId?: Array<string>, analystShortId?: Array<number>, analystId?: Array<number>, email?: Array<string>, title?: Array<string>, perPage?: number, maxAssignmentUpdateDate?: string, telephoneExt?: Array<number>, sort?: string, sortNullsLast?: boolean, options?: any) {
        return FilerResourcesApiFp(this.configuration).radAnalystGet(apiKey, name, sortHideNull, minAssignmentUpdateDate, page, sortNullOnly, committeeId, analystShortId, analystId, email, title, perPage, maxAssignmentUpdateDate, telephoneExt, sort, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  State laws and procedures govern elections for state or local offices as well as how candidates appear on election ballots. Contact the appropriate state election office for more information. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} state  Enter a state (Ex: AK, TX, VA etc..) to find the local election offices contact information.  
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilerResourcesApi
     */
    public stateElectionOfficeGet(apiKey: string, state: string, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, sort?: string, options?: any) {
        return FilerResourcesApiFp(this.configuration).stateElectionOfficeGet(apiKey, state, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, sort, options)(this.axios, this.basePath);
    }

}


/**
 * FilingsApi - axios parameter creator
 * @export
 */
export const FilingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [minReceiptDate] Selects all items received by FEC after this date
         * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
         * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
         * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
         * @param {boolean} [isAmended] Filing has been amended
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdFilingsGet(apiKey: string, candidateId: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling candidateCandidateIdFilingsGet.');
            }
            // verify required parameter 'candidateId' is not null or undefined
            if (candidateId === null || candidateId === undefined) {
                throw new RequiredError('candidateId','Required parameter candidateId was null or undefined when calling candidateCandidateIdFilingsGet.');
            }
            const localVarPath = `/candidate/{candidate_id}/filings/`
                .replace(`{${"candidate_id"}}`, encodeURIComponent(String(candidateId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (filerType !== undefined) {
                localVarQueryParameter['filer_type'] = filerType;
            }

            if (minReceiptDate !== undefined) {
                localVarQueryParameter['min_receipt_date'] = (minReceiptDate as any instanceof Date) ?
                    (minReceiptDate as any).toISOString().substr(0,10) :
                    minReceiptDate;
            }

            if (maxReceiptDate !== undefined) {
                localVarQueryParameter['max_receipt_date'] = (maxReceiptDate as any instanceof Date) ?
                    (maxReceiptDate as any).toISOString().substr(0,10) :
                    maxReceiptDate;
            }

            if (reportType) {
                localVarQueryParameter['report_type'] = reportType;
            }

            if (district) {
                localVarQueryParameter['district'] = district;
            }

            if (documentType) {
                localVarQueryParameter['document_type'] = documentType;
            }

            if (requestType) {
                localVarQueryParameter['request_type'] = requestType;
            }

            if (committeeType !== undefined) {
                localVarQueryParameter['committee_type'] = committeeType;
            }

            if (reportYear) {
                localVarQueryParameter['report_year'] = reportYear;
            }

            if (primaryGeneralIndicator) {
                localVarQueryParameter['primary_general_indicator'] = primaryGeneralIndicator;
            }

            if (party) {
                localVarQueryParameter['party'] = party;
            }

            if (fileNumber) {
                localVarQueryParameter['file_number'] = fileNumber;
            }

            if (beginningImageNumber) {
                localVarQueryParameter['beginning_image_number'] = beginningImageNumber;
            }

            if (amendmentIndicator) {
                localVarQueryParameter['amendment_indicator'] = amendmentIndicator;
            }

            if (formType) {
                localVarQueryParameter['form_type'] = formType;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (mostRecent !== undefined) {
                localVarQueryParameter['most_recent'] = mostRecent;
            }

            if (isAmended !== undefined) {
                localVarQueryParameter['is_amended'] = isAmended;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office) {
                localVarQueryParameter['office'] = office;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [minReceiptDate] Selects all items received by FEC after this date
         * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
         * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
         * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
         * @param {boolean} [isAmended] Filing has been amended
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdFilingsGet(apiKey: string, committeeId: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdFilingsGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdFilingsGet.');
            }
            const localVarPath = `/committee/{committee_id}/filings/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (filerType !== undefined) {
                localVarQueryParameter['filer_type'] = filerType;
            }

            if (minReceiptDate !== undefined) {
                localVarQueryParameter['min_receipt_date'] = (minReceiptDate as any instanceof Date) ?
                    (minReceiptDate as any).toISOString().substr(0,10) :
                    minReceiptDate;
            }

            if (maxReceiptDate !== undefined) {
                localVarQueryParameter['max_receipt_date'] = (maxReceiptDate as any instanceof Date) ?
                    (maxReceiptDate as any).toISOString().substr(0,10) :
                    maxReceiptDate;
            }

            if (reportType) {
                localVarQueryParameter['report_type'] = reportType;
            }

            if (district) {
                localVarQueryParameter['district'] = district;
            }

            if (documentType) {
                localVarQueryParameter['document_type'] = documentType;
            }

            if (requestType) {
                localVarQueryParameter['request_type'] = requestType;
            }

            if (committeeType !== undefined) {
                localVarQueryParameter['committee_type'] = committeeType;
            }

            if (reportYear) {
                localVarQueryParameter['report_year'] = reportYear;
            }

            if (primaryGeneralIndicator) {
                localVarQueryParameter['primary_general_indicator'] = primaryGeneralIndicator;
            }

            if (party) {
                localVarQueryParameter['party'] = party;
            }

            if (fileNumber) {
                localVarQueryParameter['file_number'] = fileNumber;
            }

            if (beginningImageNumber) {
                localVarQueryParameter['beginning_image_number'] = beginningImageNumber;
            }

            if (amendmentIndicator) {
                localVarQueryParameter['amendment_indicator'] = amendmentIndicator;
            }

            if (formType) {
                localVarQueryParameter['form_type'] = formType;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (mostRecent !== undefined) {
                localVarQueryParameter['most_recent'] = mostRecent;
            }

            if (isAmended !== undefined) {
                localVarQueryParameter['is_amended'] = isAmended;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office) {
                localVarQueryParameter['office'] = office;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [minReceiptDate] Selects all items received by FEC after this date
         * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
         * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
         * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
         * @param {boolean} [isAmended] Filing has been amended
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingsGet(apiKey: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, committeeId?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling filingsGet.');
            }
            const localVarPath = `/filings/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (filerType !== undefined) {
                localVarQueryParameter['filer_type'] = filerType;
            }

            if (minReceiptDate !== undefined) {
                localVarQueryParameter['min_receipt_date'] = (minReceiptDate as any instanceof Date) ?
                    (minReceiptDate as any).toISOString().substr(0,10) :
                    minReceiptDate;
            }

            if (maxReceiptDate !== undefined) {
                localVarQueryParameter['max_receipt_date'] = (maxReceiptDate as any instanceof Date) ?
                    (maxReceiptDate as any).toISOString().substr(0,10) :
                    maxReceiptDate;
            }

            if (reportType) {
                localVarQueryParameter['report_type'] = reportType;
            }

            if (district) {
                localVarQueryParameter['district'] = district;
            }

            if (documentType) {
                localVarQueryParameter['document_type'] = documentType;
            }

            if (requestType) {
                localVarQueryParameter['request_type'] = requestType;
            }

            if (committeeType !== undefined) {
                localVarQueryParameter['committee_type'] = committeeType;
            }

            if (reportYear) {
                localVarQueryParameter['report_year'] = reportYear;
            }

            if (primaryGeneralIndicator) {
                localVarQueryParameter['primary_general_indicator'] = primaryGeneralIndicator;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (party) {
                localVarQueryParameter['party'] = party;
            }

            if (fileNumber) {
                localVarQueryParameter['file_number'] = fileNumber;
            }

            if (beginningImageNumber) {
                localVarQueryParameter['beginning_image_number'] = beginningImageNumber;
            }

            if (amendmentIndicator) {
                localVarQueryParameter['amendment_indicator'] = amendmentIndicator;
            }

            if (formType) {
                localVarQueryParameter['form_type'] = formType;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (mostRecent !== undefined) {
                localVarQueryParameter['most_recent'] = mostRecent;
            }

            if (isAmended !== undefined) {
                localVarQueryParameter['is_amended'] = isAmended;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office) {
                localVarQueryParameter['office'] = office;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  The Operations log contains details of each report loaded into the database. It is primarily used as status check to determine when all of the data processes, from initial entry through review are complete. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<'0' | '1'>} [statusNum]  Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<string>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {string} [minCoverageEndDate]  Ending date of the reporting period after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [minTransactionDataCompleteDate]  Select all filings processed completely after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [maxCoverageEndDate]  Ending date of the reporting period before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [maxTransactionDataCompleteDate]  Select all filings processed completely before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [candidateCommitteeId]  A unique identifier of the registered filer. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        operationsLogGet(apiKey: string, statusNum?: Array<'0' | '1'>, minReceiptDate?: string, reportType?: Array<string>, maxReceiptDate?: string, reportYear?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<string>, formType?: Array<string>, minCoverageEndDate?: string, sort?: Array<string>, minTransactionDataCompleteDate?: string, sortHideNull?: boolean, page?: number, maxCoverageEndDate?: string, sortNullOnly?: boolean, maxTransactionDataCompleteDate?: string, candidateCommitteeId?: Array<string>, perPage?: number, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling operationsLogGet.');
            }
            const localVarPath = `/operations-log/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (statusNum) {
                localVarQueryParameter['status_num'] = statusNum;
            }

            if (minReceiptDate !== undefined) {
                localVarQueryParameter['min_receipt_date'] = (minReceiptDate as any instanceof Date) ?
                    (minReceiptDate as any).toISOString().substr(0,10) :
                    minReceiptDate;
            }

            if (reportType) {
                localVarQueryParameter['report_type'] = reportType;
            }

            if (maxReceiptDate !== undefined) {
                localVarQueryParameter['max_receipt_date'] = (maxReceiptDate as any instanceof Date) ?
                    (maxReceiptDate as any).toISOString().substr(0,10) :
                    maxReceiptDate;
            }

            if (reportYear) {
                localVarQueryParameter['report_year'] = reportYear;
            }

            if (beginningImageNumber) {
                localVarQueryParameter['beginning_image_number'] = beginningImageNumber;
            }

            if (amendmentIndicator) {
                localVarQueryParameter['amendment_indicator'] = amendmentIndicator;
            }

            if (formType) {
                localVarQueryParameter['form_type'] = formType;
            }

            if (minCoverageEndDate !== undefined) {
                localVarQueryParameter['min_coverage_end_date'] = (minCoverageEndDate as any instanceof Date) ?
                    (minCoverageEndDate as any).toISOString().substr(0,10) :
                    minCoverageEndDate;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (minTransactionDataCompleteDate !== undefined) {
                localVarQueryParameter['min_transaction_data_complete_date'] = (minTransactionDataCompleteDate as any instanceof Date) ?
                    (minTransactionDataCompleteDate as any).toISOString().substr(0,10) :
                    minTransactionDataCompleteDate;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (maxCoverageEndDate !== undefined) {
                localVarQueryParameter['max_coverage_end_date'] = (maxCoverageEndDate as any instanceof Date) ?
                    (maxCoverageEndDate as any).toISOString().substr(0,10) :
                    maxCoverageEndDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (maxTransactionDataCompleteDate !== undefined) {
                localVarQueryParameter['max_transaction_data_complete_date'] = (maxTransactionDataCompleteDate as any instanceof Date) ?
                    (maxTransactionDataCompleteDate as any).toISOString().substr(0,10) :
                    maxTransactionDataCompleteDate;
            }

            if (candidateCommitteeId) {
                localVarQueryParameter['candidate_committee_id'] = candidateCommitteeId;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilingsApi - functional programming interface
 * @export
 */
export const FilingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [minReceiptDate] Selects all items received by FEC after this date
         * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
         * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
         * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
         * @param {boolean} [isAmended] Filing has been amended
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdFilingsGet(apiKey: string, candidateId: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilingsPage> {
            const localVarAxiosArgs = FilingsApiAxiosParamCreator(configuration).candidateCandidateIdFilingsGet(apiKey, candidateId, filerType, minReceiptDate, maxReceiptDate, reportType, district, documentType, requestType, committeeType, reportYear, primaryGeneralIndicator, party, fileNumber, beginningImageNumber, amendmentIndicator, formType, sort, sortHideNull, mostRecent, isAmended, page, sortNullOnly, state, perPage, office, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [minReceiptDate] Selects all items received by FEC after this date
         * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
         * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
         * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
         * @param {boolean} [isAmended] Filing has been amended
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdFilingsGet(apiKey: string, committeeId: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilingsPage> {
            const localVarAxiosArgs = FilingsApiAxiosParamCreator(configuration).committeeCommitteeIdFilingsGet(apiKey, committeeId, filerType, minReceiptDate, maxReceiptDate, reportType, district, documentType, requestType, committeeType, reportYear, primaryGeneralIndicator, party, fileNumber, beginningImageNumber, amendmentIndicator, formType, sort, sortHideNull, mostRecent, isAmended, page, sortNullOnly, state, perPage, office, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [minReceiptDate] Selects all items received by FEC after this date
         * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
         * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
         * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
         * @param {boolean} [isAmended] Filing has been amended
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingsGet(apiKey: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, committeeId?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FilingsPage> {
            const localVarAxiosArgs = FilingsApiAxiosParamCreator(configuration).filingsGet(apiKey, filerType, minReceiptDate, maxReceiptDate, reportType, district, documentType, requestType, committeeType, reportYear, primaryGeneralIndicator, committeeId, party, fileNumber, beginningImageNumber, amendmentIndicator, formType, sort, sortHideNull, mostRecent, isAmended, page, candidateId, sortNullOnly, state, perPage, office, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  The Operations log contains details of each report loaded into the database. It is primarily used as status check to determine when all of the data processes, from initial entry through review are complete. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<'0' | '1'>} [statusNum]  Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<string>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {string} [minCoverageEndDate]  Ending date of the reporting period after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [minTransactionDataCompleteDate]  Select all filings processed completely after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [maxCoverageEndDate]  Ending date of the reporting period before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [maxTransactionDataCompleteDate]  Select all filings processed completely before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [candidateCommitteeId]  A unique identifier of the registered filer. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        operationsLogGet(apiKey: string, statusNum?: Array<'0' | '1'>, minReceiptDate?: string, reportType?: Array<string>, maxReceiptDate?: string, reportYear?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<string>, formType?: Array<string>, minCoverageEndDate?: string, sort?: Array<string>, minTransactionDataCompleteDate?: string, sortHideNull?: boolean, page?: number, maxCoverageEndDate?: string, sortNullOnly?: boolean, maxTransactionDataCompleteDate?: string, candidateCommitteeId?: Array<string>, perPage?: number, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationsLogPage> {
            const localVarAxiosArgs = FilingsApiAxiosParamCreator(configuration).operationsLogGet(apiKey, statusNum, minReceiptDate, reportType, maxReceiptDate, reportYear, beginningImageNumber, amendmentIndicator, formType, minCoverageEndDate, sort, minTransactionDataCompleteDate, sortHideNull, page, maxCoverageEndDate, sortNullOnly, maxTransactionDataCompleteDate, candidateCommitteeId, perPage, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FilingsApi - factory interface
 * @export
 */
export const FilingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [minReceiptDate] Selects all items received by FEC after this date
         * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
         * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
         * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
         * @param {boolean} [isAmended] Filing has been amended
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        candidateCandidateIdFilingsGet(apiKey: string, candidateId: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return FilingsApiFp(configuration).candidateCandidateIdFilingsGet(apiKey, candidateId, filerType, minReceiptDate, maxReceiptDate, reportType, district, documentType, requestType, committeeType, reportYear, primaryGeneralIndicator, party, fileNumber, beginningImageNumber, amendmentIndicator, formType, sort, sortHideNull, mostRecent, isAmended, page, sortNullOnly, state, perPage, office, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [minReceiptDate] Selects all items received by FEC after this date
         * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
         * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
         * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
         * @param {boolean} [isAmended] Filing has been amended
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdFilingsGet(apiKey: string, committeeId: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return FilingsApiFp(configuration).committeeCommitteeIdFilingsGet(apiKey, committeeId, filerType, minReceiptDate, maxReceiptDate, reportType, district, documentType, requestType, committeeType, reportYear, primaryGeneralIndicator, party, fileNumber, beginningImageNumber, amendmentIndicator, formType, sort, sortHideNull, mostRecent, isAmended, page, sortNullOnly, state, perPage, office, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [minReceiptDate] Selects all items received by FEC after this date
         * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
         * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
         * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {Array<number>} [fileNumber] Filing ID number
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
         * @param {boolean} [isAmended] Filing has been amended
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filingsGet(apiKey: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, committeeId?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return FilingsApiFp(configuration).filingsGet(apiKey, filerType, minReceiptDate, maxReceiptDate, reportType, district, documentType, requestType, committeeType, reportYear, primaryGeneralIndicator, committeeId, party, fileNumber, beginningImageNumber, amendmentIndicator, formType, sort, sortHideNull, mostRecent, isAmended, page, candidateId, sortNullOnly, state, perPage, office, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  The Operations log contains details of each report loaded into the database. It is primarily used as status check to determine when all of the data processes, from initial entry through review are complete. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<'0' | '1'>} [statusNum]  Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified. 
         * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
         * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<string>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {string} [minCoverageEndDate]  Ending date of the reporting period after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [minTransactionDataCompleteDate]  Select all filings processed completely after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [maxCoverageEndDate]  Ending date of the reporting period before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [maxTransactionDataCompleteDate]  Select all filings processed completely before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {Array<string>} [candidateCommitteeId]  A unique identifier of the registered filer. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        operationsLogGet(apiKey: string, statusNum?: Array<'0' | '1'>, minReceiptDate?: string, reportType?: Array<string>, maxReceiptDate?: string, reportYear?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<string>, formType?: Array<string>, minCoverageEndDate?: string, sort?: Array<string>, minTransactionDataCompleteDate?: string, sortHideNull?: boolean, page?: number, maxCoverageEndDate?: string, sortNullOnly?: boolean, maxTransactionDataCompleteDate?: string, candidateCommitteeId?: Array<string>, perPage?: number, sortNullsLast?: boolean, options?: any) {
            return FilingsApiFp(configuration).operationsLogGet(apiKey, statusNum, minReceiptDate, reportType, maxReceiptDate, reportYear, beginningImageNumber, amendmentIndicator, formType, minCoverageEndDate, sort, minTransactionDataCompleteDate, sortHideNull, page, maxCoverageEndDate, sortNullOnly, maxTransactionDataCompleteDate, candidateCommitteeId, perPage, sortNullsLast, options)(axios, basePath);
        },
    };
};

/**
 * FilingsApi - object-oriented interface
 * @export
 * @class FilingsApi
 * @extends {BaseAPI}
 */
export class FilingsApi extends BaseAPI {
    /**
     *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
     * @param {string} [minReceiptDate] Selects all items received by FEC after this date
     * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
     * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
     * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
     * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
     * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Array<number>} [fileNumber] Filing ID number
     * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
     * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
     * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
     * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
     * @param {boolean} [isAmended] Filing has been amended
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [state] US state or territory where a candidate runs for office
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilingsApi
     */
    public candidateCandidateIdFilingsGet(apiKey: string, candidateId: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return FilingsApiFp(this.configuration).candidateCandidateIdFilingsGet(apiKey, candidateId, filerType, minReceiptDate, maxReceiptDate, reportType, district, documentType, requestType, committeeType, reportYear, primaryGeneralIndicator, party, fileNumber, beginningImageNumber, amendmentIndicator, formType, sort, sortHideNull, mostRecent, isAmended, page, sortNullOnly, state, perPage, office, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
     * @param {string} [minReceiptDate] Selects all items received by FEC after this date
     * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
     * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
     * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
     * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
     * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Array<number>} [fileNumber] Filing ID number
     * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
     * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
     * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
     * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
     * @param {boolean} [isAmended] Filing has been amended
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [state] US state or territory where a candidate runs for office
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilingsApi
     */
    public committeeCommitteeIdFilingsGet(apiKey: string, committeeId: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return FilingsApiFp(this.configuration).committeeCommitteeIdFilingsGet(apiKey, committeeId, filerType, minReceiptDate, maxReceiptDate, reportType, district, documentType, requestType, committeeType, reportYear, primaryGeneralIndicator, party, fileNumber, beginningImageNumber, amendmentIndicator, formType, sort, sortHideNull, mostRecent, isAmended, page, sortNullOnly, state, perPage, office, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
     * @param {string} [minReceiptDate] Selects all items received by FEC after this date
     * @param {string} [maxReceiptDate] Selects all items received by FEC before this date
     * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {Array<string>} [documentType]  The type of document for documents other than reports:     - 2 24 Hour Contribution Notice     - 4 48 Hour Contribution Notice     - A Debt Settlement Statement     - B Acknowledgment of Receipt of Debt Settlement Statement     - C RFAI: Debt Settlement First Notice     - D Commission Debt Settlement Review     - E Commission Response TO Debt Settlement Request     - F Administrative Termination     - G Debt Settlement Plan Amendment     - H Disavowal Notice     - I Disavowal Response     - J Conduit Report     - K Termination Approval     - L Repeat Non-Filer Notice     - M Filing Frequency Change Notice     - N Paper Amendment to Electronic Report     - O Acknowledgment of Filing Frequency Change     - S RFAI: Debt Settlement Second     - T Miscellaneous Report TO FEC     - V Repeat Violation Notice (441A OR 441B)     - P Notice of Paper Filing     - R F3L Filing Frequency Change Notice     - Q Acknowledgment of F3L Filing Frequency Change     - U Unregistered Committee Notice 
     * @param {Array<string>} [requestType] Requests for additional information (RFAIs) sent to filers. The request type is based on the type of document filed:     - 1 Statement of Organization     - 2 Report of Receipts and Expenditures (Form 3 and 3X)     - 3 Second Notice - Reports     - 4 Request for Additional Information     - 5 Informational - Reports     - 6 Second Notice - Statement of Organization     - 7 Failure to File     - 8 From Public Disclosure     - 9 From Multi Candidate Status 
     * @param {string} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @param {Array<string>} [primaryGeneralIndicator] Primary, general or special election indicator
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<string>} [party] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {Array<number>} [fileNumber] Filing ID number
     * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
     * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
     * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
     * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {boolean} [mostRecent] Filing is either new or is the most-recently filed amendment
     * @param {boolean} [isAmended] Filing has been amended
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [state] US state or territory where a candidate runs for office
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'' | 'H' | 'S' | 'P'>} [office] Federal office candidate runs for: H, S or P
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilingsApi
     */
    public filingsGet(apiKey: string, filerType?: 'e-file' | 'paper', minReceiptDate?: string, maxReceiptDate?: string, reportType?: Array<string>, district?: Array<string>, documentType?: Array<string>, requestType?: Array<string>, committeeType?: string, reportYear?: Array<number>, primaryGeneralIndicator?: Array<string>, committeeId?: Array<string>, party?: Array<string>, fileNumber?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, formType?: Array<string>, sort?: Array<string>, sortHideNull?: boolean, mostRecent?: boolean, isAmended?: boolean, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, state?: Array<string>, perPage?: number, office?: Array<'' | 'H' | 'S' | 'P'>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return FilingsApiFp(this.configuration).filingsGet(apiKey, filerType, minReceiptDate, maxReceiptDate, reportType, district, documentType, requestType, committeeType, reportYear, primaryGeneralIndicator, committeeId, party, fileNumber, beginningImageNumber, amendmentIndicator, formType, sort, sortHideNull, mostRecent, isAmended, page, candidateId, sortNullOnly, state, perPage, office, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  The Operations log contains details of each report loaded into the database. It is primarily used as status check to determine when all of the data processes, from initial entry through review are complete. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<'0' | '1'>} [statusNum]  Status of the transactional report.     -0- Transaction is entered            into the system.           But not verified.     -1- Transaction is verified. 
     * @param {string} [minReceiptDate]  Selects all filings received after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Array<string>} [reportType] Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND     - 90S Post Inaugural Supplement     - 90D Post Inaugural     - 48  48 Hour Notification     - 24  24 Hour Notification     - M7S July Monthly/Semi-Annual     - MSA Monthly Semi-Annual (MY)     - MYS Monthly Year End/Semi-Annual     - Q2S July Quarterly/Semi-Annual     - QSA Quarterly Semi-Annual (MY)     - QYS Quarterly Year End/Semi-Annual     - QYE Quarterly Semi-Annual (YE)     - QMS Quarterly Mid-Year/ Semi-Annual     - MSY Monthly Semi-Annual (YE) 
     * @param {string} [maxReceiptDate]  Selects all filings received before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Array<number>} [reportYear]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
     * @param {Array<string>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
     * @param {Array<string>} [formType]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
     * @param {string} [minCoverageEndDate]  Ending date of the reporting period after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
     * @param {string} [minTransactionDataCompleteDate]  Select all filings processed completely after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {string} [maxCoverageEndDate]  Ending date of the reporting period before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [maxTransactionDataCompleteDate]  Select all filings processed completely before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {Array<string>} [candidateCommitteeId]  A unique identifier of the registered filer. 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilingsApi
     */
    public operationsLogGet(apiKey: string, statusNum?: Array<'0' | '1'>, minReceiptDate?: string, reportType?: Array<string>, maxReceiptDate?: string, reportYear?: Array<number>, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<string>, formType?: Array<string>, minCoverageEndDate?: string, sort?: Array<string>, minTransactionDataCompleteDate?: string, sortHideNull?: boolean, page?: number, maxCoverageEndDate?: string, sortNullOnly?: boolean, maxTransactionDataCompleteDate?: string, candidateCommitteeId?: Array<string>, perPage?: number, sortNullsLast?: boolean, options?: any) {
        return FilingsApiFp(this.configuration).operationsLogGet(apiKey, statusNum, minReceiptDate, reportType, maxReceiptDate, reportYear, beginningImageNumber, amendmentIndicator, formType, minCoverageEndDate, sort, minTransactionDataCompleteDate, sortHideNull, page, maxCoverageEndDate, sortNullOnly, maxTransactionDataCompleteDate, candidateCommitteeId, perPage, sortNullsLast, options)(this.axios, this.basePath);
    }

}


/**
 * FinancialApi - axios parameter creator
 * @export
 */
export const FinancialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee\'s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [maxTotalContributions] Filter for all amounts less than a value.
         * @param {Array<string>} [reportType] Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND 
         * @param {string} [maxDebtsOwedExpenditures] Filter for all amounts less than a value.
         * @param {string} [minPartyCoordinatedExpenditures] Filter for all amounts greater than a value.
         * @param {string} [minDebtsOwedAmount] Filter for all amounts greater than a value.
         * @param {string} [minIndependentExpenditures] Filter for all amounts greater than a value.
         * @param {Array<number>} [year]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {string} [maxDisbursementsAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [maxPartyCoordinatedExpenditures] Filter for all amounts less than a value.
         * @param {string} [maxReceiptsAmount] Filter for all amounts less than a value.
         * @param {string} [minReceiptsAmount] Filter for all amounts greater than a value.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxCashOnHandEndPeriodAmount] Filter for all amounts less than a value.
         * @param {boolean} [isAmended]  Report has been amended 
         * @param {Array<string>} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minDisbursementsAmount] Filter for all amounts greater than a value.
         * @param {string} [minTotalContributions] Filter for all amounts greater than a value.
         * @param {string} [minCashOnHandEndPeriodAmount] Filter for all amounts greater than a value.
         * @param {string} [maxIndependentExpenditures] Filter for all amounts less than a value.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdReportsGet(apiKey: string, committeeId: string, maxTotalContributions?: string, reportType?: Array<string>, maxDebtsOwedExpenditures?: string, minPartyCoordinatedExpenditures?: string, minDebtsOwedAmount?: string, minIndependentExpenditures?: string, year?: Array<number>, maxDisbursementsAmount?: string, beginningImageNumber?: Array<string>, sort?: Array<string>, maxPartyCoordinatedExpenditures?: string, maxReceiptsAmount?: string, minReceiptsAmount?: string, sortHideNull?: boolean, maxCashOnHandEndPeriodAmount?: string, isAmended?: boolean, type?: Array<string>, page?: number, candidateId?: string, sortNullOnly?: boolean, minDisbursementsAmount?: string, minTotalContributions?: string, minCashOnHandEndPeriodAmount?: string, maxIndependentExpenditures?: string, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdReportsGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdReportsGet.');
            }
            const localVarPath = `/committee/{committee_id}/reports/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (maxTotalContributions !== undefined) {
                localVarQueryParameter['max_total_contributions'] = maxTotalContributions;
            }

            if (reportType) {
                localVarQueryParameter['report_type'] = reportType;
            }

            if (maxDebtsOwedExpenditures !== undefined) {
                localVarQueryParameter['max_debts_owed_expenditures'] = maxDebtsOwedExpenditures;
            }

            if (minPartyCoordinatedExpenditures !== undefined) {
                localVarQueryParameter['min_party_coordinated_expenditures'] = minPartyCoordinatedExpenditures;
            }

            if (minDebtsOwedAmount !== undefined) {
                localVarQueryParameter['min_debts_owed_amount'] = minDebtsOwedAmount;
            }

            if (minIndependentExpenditures !== undefined) {
                localVarQueryParameter['min_independent_expenditures'] = minIndependentExpenditures;
            }

            if (year) {
                localVarQueryParameter['year'] = year;
            }

            if (maxDisbursementsAmount !== undefined) {
                localVarQueryParameter['max_disbursements_amount'] = maxDisbursementsAmount;
            }

            if (beginningImageNumber) {
                localVarQueryParameter['beginning_image_number'] = beginningImageNumber;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (maxPartyCoordinatedExpenditures !== undefined) {
                localVarQueryParameter['max_party_coordinated_expenditures'] = maxPartyCoordinatedExpenditures;
            }

            if (maxReceiptsAmount !== undefined) {
                localVarQueryParameter['max_receipts_amount'] = maxReceiptsAmount;
            }

            if (minReceiptsAmount !== undefined) {
                localVarQueryParameter['min_receipts_amount'] = minReceiptsAmount;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxCashOnHandEndPeriodAmount !== undefined) {
                localVarQueryParameter['max_cash_on_hand_end_period_amount'] = maxCashOnHandEndPeriodAmount;
            }

            if (isAmended !== undefined) {
                localVarQueryParameter['is_amended'] = isAmended;
            }

            if (type) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId !== undefined) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (minDisbursementsAmount !== undefined) {
                localVarQueryParameter['min_disbursements_amount'] = minDisbursementsAmount;
            }

            if (minTotalContributions !== undefined) {
                localVarQueryParameter['min_total_contributions'] = minTotalContributions;
            }

            if (minCashOnHandEndPeriodAmount !== undefined) {
                localVarQueryParameter['min_cash_on_hand_end_period_amount'] = minCashOnHandEndPeriodAmount;
            }

            if (maxIndependentExpenditures !== undefined) {
                localVarQueryParameter['max_independent_expenditures'] = maxIndependentExpenditures;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdTotalsGet(apiKey: string, committeeId: string, sortHideNull?: boolean, type?: string, page?: number, designation?: string, sortNullOnly?: boolean, sortNullsLast?: boolean, perPage?: number, cycle?: Array<number>, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdTotalsGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdTotalsGet.');
            }
            const localVarPath = `/committee/{committee_id}/totals/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (designation !== undefined) {
                localVarQueryParameter['designation'] = designation;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Look at the top-level financial information for all candidates running for the same office.  Choose a 2-year cycle, and `house`, `senate` or `presidential`.  If you are looking for a Senate seat, you will need to select the state using a two-letter abbreviation.  House races require state and a two-digit district number.  Since this endpoint reflects financial information, it will only have candidates once they file financial reporting forms. Query the `/candidates` endpoint to see an up to date list of all the candidates that filed to run for a particular seat. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {'house' | 'senate' | 'president'} office Federal office candidate runs for: H, S or P
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionsGet(apiKey: string, cycle: number, office: 'house' | 'senate' | 'president', sort?: string, sortHideNull?: boolean, district?: string, page?: number, sortNullOnly?: boolean, state?: string, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling electionsGet.');
            }
            // verify required parameter 'cycle' is not null or undefined
            if (cycle === null || cycle === undefined) {
                throw new RequiredError('cycle','Required parameter cycle was null or undefined when calling electionsGet.');
            }
            // verify required parameter 'office' is not null or undefined
            if (office === null || office === undefined) {
                throw new RequiredError('office','Required parameter office was null or undefined when calling electionsGet.');
            }
            const localVarPath = `/elections/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (district !== undefined) {
                localVarQueryParameter['district'] = district;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (cycle !== undefined) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office !== undefined) {
                localVarQueryParameter['office'] = office;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  List elections by cycle, office, state, and district. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [zip] Zip code
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'house' | 'senate' | 'president'>} [office] 
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionsSearchGet(apiKey: string, sortHideNull?: boolean, district?: Array<string>, page?: number, sortNullOnly?: boolean, zip?: Array<number>, state?: Array<string>, sortNullsLast?: boolean, perPage?: number, office?: Array<'house' | 'senate' | 'president'>, cycle?: Array<number>, sort?: Array<string>, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling electionsSearchGet.');
            }
            const localVarPath = `/elections/search/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (district) {
                localVarQueryParameter['district'] = district;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (zip) {
                localVarQueryParameter['zip'] = zip;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office) {
                localVarQueryParameter['office'] = office;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  List elections by cycle, office, state, and district. 
         * @param {'house' | 'senate' | 'president'} office Federal office candidate runs for: H, S or P
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionsSummaryGet(office: 'house' | 'senate' | 'president', cycle: number, apiKey: string, district?: string, electionFull?: boolean, state?: string, options: any = {}): RequestArgs {
            // verify required parameter 'office' is not null or undefined
            if (office === null || office === undefined) {
                throw new RequiredError('office','Required parameter office was null or undefined when calling electionsSummaryGet.');
            }
            // verify required parameter 'cycle' is not null or undefined
            if (cycle === null || cycle === undefined) {
                throw new RequiredError('cycle','Required parameter cycle was null or undefined when calling electionsSummaryGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling electionsSummaryGet.');
            }
            const localVarPath = `/elections/summary/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (district !== undefined) {
                localVarQueryParameter['district'] = district;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (office !== undefined) {
                localVarQueryParameter['office'] = office;
            }

            if (cycle !== undefined) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee\'s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {'presidential' | 'pac-party' | 'house-senate' | 'ie-only'} committeeType House, Senate, presidential, independent expenditure only
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [maxTotalContributions] Filter for all amounts less than a value.
         * @param {string} [minReceiptDate]  Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxDebtsOwedExpenditures] Filter for all amounts less than a value.
         * @param {string} [minPartyCoordinatedExpenditures] Filter for all amounts greater than a value.
         * @param {Array<number>} [year]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {string} [minIndependentExpenditures] Filter for all amounts greater than a value.
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [maxDisbursementsAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {string} [maxReceiptsAmount] Filter for all amounts less than a value.
         * @param {string} [maxPartyCoordinatedExpenditures] Filter for all amounts less than a value.
         * @param {string} [minReceiptsAmount] Filter for all amounts greater than a value.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [isAmended]  Report has been amended 
         * @param {Array<string>} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minDisbursementsAmount] Filter for all amounts greater than a value.
         * @param {string} [minTotalContributions] Filter for all amounts greater than a value.
         * @param {string} [minCashOnHandEndPeriodAmount] Filter for all amounts greater than a value.
         * @param {Array<string>} [reportType] Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND 
         * @param {string} [minDebtsOwedAmount] Filter for all amounts greater than a value.
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [maxCashOnHandEndPeriodAmount] Filter for all amounts less than a value.
         * @param {boolean} [mostRecent]  Report is either new or is the most-recently filed amendment 
         * @param {string} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [maxIndependentExpenditures] Filter for all amounts less than a value.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsCommitteeTypeGet(apiKey: string, committeeType: 'presidential' | 'pac-party' | 'house-senate' | 'ie-only', filerType?: 'e-file' | 'paper', maxTotalContributions?: string, minReceiptDate?: string, maxReceiptDate?: string, maxDebtsOwedExpenditures?: string, minPartyCoordinatedExpenditures?: string, year?: Array<number>, minIndependentExpenditures?: string, committeeId?: Array<string>, maxDisbursementsAmount?: string, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, maxReceiptsAmount?: string, maxPartyCoordinatedExpenditures?: string, minReceiptsAmount?: string, sortHideNull?: boolean, isAmended?: boolean, type?: Array<string>, page?: number, sortNullOnly?: boolean, minDisbursementsAmount?: string, minTotalContributions?: string, minCashOnHandEndPeriodAmount?: string, reportType?: Array<string>, minDebtsOwedAmount?: string, sort?: Array<string>, maxCashOnHandEndPeriodAmount?: string, mostRecent?: boolean, candidateId?: string, maxIndependentExpenditures?: string, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling reportsCommitteeTypeGet.');
            }
            // verify required parameter 'committeeType' is not null or undefined
            if (committeeType === null || committeeType === undefined) {
                throw new RequiredError('committeeType','Required parameter committeeType was null or undefined when calling reportsCommitteeTypeGet.');
            }
            const localVarPath = `/reports/{committee_type}/`
                .replace(`{${"committee_type"}}`, encodeURIComponent(String(committeeType)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (filerType !== undefined) {
                localVarQueryParameter['filer_type'] = filerType;
            }

            if (maxTotalContributions !== undefined) {
                localVarQueryParameter['max_total_contributions'] = maxTotalContributions;
            }

            if (minReceiptDate !== undefined) {
                localVarQueryParameter['min_receipt_date'] = (minReceiptDate as any instanceof Date) ?
                    (minReceiptDate as any).toISOString().substr(0,10) :
                    minReceiptDate;
            }

            if (maxReceiptDate !== undefined) {
                localVarQueryParameter['max_receipt_date'] = (maxReceiptDate as any instanceof Date) ?
                    (maxReceiptDate as any).toISOString().substr(0,10) :
                    maxReceiptDate;
            }

            if (maxDebtsOwedExpenditures !== undefined) {
                localVarQueryParameter['max_debts_owed_expenditures'] = maxDebtsOwedExpenditures;
            }

            if (minPartyCoordinatedExpenditures !== undefined) {
                localVarQueryParameter['min_party_coordinated_expenditures'] = minPartyCoordinatedExpenditures;
            }

            if (year) {
                localVarQueryParameter['year'] = year;
            }

            if (minIndependentExpenditures !== undefined) {
                localVarQueryParameter['min_independent_expenditures'] = minIndependentExpenditures;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (maxDisbursementsAmount !== undefined) {
                localVarQueryParameter['max_disbursements_amount'] = maxDisbursementsAmount;
            }

            if (beginningImageNumber) {
                localVarQueryParameter['beginning_image_number'] = beginningImageNumber;
            }

            if (amendmentIndicator) {
                localVarQueryParameter['amendment_indicator'] = amendmentIndicator;
            }

            if (maxReceiptsAmount !== undefined) {
                localVarQueryParameter['max_receipts_amount'] = maxReceiptsAmount;
            }

            if (maxPartyCoordinatedExpenditures !== undefined) {
                localVarQueryParameter['max_party_coordinated_expenditures'] = maxPartyCoordinatedExpenditures;
            }

            if (minReceiptsAmount !== undefined) {
                localVarQueryParameter['min_receipts_amount'] = minReceiptsAmount;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (isAmended !== undefined) {
                localVarQueryParameter['is_amended'] = isAmended;
            }

            if (type) {
                localVarQueryParameter['type'] = type;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (minDisbursementsAmount !== undefined) {
                localVarQueryParameter['min_disbursements_amount'] = minDisbursementsAmount;
            }

            if (minTotalContributions !== undefined) {
                localVarQueryParameter['min_total_contributions'] = minTotalContributions;
            }

            if (minCashOnHandEndPeriodAmount !== undefined) {
                localVarQueryParameter['min_cash_on_hand_end_period_amount'] = minCashOnHandEndPeriodAmount;
            }

            if (reportType) {
                localVarQueryParameter['report_type'] = reportType;
            }

            if (minDebtsOwedAmount !== undefined) {
                localVarQueryParameter['min_debts_owed_amount'] = minDebtsOwedAmount;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (maxCashOnHandEndPeriodAmount !== undefined) {
                localVarQueryParameter['max_cash_on_hand_end_period_amount'] = maxCashOnHandEndPeriodAmount;
            }

            if (mostRecent !== undefined) {
                localVarQueryParameter['most_recent'] = mostRecent;
            }

            if (candidateId !== undefined) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (maxIndependentExpenditures !== undefined) {
                localVarQueryParameter['max_independent_expenditures'] = maxIndependentExpenditures;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.  This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalsByEntityGet(apiKey: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling totalsByEntityGet.');
            }
            // verify required parameter 'cycle' is not null or undefined
            if (cycle === null || cycle === undefined) {
                throw new RequiredError('cycle','Required parameter cycle was null or undefined when calling totalsByEntityGet.');
            }
            const localVarPath = `/totals/by_entity/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (cycle !== undefined) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {'presidential' | 'pac' | 'party' | 'pac-party' | 'house-senate' | 'ie-only'} committeeType House, Senate, presidential, independent expenditure only
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [committeeDesignationFull] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {string} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [committeeTypeFull] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalsCommitteeTypeGet(apiKey: string, committeeType: 'presidential' | 'pac' | 'party' | 'pac-party' | 'house-senate' | 'ie-only', sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeDesignationFull?: string, committeeId?: string, sortNullsLast?: boolean, perPage?: number, committeeTypeFull?: string, cycle?: Array<number>, sort?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling totalsCommitteeTypeGet.');
            }
            // verify required parameter 'committeeType' is not null or undefined
            if (committeeType === null || committeeType === undefined) {
                throw new RequiredError('committeeType','Required parameter committeeType was null or undefined when calling totalsCommitteeTypeGet.');
            }
            const localVarPath = `/totals/{committee_type}/`
                .replace(`{${"committee_type"}}`, encodeURIComponent(String(committeeType)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (committeeDesignationFull !== undefined) {
                localVarQueryParameter['committee_designation_full'] = committeeDesignationFull;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (committeeId !== undefined) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (committeeTypeFull !== undefined) {
                localVarQueryParameter['committee_type_full'] = committeeTypeFull;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FinancialApi - functional programming interface
 * @export
 */
export const FinancialApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee\'s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [maxTotalContributions] Filter for all amounts less than a value.
         * @param {Array<string>} [reportType] Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND 
         * @param {string} [maxDebtsOwedExpenditures] Filter for all amounts less than a value.
         * @param {string} [minPartyCoordinatedExpenditures] Filter for all amounts greater than a value.
         * @param {string} [minDebtsOwedAmount] Filter for all amounts greater than a value.
         * @param {string} [minIndependentExpenditures] Filter for all amounts greater than a value.
         * @param {Array<number>} [year]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {string} [maxDisbursementsAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [maxPartyCoordinatedExpenditures] Filter for all amounts less than a value.
         * @param {string} [maxReceiptsAmount] Filter for all amounts less than a value.
         * @param {string} [minReceiptsAmount] Filter for all amounts greater than a value.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxCashOnHandEndPeriodAmount] Filter for all amounts less than a value.
         * @param {boolean} [isAmended]  Report has been amended 
         * @param {Array<string>} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minDisbursementsAmount] Filter for all amounts greater than a value.
         * @param {string} [minTotalContributions] Filter for all amounts greater than a value.
         * @param {string} [minCashOnHandEndPeriodAmount] Filter for all amounts greater than a value.
         * @param {string} [maxIndependentExpenditures] Filter for all amounts less than a value.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdReportsGet(apiKey: string, committeeId: string, maxTotalContributions?: string, reportType?: Array<string>, maxDebtsOwedExpenditures?: string, minPartyCoordinatedExpenditures?: string, minDebtsOwedAmount?: string, minIndependentExpenditures?: string, year?: Array<number>, maxDisbursementsAmount?: string, beginningImageNumber?: Array<string>, sort?: Array<string>, maxPartyCoordinatedExpenditures?: string, maxReceiptsAmount?: string, minReceiptsAmount?: string, sortHideNull?: boolean, maxCashOnHandEndPeriodAmount?: string, isAmended?: boolean, type?: Array<string>, page?: number, candidateId?: string, sortNullOnly?: boolean, minDisbursementsAmount?: string, minTotalContributions?: string, minCashOnHandEndPeriodAmount?: string, maxIndependentExpenditures?: string, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeReportsPage> {
            const localVarAxiosArgs = FinancialApiAxiosParamCreator(configuration).committeeCommitteeIdReportsGet(apiKey, committeeId, maxTotalContributions, reportType, maxDebtsOwedExpenditures, minPartyCoordinatedExpenditures, minDebtsOwedAmount, minIndependentExpenditures, year, maxDisbursementsAmount, beginningImageNumber, sort, maxPartyCoordinatedExpenditures, maxReceiptsAmount, minReceiptsAmount, sortHideNull, maxCashOnHandEndPeriodAmount, isAmended, type, page, candidateId, sortNullOnly, minDisbursementsAmount, minTotalContributions, minCashOnHandEndPeriodAmount, maxIndependentExpenditures, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdTotalsGet(apiKey: string, committeeId: string, sortHideNull?: boolean, type?: string, page?: number, designation?: string, sortNullOnly?: boolean, sortNullsLast?: boolean, perPage?: number, cycle?: Array<number>, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeTotalsPage> {
            const localVarAxiosArgs = FinancialApiAxiosParamCreator(configuration).committeeCommitteeIdTotalsGet(apiKey, committeeId, sortHideNull, type, page, designation, sortNullOnly, sortNullsLast, perPage, cycle, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Look at the top-level financial information for all candidates running for the same office.  Choose a 2-year cycle, and `house`, `senate` or `presidential`.  If you are looking for a Senate seat, you will need to select the state using a two-letter abbreviation.  House races require state and a two-digit district number.  Since this endpoint reflects financial information, it will only have candidates once they file financial reporting forms. Query the `/candidates` endpoint to see an up to date list of all the candidates that filed to run for a particular seat. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {'house' | 'senate' | 'president'} office Federal office candidate runs for: H, S or P
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionsGet(apiKey: string, cycle: number, office: 'house' | 'senate' | 'president', sort?: string, sortHideNull?: boolean, district?: string, page?: number, sortNullOnly?: boolean, state?: string, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionPage> {
            const localVarAxiosArgs = FinancialApiAxiosParamCreator(configuration).electionsGet(apiKey, cycle, office, sort, sortHideNull, district, page, sortNullOnly, state, perPage, electionFull, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  List elections by cycle, office, state, and district. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [zip] Zip code
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'house' | 'senate' | 'president'>} [office] 
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionsSearchGet(apiKey: string, sortHideNull?: boolean, district?: Array<string>, page?: number, sortNullOnly?: boolean, zip?: Array<number>, state?: Array<string>, sortNullsLast?: boolean, perPage?: number, office?: Array<'house' | 'senate' | 'president'>, cycle?: Array<number>, sort?: Array<string>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionsListPage> {
            const localVarAxiosArgs = FinancialApiAxiosParamCreator(configuration).electionsSearchGet(apiKey, sortHideNull, district, page, sortNullOnly, zip, state, sortNullsLast, perPage, office, cycle, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  List elections by cycle, office, state, and district. 
         * @param {'house' | 'senate' | 'president'} office Federal office candidate runs for: H, S or P
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionsSummaryGet(office: 'house' | 'senate' | 'president', cycle: number, apiKey: string, district?: string, electionFull?: boolean, state?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ElectionSummary> {
            const localVarAxiosArgs = FinancialApiAxiosParamCreator(configuration).electionsSummaryGet(office, cycle, apiKey, district, electionFull, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee\'s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {'presidential' | 'pac-party' | 'house-senate' | 'ie-only'} committeeType House, Senate, presidential, independent expenditure only
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [maxTotalContributions] Filter for all amounts less than a value.
         * @param {string} [minReceiptDate]  Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxDebtsOwedExpenditures] Filter for all amounts less than a value.
         * @param {string} [minPartyCoordinatedExpenditures] Filter for all amounts greater than a value.
         * @param {Array<number>} [year]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {string} [minIndependentExpenditures] Filter for all amounts greater than a value.
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [maxDisbursementsAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {string} [maxReceiptsAmount] Filter for all amounts less than a value.
         * @param {string} [maxPartyCoordinatedExpenditures] Filter for all amounts less than a value.
         * @param {string} [minReceiptsAmount] Filter for all amounts greater than a value.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [isAmended]  Report has been amended 
         * @param {Array<string>} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minDisbursementsAmount] Filter for all amounts greater than a value.
         * @param {string} [minTotalContributions] Filter for all amounts greater than a value.
         * @param {string} [minCashOnHandEndPeriodAmount] Filter for all amounts greater than a value.
         * @param {Array<string>} [reportType] Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND 
         * @param {string} [minDebtsOwedAmount] Filter for all amounts greater than a value.
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [maxCashOnHandEndPeriodAmount] Filter for all amounts less than a value.
         * @param {boolean} [mostRecent]  Report is either new or is the most-recently filed amendment 
         * @param {string} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [maxIndependentExpenditures] Filter for all amounts less than a value.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsCommitteeTypeGet(apiKey: string, committeeType: 'presidential' | 'pac-party' | 'house-senate' | 'ie-only', filerType?: 'e-file' | 'paper', maxTotalContributions?: string, minReceiptDate?: string, maxReceiptDate?: string, maxDebtsOwedExpenditures?: string, minPartyCoordinatedExpenditures?: string, year?: Array<number>, minIndependentExpenditures?: string, committeeId?: Array<string>, maxDisbursementsAmount?: string, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, maxReceiptsAmount?: string, maxPartyCoordinatedExpenditures?: string, minReceiptsAmount?: string, sortHideNull?: boolean, isAmended?: boolean, type?: Array<string>, page?: number, sortNullOnly?: boolean, minDisbursementsAmount?: string, minTotalContributions?: string, minCashOnHandEndPeriodAmount?: string, reportType?: Array<string>, minDebtsOwedAmount?: string, sort?: Array<string>, maxCashOnHandEndPeriodAmount?: string, mostRecent?: boolean, candidateId?: string, maxIndependentExpenditures?: string, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeReportsPage> {
            const localVarAxiosArgs = FinancialApiAxiosParamCreator(configuration).reportsCommitteeTypeGet(apiKey, committeeType, filerType, maxTotalContributions, minReceiptDate, maxReceiptDate, maxDebtsOwedExpenditures, minPartyCoordinatedExpenditures, year, minIndependentExpenditures, committeeId, maxDisbursementsAmount, beginningImageNumber, amendmentIndicator, maxReceiptsAmount, maxPartyCoordinatedExpenditures, minReceiptsAmount, sortHideNull, isAmended, type, page, sortNullOnly, minDisbursementsAmount, minTotalContributions, minCashOnHandEndPeriodAmount, reportType, minDebtsOwedAmount, sort, maxCashOnHandEndPeriodAmount, mostRecent, candidateId, maxIndependentExpenditures, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.  This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalsByEntityGet(apiKey: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EntityReceiptDisbursementTotalsPage> {
            const localVarAxiosArgs = FinancialApiAxiosParamCreator(configuration).totalsByEntityGet(apiKey, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {'presidential' | 'pac' | 'party' | 'pac-party' | 'house-senate' | 'ie-only'} committeeType House, Senate, presidential, independent expenditure only
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [committeeDesignationFull] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {string} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [committeeTypeFull] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalsCommitteeTypeGet(apiKey: string, committeeType: 'presidential' | 'pac' | 'party' | 'pac-party' | 'house-senate' | 'ie-only', sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeDesignationFull?: string, committeeId?: string, sortNullsLast?: boolean, perPage?: number, committeeTypeFull?: string, cycle?: Array<number>, sort?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeTotalsPage> {
            const localVarAxiosArgs = FinancialApiAxiosParamCreator(configuration).totalsCommitteeTypeGet(apiKey, committeeType, sortHideNull, page, sortNullOnly, committeeDesignationFull, committeeId, sortNullsLast, perPage, committeeTypeFull, cycle, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FinancialApi - factory interface
 * @export
 */
export const FinancialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee\'s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [maxTotalContributions] Filter for all amounts less than a value.
         * @param {Array<string>} [reportType] Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND 
         * @param {string} [maxDebtsOwedExpenditures] Filter for all amounts less than a value.
         * @param {string} [minPartyCoordinatedExpenditures] Filter for all amounts greater than a value.
         * @param {string} [minDebtsOwedAmount] Filter for all amounts greater than a value.
         * @param {string} [minIndependentExpenditures] Filter for all amounts greater than a value.
         * @param {Array<number>} [year]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {string} [maxDisbursementsAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [maxPartyCoordinatedExpenditures] Filter for all amounts less than a value.
         * @param {string} [maxReceiptsAmount] Filter for all amounts less than a value.
         * @param {string} [minReceiptsAmount] Filter for all amounts greater than a value.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxCashOnHandEndPeriodAmount] Filter for all amounts less than a value.
         * @param {boolean} [isAmended]  Report has been amended 
         * @param {Array<string>} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minDisbursementsAmount] Filter for all amounts greater than a value.
         * @param {string} [minTotalContributions] Filter for all amounts greater than a value.
         * @param {string} [minCashOnHandEndPeriodAmount] Filter for all amounts greater than a value.
         * @param {string} [maxIndependentExpenditures] Filter for all amounts less than a value.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdReportsGet(apiKey: string, committeeId: string, maxTotalContributions?: string, reportType?: Array<string>, maxDebtsOwedExpenditures?: string, minPartyCoordinatedExpenditures?: string, minDebtsOwedAmount?: string, minIndependentExpenditures?: string, year?: Array<number>, maxDisbursementsAmount?: string, beginningImageNumber?: Array<string>, sort?: Array<string>, maxPartyCoordinatedExpenditures?: string, maxReceiptsAmount?: string, minReceiptsAmount?: string, sortHideNull?: boolean, maxCashOnHandEndPeriodAmount?: string, isAmended?: boolean, type?: Array<string>, page?: number, candidateId?: string, sortNullOnly?: boolean, minDisbursementsAmount?: string, minTotalContributions?: string, minCashOnHandEndPeriodAmount?: string, maxIndependentExpenditures?: string, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return FinancialApiFp(configuration).committeeCommitteeIdReportsGet(apiKey, committeeId, maxTotalContributions, reportType, maxDebtsOwedExpenditures, minPartyCoordinatedExpenditures, minDebtsOwedAmount, minIndependentExpenditures, year, maxDisbursementsAmount, beginningImageNumber, sort, maxPartyCoordinatedExpenditures, maxReceiptsAmount, minReceiptsAmount, sortHideNull, maxCashOnHandEndPeriodAmount, isAmended, type, page, candidateId, sortNullOnly, minDisbursementsAmount, minTotalContributions, minCashOnHandEndPeriodAmount, maxIndependentExpenditures, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdTotalsGet(apiKey: string, committeeId: string, sortHideNull?: boolean, type?: string, page?: number, designation?: string, sortNullOnly?: boolean, sortNullsLast?: boolean, perPage?: number, cycle?: Array<number>, sort?: string, options?: any) {
            return FinancialApiFp(configuration).committeeCommitteeIdTotalsGet(apiKey, committeeId, sortHideNull, type, page, designation, sortNullOnly, sortNullsLast, perPage, cycle, sort, options)(axios, basePath);
        },
        /**
         *  Look at the top-level financial information for all candidates running for the same office.  Choose a 2-year cycle, and `house`, `senate` or `presidential`.  If you are looking for a Senate seat, you will need to select the state using a two-letter abbreviation.  House races require state and a two-digit district number.  Since this endpoint reflects financial information, it will only have candidates once they file financial reporting forms. Query the `/candidates` endpoint to see an up to date list of all the candidates that filed to run for a particular seat. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {'house' | 'senate' | 'president'} office Federal office candidate runs for: H, S or P
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionsGet(apiKey: string, cycle: number, office: 'house' | 'senate' | 'president', sort?: string, sortHideNull?: boolean, district?: string, page?: number, sortNullOnly?: boolean, state?: string, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
            return FinancialApiFp(configuration).electionsGet(apiKey, cycle, office, sort, sortHideNull, district, page, sortNullOnly, state, perPage, electionFull, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  List elections by cycle, office, state, and district. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [zip] Zip code
         * @param {Array<string>} [state] US state or territory where a candidate runs for office
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<'house' | 'senate' | 'president'>} [office] 
         * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionsSearchGet(apiKey: string, sortHideNull?: boolean, district?: Array<string>, page?: number, sortNullOnly?: boolean, zip?: Array<number>, state?: Array<string>, sortNullsLast?: boolean, perPage?: number, office?: Array<'house' | 'senate' | 'president'>, cycle?: Array<number>, sort?: Array<string>, options?: any) {
            return FinancialApiFp(configuration).electionsSearchGet(apiKey, sortHideNull, district, page, sortNullOnly, zip, state, sortNullsLast, perPage, office, cycle, sort, options)(axios, basePath);
        },
        /**
         *  List elections by cycle, office, state, and district. 
         * @param {'house' | 'senate' | 'president'} office Federal office candidate runs for: H, S or P
         * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        electionsSummaryGet(office: 'house' | 'senate' | 'president', cycle: number, apiKey: string, district?: string, electionFull?: boolean, state?: string, options?: any) {
            return FinancialApiFp(configuration).electionsSummaryGet(office, cycle, apiKey, district, electionFull, state, options)(axios, basePath);
        },
        /**
         *  Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee\'s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {'presidential' | 'pac-party' | 'house-senate' | 'ie-only'} committeeType House, Senate, presidential, independent expenditure only
         * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
         * @param {string} [maxTotalContributions] Filter for all amounts less than a value.
         * @param {string} [minReceiptDate]  Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxReceiptDate]  Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD) 
         * @param {string} [maxDebtsOwedExpenditures] Filter for all amounts less than a value.
         * @param {string} [minPartyCoordinatedExpenditures] Filter for all amounts greater than a value.
         * @param {Array<number>} [year]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
         * @param {string} [minIndependentExpenditures] Filter for all amounts greater than a value.
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [maxDisbursementsAmount] Filter for all amounts less than a value.
         * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
         * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
         * @param {string} [maxReceiptsAmount] Filter for all amounts less than a value.
         * @param {string} [maxPartyCoordinatedExpenditures] Filter for all amounts less than a value.
         * @param {string} [minReceiptsAmount] Filter for all amounts greater than a value.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [isAmended]  Report has been amended 
         * @param {Array<string>} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [minDisbursementsAmount] Filter for all amounts greater than a value.
         * @param {string} [minTotalContributions] Filter for all amounts greater than a value.
         * @param {string} [minCashOnHandEndPeriodAmount] Filter for all amounts greater than a value.
         * @param {Array<string>} [reportType] Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND 
         * @param {string} [minDebtsOwedAmount] Filter for all amounts greater than a value.
         * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
         * @param {string} [maxCashOnHandEndPeriodAmount] Filter for all amounts less than a value.
         * @param {boolean} [mostRecent]  Report is either new or is the most-recently filed amendment 
         * @param {string} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [maxIndependentExpenditures] Filter for all amounts less than a value.
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsCommitteeTypeGet(apiKey: string, committeeType: 'presidential' | 'pac-party' | 'house-senate' | 'ie-only', filerType?: 'e-file' | 'paper', maxTotalContributions?: string, minReceiptDate?: string, maxReceiptDate?: string, maxDebtsOwedExpenditures?: string, minPartyCoordinatedExpenditures?: string, year?: Array<number>, minIndependentExpenditures?: string, committeeId?: Array<string>, maxDisbursementsAmount?: string, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, maxReceiptsAmount?: string, maxPartyCoordinatedExpenditures?: string, minReceiptsAmount?: string, sortHideNull?: boolean, isAmended?: boolean, type?: Array<string>, page?: number, sortNullOnly?: boolean, minDisbursementsAmount?: string, minTotalContributions?: string, minCashOnHandEndPeriodAmount?: string, reportType?: Array<string>, minDebtsOwedAmount?: string, sort?: Array<string>, maxCashOnHandEndPeriodAmount?: string, mostRecent?: boolean, candidateId?: string, maxIndependentExpenditures?: string, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return FinancialApiFp(configuration).reportsCommitteeTypeGet(apiKey, committeeType, filerType, maxTotalContributions, minReceiptDate, maxReceiptDate, maxDebtsOwedExpenditures, minPartyCoordinatedExpenditures, year, minIndependentExpenditures, committeeId, maxDisbursementsAmount, beginningImageNumber, amendmentIndicator, maxReceiptsAmount, maxPartyCoordinatedExpenditures, minReceiptsAmount, sortHideNull, isAmended, type, page, sortNullOnly, minDisbursementsAmount, minTotalContributions, minCashOnHandEndPeriodAmount, reportType, minDebtsOwedAmount, sort, maxCashOnHandEndPeriodAmount, mostRecent, candidateId, maxIndependentExpenditures, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.  This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalsByEntityGet(apiKey: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, sort?: string, options?: any) {
            return FinancialApiFp(configuration).totalsByEntityGet(apiKey, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, sort, options)(axios, basePath);
        },
        /**
         *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {'presidential' | 'pac' | 'party' | 'pac-party' | 'house-senate' | 'ie-only'} committeeType House, Senate, presidential, independent expenditure only
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {string} [committeeDesignationFull] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
         * @param {string} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [committeeTypeFull] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalsCommitteeTypeGet(apiKey: string, committeeType: 'presidential' | 'pac' | 'party' | 'pac-party' | 'house-senate' | 'ie-only', sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeDesignationFull?: string, committeeId?: string, sortNullsLast?: boolean, perPage?: number, committeeTypeFull?: string, cycle?: Array<number>, sort?: string, options?: any) {
            return FinancialApiFp(configuration).totalsCommitteeTypeGet(apiKey, committeeType, sortHideNull, page, sortNullOnly, committeeDesignationFull, committeeId, sortNullsLast, perPage, committeeTypeFull, cycle, sort, options)(axios, basePath);
        },
    };
};

/**
 * FinancialApi - object-oriented interface
 * @export
 * @class FinancialApi
 * @extends {BaseAPI}
 */
export class FinancialApi extends BaseAPI {
    /**
     *  Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee\'s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [maxTotalContributions] Filter for all amounts less than a value.
     * @param {Array<string>} [reportType] Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND 
     * @param {string} [maxDebtsOwedExpenditures] Filter for all amounts less than a value.
     * @param {string} [minPartyCoordinatedExpenditures] Filter for all amounts greater than a value.
     * @param {string} [minDebtsOwedAmount] Filter for all amounts greater than a value.
     * @param {string} [minIndependentExpenditures] Filter for all amounts greater than a value.
     * @param {Array<number>} [year]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @param {string} [maxDisbursementsAmount] Filter for all amounts less than a value.
     * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
     * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
     * @param {string} [maxPartyCoordinatedExpenditures] Filter for all amounts less than a value.
     * @param {string} [maxReceiptsAmount] Filter for all amounts less than a value.
     * @param {string} [minReceiptsAmount] Filter for all amounts greater than a value.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [maxCashOnHandEndPeriodAmount] Filter for all amounts less than a value.
     * @param {boolean} [isAmended]  Report has been amended 
     * @param {Array<string>} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {string} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [minDisbursementsAmount] Filter for all amounts greater than a value.
     * @param {string} [minTotalContributions] Filter for all amounts greater than a value.
     * @param {string} [minCashOnHandEndPeriodAmount] Filter for all amounts greater than a value.
     * @param {string} [maxIndependentExpenditures] Filter for all amounts less than a value.
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public committeeCommitteeIdReportsGet(apiKey: string, committeeId: string, maxTotalContributions?: string, reportType?: Array<string>, maxDebtsOwedExpenditures?: string, minPartyCoordinatedExpenditures?: string, minDebtsOwedAmount?: string, minIndependentExpenditures?: string, year?: Array<number>, maxDisbursementsAmount?: string, beginningImageNumber?: Array<string>, sort?: Array<string>, maxPartyCoordinatedExpenditures?: string, maxReceiptsAmount?: string, minReceiptsAmount?: string, sortHideNull?: boolean, maxCashOnHandEndPeriodAmount?: string, isAmended?: boolean, type?: Array<string>, page?: number, candidateId?: string, sortNullOnly?: boolean, minDisbursementsAmount?: string, minTotalContributions?: string, minCashOnHandEndPeriodAmount?: string, maxIndependentExpenditures?: string, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return FinancialApiFp(this.configuration).committeeCommitteeIdReportsGet(apiKey, committeeId, maxTotalContributions, reportType, maxDebtsOwedExpenditures, minPartyCoordinatedExpenditures, minDebtsOwedAmount, minIndependentExpenditures, year, maxDisbursementsAmount, beginningImageNumber, sort, maxPartyCoordinatedExpenditures, maxReceiptsAmount, minReceiptsAmount, sortHideNull, maxCashOnHandEndPeriodAmount, isAmended, type, page, candidateId, sortNullOnly, minDisbursementsAmount, minTotalContributions, minCashOnHandEndPeriodAmount, maxIndependentExpenditures, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {string} [designation] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public committeeCommitteeIdTotalsGet(apiKey: string, committeeId: string, sortHideNull?: boolean, type?: string, page?: number, designation?: string, sortNullOnly?: boolean, sortNullsLast?: boolean, perPage?: number, cycle?: Array<number>, sort?: string, options?: any) {
        return FinancialApiFp(this.configuration).committeeCommitteeIdTotalsGet(apiKey, committeeId, sortHideNull, type, page, designation, sortNullOnly, sortNullsLast, perPage, cycle, sort, options)(this.axios, this.basePath);
    }

    /**
     *  Look at the top-level financial information for all candidates running for the same office.  Choose a 2-year cycle, and `house`, `senate` or `presidential`.  If you are looking for a Senate seat, you will need to select the state using a two-letter abbreviation.  House races require state and a two-digit district number.  Since this endpoint reflects financial information, it will only have candidates once they file financial reporting forms. Query the `/candidates` endpoint to see an up to date list of all the candidates that filed to run for a particular seat. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
     * @param {'house' | 'senate' | 'president'} office Federal office candidate runs for: H, S or P
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [state] US state or territory where a candidate runs for office
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public electionsGet(apiKey: string, cycle: number, office: 'house' | 'senate' | 'president', sort?: string, sortHideNull?: boolean, district?: string, page?: number, sortNullOnly?: boolean, state?: string, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
        return FinancialApiFp(this.configuration).electionsGet(apiKey, cycle, office, sort, sortHideNull, district, page, sortNullOnly, state, perPage, electionFull, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  List elections by cycle, office, state, and district. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<string>} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<number>} [zip] Zip code
     * @param {Array<string>} [state] US state or territory where a candidate runs for office
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<'house' | 'senate' | 'president'>} [office] 
     * @param {Array<number>} [cycle]  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
     * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public electionsSearchGet(apiKey: string, sortHideNull?: boolean, district?: Array<string>, page?: number, sortNullOnly?: boolean, zip?: Array<number>, state?: Array<string>, sortNullsLast?: boolean, perPage?: number, office?: Array<'house' | 'senate' | 'president'>, cycle?: Array<number>, sort?: Array<string>, options?: any) {
        return FinancialApiFp(this.configuration).electionsSearchGet(apiKey, sortHideNull, district, page, sortNullOnly, zip, state, sortNullsLast, perPage, office, cycle, sort, options)(this.axios, this.basePath);
    }

    /**
     *  List elections by cycle, office, state, and district. 
     * @param {'house' | 'senate' | 'president'} office Federal office candidate runs for: H, S or P
     * @param {number} cycle  Two-year election cycle in which a candidate runs for office. Calculated from FEC Form 2. The cycle begins with an odd year and is named for its ending, even year. This cycle follows the traditional house election cycle and subdivides the presidential and Senate elections into comparable two-year blocks. To see data for the entire four years of a presidential term or six years of a senatorial term, you will need the &#x60;election_full&#x60; flag. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {string} [state] US state or territory where a candidate runs for office
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public electionsSummaryGet(office: 'house' | 'senate' | 'president', cycle: number, apiKey: string, district?: string, electionFull?: boolean, state?: string, options?: any) {
        return FinancialApiFp(this.configuration).electionsSummaryGet(office, cycle, apiKey, district, electionFull, state, options)(this.axios, this.basePath);
    }

    /**
     *  Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee\'s financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {'presidential' | 'pac-party' | 'house-senate' | 'ie-only'} committeeType House, Senate, presidential, independent expenditure only
     * @param {'e-file' | 'paper'} [filerType] The method used to file with the FEC, either electronic or on paper.
     * @param {string} [maxTotalContributions] Filter for all amounts less than a value.
     * @param {string} [minReceiptDate]  Selects all items received by FEC after this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxReceiptDate]  Selects all items received by FEC before this date(MM/DD/YYYY or YYYY-MM-DD) 
     * @param {string} [maxDebtsOwedExpenditures] Filter for all amounts less than a value.
     * @param {string} [minPartyCoordinatedExpenditures] Filter for all amounts greater than a value.
     * @param {Array<number>} [year]  Forms with coverage date -      year from the coverage ending date. Forms without coverage date -      year from the receipt date. 
     * @param {string} [minIndependentExpenditures] Filter for all amounts greater than a value.
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [maxDisbursementsAmount] Filter for all amounts less than a value.
     * @param {Array<string>} [beginningImageNumber]  Unique identifier for the electronic or paper report. This number is used to construct PDF URLs to the original document. 
     * @param {Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>} [amendmentIndicator]      -N   new     -A   amendment     -T   terminated     -C   consolidated     -M   multi-candidate     -S   secondary      Null might be new or amendment. If amendment indicator is null and the filings is the first or     first in a chain treat it as if it was a new. If it is not the first or first in a chain then     treat the filing as an amendment. 
     * @param {string} [maxReceiptsAmount] Filter for all amounts less than a value.
     * @param {string} [maxPartyCoordinatedExpenditures] Filter for all amounts less than a value.
     * @param {string} [minReceiptsAmount] Filter for all amounts greater than a value.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {boolean} [isAmended]  Report has been amended 
     * @param {Array<string>} [type] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [minDisbursementsAmount] Filter for all amounts greater than a value.
     * @param {string} [minTotalContributions] Filter for all amounts greater than a value.
     * @param {string} [minCashOnHandEndPeriodAmount] Filter for all amounts greater than a value.
     * @param {Array<string>} [reportType] Report type; prefix with \&quot;-\&quot; to exclude. Name of report where the underlying data comes from:     - 10D Pre-Election     - 10G Pre-General     - 10P Pre-Primary     - 10R Pre-Run-Off     - 10S Pre-Special     - 12C Pre-Convention     - 12G Pre-General     - 12P Pre-Primary     - 12R Pre-Run-Off     - 12S Pre-Special     - 30D Post-Election     - 30G Post-General     - 30P Post-Primary     - 30R Post-Run-Off     - 30S Post-Special     - 60D Post-Convention     - M1  January Monthly     - M10 October Monthly     - M11 November Monthly     - M12 December Monthly     - M2  February Monthly     - M3  March Monthly     - M4  April Monthly     - M5  May Monthly     - M6  June Monthly     - M7  July Monthly     - M8  August Monthly     - M9  September Monthly     - MY  Mid-Year Report     - Q1  April Quarterly     - Q2  July Quarterly     - Q3  October Quarterly     - TER Termination Report     - YE  Year-End     - ADJ COMP ADJUST AMEND     - CA  COMPREHENSIVE AMEND 
     * @param {string} [minDebtsOwedAmount] Filter for all amounts greater than a value.
     * @param {Array<string>} [sort] Provide a field to sort by. Use - for descending order.
     * @param {string} [maxCashOnHandEndPeriodAmount] Filter for all amounts less than a value.
     * @param {boolean} [mostRecent]  Report is either new or is the most-recently filed amendment 
     * @param {string} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {string} [maxIndependentExpenditures] Filter for all amounts less than a value.
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public reportsCommitteeTypeGet(apiKey: string, committeeType: 'presidential' | 'pac-party' | 'house-senate' | 'ie-only', filerType?: 'e-file' | 'paper', maxTotalContributions?: string, minReceiptDate?: string, maxReceiptDate?: string, maxDebtsOwedExpenditures?: string, minPartyCoordinatedExpenditures?: string, year?: Array<number>, minIndependentExpenditures?: string, committeeId?: Array<string>, maxDisbursementsAmount?: string, beginningImageNumber?: Array<string>, amendmentIndicator?: Array<'' | 'N' | 'A' | 'T' | 'C' | 'M' | 'S'>, maxReceiptsAmount?: string, maxPartyCoordinatedExpenditures?: string, minReceiptsAmount?: string, sortHideNull?: boolean, isAmended?: boolean, type?: Array<string>, page?: number, sortNullOnly?: boolean, minDisbursementsAmount?: string, minTotalContributions?: string, minCashOnHandEndPeriodAmount?: string, reportType?: Array<string>, minDebtsOwedAmount?: string, sort?: Array<string>, maxCashOnHandEndPeriodAmount?: string, mostRecent?: boolean, candidateId?: string, maxIndependentExpenditures?: string, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return FinancialApiFp(this.configuration).reportsCommitteeTypeGet(apiKey, committeeType, filerType, maxTotalContributions, minReceiptDate, maxReceiptDate, maxDebtsOwedExpenditures, minPartyCoordinatedExpenditures, year, minIndependentExpenditures, committeeId, maxDisbursementsAmount, beginningImageNumber, amendmentIndicator, maxReceiptsAmount, maxPartyCoordinatedExpenditures, minReceiptsAmount, sortHideNull, isAmended, type, page, sortNullOnly, minDisbursementsAmount, minTotalContributions, minCashOnHandEndPeriodAmount, reportType, minDebtsOwedAmount, sort, maxCashOnHandEndPeriodAmount, mostRecent, candidateId, maxIndependentExpenditures, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.  This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {number} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public totalsByEntityGet(apiKey: string, cycle: number, sortHideNull?: boolean, page?: number, sortNullsLast?: boolean, perPage?: number, sortNullOnly?: boolean, sort?: string, options?: any) {
        return FinancialApiFp(this.configuration).totalsByEntityGet(apiKey, cycle, sortHideNull, page, sortNullsLast, perPage, sortNullOnly, sort, options)(this.axios, this.basePath);
    }

    /**
     *  This endpoint provides information about a committee\'s Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year â€” for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {'presidential' | 'pac' | 'party' | 'pac-party' | 'house-senate' | 'ie-only'} committeeType House, Senate, presidential, independent expenditure only
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {string} [committeeDesignationFull] The one-letter designation code of the organization:          - A authorized by a candidate          - J joint fundraising committee          - P principal campaign committee of a candidate          - U unauthorized          - B lobbyist/registrant PAC          - D leadership PAC 
     * @param {string} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [committeeTypeFull] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinancialApi
     */
    public totalsCommitteeTypeGet(apiKey: string, committeeType: 'presidential' | 'pac' | 'party' | 'pac-party' | 'house-senate' | 'ie-only', sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeDesignationFull?: string, committeeId?: string, sortNullsLast?: boolean, perPage?: number, committeeTypeFull?: string, cycle?: Array<number>, sort?: string, options?: any) {
        return FinancialApiFp(this.configuration).totalsCommitteeTypeGet(apiKey, committeeType, sortHideNull, page, sortNullOnly, committeeDesignationFull, committeeId, sortNullsLast, perPage, committeeTypeFull, cycle, sort, options)(this.axios, this.basePath);
    }

}


/**
 * IndependentExpendituresApi - axios parameter creator
 * @export
 */
export const IndependentExpendituresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleEByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdSchedulesScheduleEByCandidateGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdSchedulesScheduleEByCandidateGet.');
            }
            const localVarPath = `/committee/{committee_id}/schedules/schedule_e/by_candidate/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (district !== undefined) {
                localVarQueryParameter['district'] = district;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (supportOppose !== undefined) {
                localVarQueryParameter['support_oppose'] = supportOppose;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office !== undefined) {
                localVarQueryParameter['office'] = office;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleEByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleEByCandidateGet.');
            }
            const localVarPath = `/schedules/schedule_e/by_candidate/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (district !== undefined) {
                localVarQueryParameter['district'] = district;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (supportOppose !== undefined) {
                localVarQueryParameter['support_oppose'] = supportOppose;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (office !== undefined) {
                localVarQueryParameter['office'] = office;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [maxExpenditureDate] Selects all items expended by this committee after this date
         * @param {string} [minExpenditureAmount] Selects all items expended by this committee greater than this amount
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [candidateName] Name of candidate running for office
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [payeeName] Name of the entity that received the payment
         * @param {string} [minExpenditureDate] Selects all items expended by this committee before this date
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Support or opposition
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {string} [maxExpenditureAmount] Selects all items expended by this committee less than this amount
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleEEfileGet(apiKey: string, maxExpenditureDate?: string, minExpenditureAmount?: string, committeeId?: Array<string>, candidateName?: Array<string>, sort?: string, payeeName?: Array<string>, minExpenditureDate?: string, sortHideNull?: boolean, supportOpposeIndicator?: Array<'S' | 'O'>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, imageNumber?: Array<string>, maxExpenditureAmount?: string, perPage?: number, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleEEfileGet.');
            }
            const localVarPath = `/schedules/schedule_e/efile/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (maxExpenditureDate !== undefined) {
                localVarQueryParameter['max_expenditure_date'] = (maxExpenditureDate as any instanceof Date) ?
                    (maxExpenditureDate as any).toISOString().substr(0,10) :
                    maxExpenditureDate;
            }

            if (minExpenditureAmount !== undefined) {
                localVarQueryParameter['min_expenditure_amount'] = (minExpenditureAmount as any instanceof Date) ?
                    (minExpenditureAmount as any).toISOString().substr(0,10) :
                    minExpenditureAmount;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (candidateName) {
                localVarQueryParameter['candidate_name'] = candidateName;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (payeeName) {
                localVarQueryParameter['payee_name'] = payeeName;
            }

            if (minExpenditureDate !== undefined) {
                localVarQueryParameter['min_expenditure_date'] = (minExpenditureDate as any instanceof Date) ?
                    (minExpenditureDate as any).toISOString().substr(0,10) :
                    minExpenditureDate;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (supportOpposeIndicator) {
                localVarQueryParameter['support_oppose_indicator'] = supportOpposeIndicator;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (maxExpenditureAmount !== undefined) {
                localVarQueryParameter['max_expenditure_amount'] = (maxExpenditureAmount as any instanceof Date) ?
                    (maxExpenditureAmount as any).toISOString().substr(0,10) :
                    maxExpenditureAmount;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \"expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidateâ€™s authorized committee, or their agents, or a political party or its agents.\"  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don\'t double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in `/schedule/schedule_e/`.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `expenditure_amount`, you might receive a page of results with the following pagination information:  ```  \"pagination\": {     \"count\": 152623,     \"last_indexes\": {       \"last_index\": \"3023037\",       \"last_expenditure_amount\": -17348.5     },     \"per_page\": 20,     \"pages\": 7632   } } ```  To fetch the next page of sorted results, append `last_index=3023037` and `last_expenditure_amount=` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [candidateOfficeDistrict] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {string} [lastExpenditureDate]  When sorting by &#x60;expenditure_date&#x60;, this is populated with the &#x60;expenditure_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. 
         * @param {Array<string>} [candidateParty] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {number} [lastOfficeTotalYtd]  When sorting by &#x60;office_total_ytd&#x60;, this is populated with the &#x60;office_total_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.\&#39; 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lastSupportOpposeIndicator]  When sorting by &#x60;support_oppose_indicator&#x60;, this is populated with the &#x60;support_oppose_indicator&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.\&#39; 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [payeeName]  Name of the entity that received the payment. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [filingForm]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {Array<boolean>} [isNotice]  Record filed as 24- or 48-hour notice. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [lastExpenditureAmount]  When sorting by &#x60;expenditure_amount&#x60;, this is populated with the &#x60;expenditure_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. 
         * @param {Array<'' | 'H' | 'S' | 'P'>} [candidateOffice] Federal office candidate runs for: H, S or P
         * @param {Array<string>} [candidateOfficeState] US state or territory
         * @param {string} [minImageNumber] 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleEGet(apiKey: string, candidateOfficeDistrict?: Array<string>, lastIndex?: number, lastExpenditureDate?: string, candidateParty?: Array<string>, minAmount?: string, maxDate?: string, lastOfficeTotalYtd?: number, committeeId?: Array<string>, lastSupportOpposeIndicator?: string, lineNumber?: string, maxImageNumber?: string, sort?: string, payeeName?: Array<string>, sortHideNull?: boolean, filingForm?: Array<string>, maxAmount?: string, supportOpposeIndicator?: Array<'S' | 'O'>, candidateId?: Array<string>, minDate?: string, isNotice?: Array<boolean>, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, lastExpenditureAmount?: number, candidateOffice?: Array<'' | 'H' | 'S' | 'P'>, candidateOfficeState?: Array<string>, minImageNumber?: string, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleEGet.');
            }
            const localVarPath = `/schedules/schedule_e/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (candidateOfficeDistrict) {
                localVarQueryParameter['candidate_office_district'] = candidateOfficeDistrict;
            }

            if (lastIndex !== undefined) {
                localVarQueryParameter['last_index'] = lastIndex;
            }

            if (lastExpenditureDate !== undefined) {
                localVarQueryParameter['last_expenditure_date'] = (lastExpenditureDate as any instanceof Date) ?
                    (lastExpenditureDate as any).toISOString().substr(0,10) :
                    lastExpenditureDate;
            }

            if (candidateParty) {
                localVarQueryParameter['candidate_party'] = candidateParty;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (lastOfficeTotalYtd !== undefined) {
                localVarQueryParameter['last_office_total_ytd'] = lastOfficeTotalYtd;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (lastSupportOpposeIndicator !== undefined) {
                localVarQueryParameter['last_support_oppose_indicator'] = lastSupportOpposeIndicator;
            }

            if (lineNumber !== undefined) {
                localVarQueryParameter['line_number'] = lineNumber;
            }

            if (maxImageNumber !== undefined) {
                localVarQueryParameter['max_image_number'] = maxImageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (payeeName) {
                localVarQueryParameter['payee_name'] = payeeName;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (filingForm) {
                localVarQueryParameter['filing_form'] = filingForm;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (supportOpposeIndicator) {
                localVarQueryParameter['support_oppose_indicator'] = supportOpposeIndicator;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (isNotice) {
                localVarQueryParameter['is_notice'] = isNotice;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (lastExpenditureAmount !== undefined) {
                localVarQueryParameter['last_expenditure_amount'] = lastExpenditureAmount;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (candidateOffice) {
                localVarQueryParameter['candidate_office'] = candidateOffice;
            }

            if (candidateOfficeState) {
                localVarQueryParameter['candidate_office_state'] = candidateOfficeState;
            }

            if (minImageNumber !== undefined) {
                localVarQueryParameter['min_image_number'] = minImageNumber;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndependentExpendituresApi - functional programming interface
 * @export
 */
export const IndependentExpendituresApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleEByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleEByCandidatePage> {
            const localVarAxiosArgs = IndependentExpendituresApiAxiosParamCreator(configuration).committeeCommitteeIdSchedulesScheduleEByCandidateGet(apiKey, committeeId, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleEByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleEByCandidatePage> {
            const localVarAxiosArgs = IndependentExpendituresApiAxiosParamCreator(configuration).schedulesScheduleEByCandidateGet(apiKey, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [maxExpenditureDate] Selects all items expended by this committee after this date
         * @param {string} [minExpenditureAmount] Selects all items expended by this committee greater than this amount
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [candidateName] Name of candidate running for office
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [payeeName] Name of the entity that received the payment
         * @param {string} [minExpenditureDate] Selects all items expended by this committee before this date
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Support or opposition
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {string} [maxExpenditureAmount] Selects all items expended by this committee less than this amount
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleEEfileGet(apiKey: string, maxExpenditureDate?: string, minExpenditureAmount?: string, committeeId?: Array<string>, candidateName?: Array<string>, sort?: string, payeeName?: Array<string>, minExpenditureDate?: string, sortHideNull?: boolean, supportOpposeIndicator?: Array<'S' | 'O'>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, imageNumber?: Array<string>, maxExpenditureAmount?: string, perPage?: number, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleEEfilePage> {
            const localVarAxiosArgs = IndependentExpendituresApiAxiosParamCreator(configuration).schedulesScheduleEEfileGet(apiKey, maxExpenditureDate, minExpenditureAmount, committeeId, candidateName, sort, payeeName, minExpenditureDate, sortHideNull, supportOpposeIndicator, page, candidateId, sortNullOnly, imageNumber, maxExpenditureAmount, perPage, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \"expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidateâ€™s authorized committee, or their agents, or a political party or its agents.\"  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don\'t double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in `/schedule/schedule_e/`.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `expenditure_amount`, you might receive a page of results with the following pagination information:  ```  \"pagination\": {     \"count\": 152623,     \"last_indexes\": {       \"last_index\": \"3023037\",       \"last_expenditure_amount\": -17348.5     },     \"per_page\": 20,     \"pages\": 7632   } } ```  To fetch the next page of sorted results, append `last_index=3023037` and `last_expenditure_amount=` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [candidateOfficeDistrict] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {string} [lastExpenditureDate]  When sorting by &#x60;expenditure_date&#x60;, this is populated with the &#x60;expenditure_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. 
         * @param {Array<string>} [candidateParty] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {number} [lastOfficeTotalYtd]  When sorting by &#x60;office_total_ytd&#x60;, this is populated with the &#x60;office_total_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.\&#39; 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lastSupportOpposeIndicator]  When sorting by &#x60;support_oppose_indicator&#x60;, this is populated with the &#x60;support_oppose_indicator&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.\&#39; 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [payeeName]  Name of the entity that received the payment. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [filingForm]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {Array<boolean>} [isNotice]  Record filed as 24- or 48-hour notice. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [lastExpenditureAmount]  When sorting by &#x60;expenditure_amount&#x60;, this is populated with the &#x60;expenditure_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. 
         * @param {Array<'' | 'H' | 'S' | 'P'>} [candidateOffice] Federal office candidate runs for: H, S or P
         * @param {Array<string>} [candidateOfficeState] US state or territory
         * @param {string} [minImageNumber] 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleEGet(apiKey: string, candidateOfficeDistrict?: Array<string>, lastIndex?: number, lastExpenditureDate?: string, candidateParty?: Array<string>, minAmount?: string, maxDate?: string, lastOfficeTotalYtd?: number, committeeId?: Array<string>, lastSupportOpposeIndicator?: string, lineNumber?: string, maxImageNumber?: string, sort?: string, payeeName?: Array<string>, sortHideNull?: boolean, filingForm?: Array<string>, maxAmount?: string, supportOpposeIndicator?: Array<'S' | 'O'>, candidateId?: Array<string>, minDate?: string, isNotice?: Array<boolean>, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, lastExpenditureAmount?: number, candidateOffice?: Array<'' | 'H' | 'S' | 'P'>, candidateOfficeState?: Array<string>, minImageNumber?: string, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleEPage> {
            const localVarAxiosArgs = IndependentExpendituresApiAxiosParamCreator(configuration).schedulesScheduleEGet(apiKey, candidateOfficeDistrict, lastIndex, lastExpenditureDate, candidateParty, minAmount, maxDate, lastOfficeTotalYtd, committeeId, lastSupportOpposeIndicator, lineNumber, maxImageNumber, sort, payeeName, sortHideNull, filingForm, maxAmount, supportOpposeIndicator, candidateId, minDate, isNotice, sortNullOnly, imageNumber, perPage, lastExpenditureAmount, candidateOffice, candidateOfficeState, minImageNumber, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * IndependentExpendituresApi - factory interface
 * @export
 */
export const IndependentExpendituresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleEByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
            return IndependentExpendituresApiFp(configuration).committeeCommitteeIdSchedulesScheduleEByCandidateGet(apiKey, committeeId, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options)(axios, basePath);
        },
        /**
         * Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {'S' | 'O'} [supportOppose] Support or opposition
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [state] US state or territory where a candidate runs for office
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleEByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
            return IndependentExpendituresApiFp(configuration).schedulesScheduleEByCandidateGet(apiKey, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [maxExpenditureDate] Selects all items expended by this committee after this date
         * @param {string} [minExpenditureAmount] Selects all items expended by this committee greater than this amount
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [candidateName] Name of candidate running for office
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [payeeName] Name of the entity that received the payment
         * @param {string} [minExpenditureDate] Selects all items expended by this committee before this date
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Support or opposition
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {string} [maxExpenditureAmount] Selects all items expended by this committee less than this amount
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleEEfileGet(apiKey: string, maxExpenditureDate?: string, minExpenditureAmount?: string, committeeId?: Array<string>, candidateName?: Array<string>, sort?: string, payeeName?: Array<string>, minExpenditureDate?: string, sortHideNull?: boolean, supportOpposeIndicator?: Array<'S' | 'O'>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, imageNumber?: Array<string>, maxExpenditureAmount?: string, perPage?: number, sortNullsLast?: boolean, options?: any) {
            return IndependentExpendituresApiFp(configuration).schedulesScheduleEEfileGet(apiKey, maxExpenditureDate, minExpenditureAmount, committeeId, candidateName, sort, payeeName, minExpenditureDate, sortHideNull, supportOpposeIndicator, page, candidateId, sortNullOnly, imageNumber, maxExpenditureAmount, perPage, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \"expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidateâ€™s authorized committee, or their agents, or a political party or its agents.\"  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don\'t double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in `/schedule/schedule_e/`.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `expenditure_amount`, you might receive a page of results with the following pagination information:  ```  \"pagination\": {     \"count\": 152623,     \"last_indexes\": {       \"last_index\": \"3023037\",       \"last_expenditure_amount\": -17348.5     },     \"per_page\": 20,     \"pages\": 7632   } } ```  To fetch the next page of sorted results, append `last_index=3023037` and `last_expenditure_amount=` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [candidateOfficeDistrict] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {string} [lastExpenditureDate]  When sorting by &#x60;expenditure_date&#x60;, this is populated with the &#x60;expenditure_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. 
         * @param {Array<string>} [candidateParty] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {number} [lastOfficeTotalYtd]  When sorting by &#x60;office_total_ytd&#x60;, this is populated with the &#x60;office_total_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.\&#39; 
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lastSupportOpposeIndicator]  When sorting by &#x60;support_oppose_indicator&#x60;, this is populated with the &#x60;support_oppose_indicator&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.\&#39; 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [payeeName]  Name of the entity that received the payment. 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {Array<string>} [filingForm]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {Array<boolean>} [isNotice]  Record filed as 24- or 48-hour notice. 
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [lastExpenditureAmount]  When sorting by &#x60;expenditure_amount&#x60;, this is populated with the &#x60;expenditure_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. 
         * @param {Array<'' | 'H' | 'S' | 'P'>} [candidateOffice] Federal office candidate runs for: H, S or P
         * @param {Array<string>} [candidateOfficeState] US state or territory
         * @param {string} [minImageNumber] 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleEGet(apiKey: string, candidateOfficeDistrict?: Array<string>, lastIndex?: number, lastExpenditureDate?: string, candidateParty?: Array<string>, minAmount?: string, maxDate?: string, lastOfficeTotalYtd?: number, committeeId?: Array<string>, lastSupportOpposeIndicator?: string, lineNumber?: string, maxImageNumber?: string, sort?: string, payeeName?: Array<string>, sortHideNull?: boolean, filingForm?: Array<string>, maxAmount?: string, supportOpposeIndicator?: Array<'S' | 'O'>, candidateId?: Array<string>, minDate?: string, isNotice?: Array<boolean>, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, lastExpenditureAmount?: number, candidateOffice?: Array<'' | 'H' | 'S' | 'P'>, candidateOfficeState?: Array<string>, minImageNumber?: string, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return IndependentExpendituresApiFp(configuration).schedulesScheduleEGet(apiKey, candidateOfficeDistrict, lastIndex, lastExpenditureDate, candidateParty, minAmount, maxDate, lastOfficeTotalYtd, committeeId, lastSupportOpposeIndicator, lineNumber, maxImageNumber, sort, payeeName, sortHideNull, filingForm, maxAmount, supportOpposeIndicator, candidateId, minDate, isNotice, sortNullOnly, imageNumber, perPage, lastExpenditureAmount, candidateOffice, candidateOfficeState, minImageNumber, cycle, sortNullsLast, options)(axios, basePath);
        },
    };
};

/**
 * IndependentExpendituresApi - object-oriented interface
 * @export
 * @class IndependentExpendituresApi
 * @extends {BaseAPI}
 */
export class IndependentExpendituresApi extends BaseAPI {
    /**
     * Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {'S' | 'O'} [supportOppose] Support or opposition
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [state] US state or territory where a candidate runs for office
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndependentExpendituresApi
     */
    public committeeCommitteeIdSchedulesScheduleEByCandidateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
        return IndependentExpendituresApiFp(this.configuration).committeeCommitteeIdSchedulesScheduleEByCandidateGet(apiKey, committeeId, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     * Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [district] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {'S' | 'O'} [supportOppose] Support or opposition
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [state] US state or territory where a candidate runs for office
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {'house' | 'senate' | 'president'} [office] Federal office candidate runs for: H, S or P
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndependentExpendituresApi
     */
    public schedulesScheduleEByCandidateGet(apiKey: string, sort?: string, sortHideNull?: boolean, district?: string, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, supportOppose?: 'S' | 'O', cycle?: Array<number>, state?: string, perPage?: number, office?: 'house' | 'senate' | 'president', electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
        return IndependentExpendituresApiFp(this.configuration).schedulesScheduleEByCandidateGet(apiKey, sort, sortHideNull, district, page, candidateId, sortNullOnly, supportOppose, cycle, state, perPage, office, electionFull, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [maxExpenditureDate] Selects all items expended by this committee after this date
     * @param {string} [minExpenditureAmount] Selects all items expended by this committee greater than this amount
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<string>} [candidateName] Name of candidate running for office
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {Array<string>} [payeeName] Name of the entity that received the payment
     * @param {string} [minExpenditureDate] Selects all items expended by this committee before this date
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Support or opposition
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {string} [maxExpenditureAmount] Selects all items expended by this committee less than this amount
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndependentExpendituresApi
     */
    public schedulesScheduleEEfileGet(apiKey: string, maxExpenditureDate?: string, minExpenditureAmount?: string, committeeId?: Array<string>, candidateName?: Array<string>, sort?: string, payeeName?: Array<string>, minExpenditureDate?: string, sortHideNull?: boolean, supportOpposeIndicator?: Array<'S' | 'O'>, page?: number, candidateId?: Array<string>, sortNullOnly?: boolean, imageNumber?: Array<string>, maxExpenditureAmount?: string, perPage?: number, sortNullsLast?: boolean, options?: any) {
        return IndependentExpendituresApiFp(this.configuration).schedulesScheduleEEfileGet(apiKey, maxExpenditureDate, minExpenditureAmount, committeeId, candidateName, sort, payeeName, minExpenditureDate, sortHideNull, supportOpposeIndicator, page, candidateId, sortNullOnly, imageNumber, maxExpenditureAmount, perPage, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \"expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidateâ€™s authorized committee, or their agents, or a political party or its agents.\"  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don\'t double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in `/schedule/schedule_e/`.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `expenditure_amount`, you might receive a page of results with the following pagination information:  ```  \"pagination\": {     \"count\": 152623,     \"last_indexes\": {       \"last_index\": \"3023037\",       \"last_expenditure_amount\": -17348.5     },     \"per_page\": 20,     \"pages\": 7632   } } ```  To fetch the next page of sorted results, append `last_index=3023037` and `last_expenditure_amount=` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<string>} [candidateOfficeDistrict] Two-digit US House distirict of the office the candidate is running for. Presidential, Senate and House at-large candidates will have District 00.
     * @param {number} [lastIndex] Index of last result from previous page
     * @param {string} [lastExpenditureDate]  When sorting by &#x60;expenditure_date&#x60;, this is populated with the &#x60;expenditure_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. 
     * @param {Array<string>} [candidateParty] Three-letter code for the party affiliated with a candidate or committee. For example, DEM for Democratic Party and REP for Republican Party.
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {string} [maxDate] Maximum date
     * @param {number} [lastOfficeTotalYtd]  When sorting by &#x60;office_total_ytd&#x60;, this is populated with the &#x60;office_total_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.\&#39; 
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [lastSupportOpposeIndicator]  When sorting by &#x60;support_oppose_indicator&#x60;, this is populated with the &#x60;support_oppose_indicator&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.\&#39; 
     * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
     * @param {string} [maxImageNumber] 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {Array<string>} [payeeName]  Name of the entity that received the payment. 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {Array<string>} [filingForm]  Indicates the type of form that was filed. ex: F1, F2, F3P, F3X etc... 
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {Array<'S' | 'O'>} [supportOpposeIndicator] Explains if the money was spent in order to support or oppose a candidate or candidates. (Coded S or O for support or oppose.) This indicator applies to independent expenditures and communication costs.
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {string} [minDate] Minimum date
     * @param {Array<boolean>} [isNotice]  Record filed as 24- or 48-hour notice. 
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {number} [lastExpenditureAmount]  When sorting by &#x60;expenditure_amount&#x60;, this is populated with the &#x60;expenditure_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page. 
     * @param {Array<'' | 'H' | 'S' | 'P'>} [candidateOffice] Federal office candidate runs for: H, S or P
     * @param {Array<string>} [candidateOfficeState] US state or territory
     * @param {string} [minImageNumber] 
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndependentExpendituresApi
     */
    public schedulesScheduleEGet(apiKey: string, candidateOfficeDistrict?: Array<string>, lastIndex?: number, lastExpenditureDate?: string, candidateParty?: Array<string>, minAmount?: string, maxDate?: string, lastOfficeTotalYtd?: number, committeeId?: Array<string>, lastSupportOpposeIndicator?: string, lineNumber?: string, maxImageNumber?: string, sort?: string, payeeName?: Array<string>, sortHideNull?: boolean, filingForm?: Array<string>, maxAmount?: string, supportOpposeIndicator?: Array<'S' | 'O'>, candidateId?: Array<string>, minDate?: string, isNotice?: Array<boolean>, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, lastExpenditureAmount?: number, candidateOffice?: Array<'' | 'H' | 'S' | 'P'>, candidateOfficeState?: Array<string>, minImageNumber?: string, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return IndependentExpendituresApiFp(this.configuration).schedulesScheduleEGet(apiKey, candidateOfficeDistrict, lastIndex, lastExpenditureDate, candidateParty, minAmount, maxDate, lastOfficeTotalYtd, committeeId, lastSupportOpposeIndicator, lineNumber, maxImageNumber, sort, payeeName, sortHideNull, filingForm, maxAmount, supportOpposeIndicator, candidateId, minDate, isNotice, sortNullOnly, imageNumber, perPage, lastExpenditureAmount, candidateOffice, candidateOfficeState, minImageNumber, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

}


/**
 * LegalApi - axios parameter creator
 * @export
 */
export const LegalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Search legal documents by type, or across all document types using keywords, parameter values and ranges. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<'F' | 'V' | 'D' | 'R' | 'W' | 'C' | 'S'>} [aoCategory] Category of the document
         * @param {string} [aoMaxIssueDate] Latest issue date of advisory opinion
         * @param {string} [caseMaxOpenDate] Filter cases by latest date opened
         * @param {Array<string>} [aoNo] Force advisory opinion number
         * @param {string} [q] Text to search legal documents for.
         * @param {boolean} [aoIsPending] AO is pending
         * @param {string} [aoStatus] Status of AO (pending, withdrawn, or final)
         * @param {Array<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16>} [aoRequestorType] Code of the advisory opinion requestor type.
         * @param {boolean} [aoCitationRequireAll] Require all citations to be in document (default behavior is any)
         * @param {string} [caseMinOpenDate] Filter cases by earliest date opened
         * @param {string} [aoMinRequestDate] Earliest request date of advisory opinion
         * @param {string} [type] Document type to refine search by
         * @param {string} [caseMaxCloseDate] Filter cases by latest date closed
         * @param {number} [hitsReturned] Number of results to return (max 10).
         * @param {Array<string>} [murDispositions] Filter MURs by dispositions
         * @param {Array<string>} [afName] Admin fine committee name
         * @param {string} [murMaxCloseDate] Filter MURs by latest date closed
         * @param {string} [murMinOpenDate] Filter MURs by earliest date opened
         * @param {string} [afMaxFdDate] Filter cases by latest Final Determination date
         * @param {number} [afRtbFineAmount] Filter cases by Reason to Believe fine amount
         * @param {Array<string>} [murNo] Filter MURs by case number
         * @param {number} [fromHit] Get results starting from this index.
         * @param {Array<string>} [aoRegulatoryCitation] Search for regulatory citations
         * @param {string} [caseRespondents] Filter cases by respondents
         * @param {Array<string>} [aoEntityName] Search by name of commenter or representative
         * @param {number} [murElectionCycles] Filter MURs by election cycles
         * @param {string} [afCommitteeId] Admin fine committee ID
         * @param {number} [afFdFineAmount] Filter cases by Final Determination fine amount
         * @param {string} [aoMinIssueDate] Earliest issue date of advisory opinion
         * @param {Array<string>} [aoStatutoryCitation] Search for statutory citations
         * @param {Array<string>} [caseDispositions] Filter cases by dispositions
         * @param {string} [murRespondents] Filter MURs by respondents
         * @param {string} [murMinCloseDate] Filter MURs by earliest date closed
         * @param {number} [caseElectionCycles] Filter cases by election cycles
         * @param {Array<string>} [aoName] Force advisory opinion name
         * @param {string} [aoRequestor] The requestor of the advisory opinion
         * @param {string} [caseMinCloseDate] Filter cases by earliest date closed
         * @param {string} [aoMaxRequestDate] Latest request date of advisory opinion
         * @param {string} [murMaxOpenDate] Filter MURs by latest date opened
         * @param {string} [afMinRtbDate] Filter cases by earliest Reason to Believe date
         * @param {Array<string>} [murDocumentCategory] Filter MURs by category of associated documents
         * @param {string} [afMaxRtbDate] Filter cases by latest Reason to Believe date
         * @param {Array<string>} [caseNo] Enforcement matter case number
         * @param {Array<string>} [caseDocumentCategory] Filter cases by category of associated documents
         * @param {string} [afReportYear] Admin fine report year
         * @param {string} [afMinFdDate] Filter cases by earliest Final Determination date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalSearchGet(apiKey: string, aoCategory?: Array<'F' | 'V' | 'D' | 'R' | 'W' | 'C' | 'S'>, aoMaxIssueDate?: string, caseMaxOpenDate?: string, aoNo?: Array<string>, q?: string, aoIsPending?: boolean, aoStatus?: string, aoRequestorType?: Array<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16>, aoCitationRequireAll?: boolean, caseMinOpenDate?: string, aoMinRequestDate?: string, type?: string, caseMaxCloseDate?: string, hitsReturned?: number, murDispositions?: Array<string>, afName?: Array<string>, murMaxCloseDate?: string, murMinOpenDate?: string, afMaxFdDate?: string, afRtbFineAmount?: number, murNo?: Array<string>, fromHit?: number, aoRegulatoryCitation?: Array<string>, caseRespondents?: string, aoEntityName?: Array<string>, murElectionCycles?: number, afCommitteeId?: string, afFdFineAmount?: number, aoMinIssueDate?: string, aoStatutoryCitation?: Array<string>, caseDispositions?: Array<string>, murRespondents?: string, murMinCloseDate?: string, caseElectionCycles?: number, aoName?: Array<string>, aoRequestor?: string, caseMinCloseDate?: string, aoMaxRequestDate?: string, murMaxOpenDate?: string, afMinRtbDate?: string, murDocumentCategory?: Array<string>, afMaxRtbDate?: string, caseNo?: Array<string>, caseDocumentCategory?: Array<string>, afReportYear?: string, afMinFdDate?: string, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling legalSearchGet.');
            }
            const localVarPath = `/legal/search/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (aoCategory) {
                localVarQueryParameter['ao_category'] = aoCategory;
            }

            if (aoMaxIssueDate !== undefined) {
                localVarQueryParameter['ao_max_issue_date'] = (aoMaxIssueDate as any instanceof Date) ?
                    (aoMaxIssueDate as any).toISOString().substr(0,10) :
                    aoMaxIssueDate;
            }

            if (caseMaxOpenDate !== undefined) {
                localVarQueryParameter['case_max_open_date'] = (caseMaxOpenDate as any instanceof Date) ?
                    (caseMaxOpenDate as any).toISOString().substr(0,10) :
                    caseMaxOpenDate;
            }

            if (aoNo) {
                localVarQueryParameter['ao_no'] = aoNo;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (aoIsPending !== undefined) {
                localVarQueryParameter['ao_is_pending'] = aoIsPending;
            }

            if (aoStatus !== undefined) {
                localVarQueryParameter['ao_status'] = aoStatus;
            }

            if (aoRequestorType) {
                localVarQueryParameter['ao_requestor_type'] = aoRequestorType;
            }

            if (aoCitationRequireAll !== undefined) {
                localVarQueryParameter['ao_citation_require_all'] = aoCitationRequireAll;
            }

            if (caseMinOpenDate !== undefined) {
                localVarQueryParameter['case_min_open_date'] = (caseMinOpenDate as any instanceof Date) ?
                    (caseMinOpenDate as any).toISOString().substr(0,10) :
                    caseMinOpenDate;
            }

            if (aoMinRequestDate !== undefined) {
                localVarQueryParameter['ao_min_request_date'] = (aoMinRequestDate as any instanceof Date) ?
                    (aoMinRequestDate as any).toISOString().substr(0,10) :
                    aoMinRequestDate;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (caseMaxCloseDate !== undefined) {
                localVarQueryParameter['case_max_close_date'] = (caseMaxCloseDate as any instanceof Date) ?
                    (caseMaxCloseDate as any).toISOString().substr(0,10) :
                    caseMaxCloseDate;
            }

            if (hitsReturned !== undefined) {
                localVarQueryParameter['hits_returned'] = hitsReturned;
            }

            if (murDispositions) {
                localVarQueryParameter['mur_dispositions'] = murDispositions;
            }

            if (afName) {
                localVarQueryParameter['af_name'] = afName;
            }

            if (murMaxCloseDate !== undefined) {
                localVarQueryParameter['mur_max_close_date'] = (murMaxCloseDate as any instanceof Date) ?
                    (murMaxCloseDate as any).toISOString().substr(0,10) :
                    murMaxCloseDate;
            }

            if (murMinOpenDate !== undefined) {
                localVarQueryParameter['mur_min_open_date'] = (murMinOpenDate as any instanceof Date) ?
                    (murMinOpenDate as any).toISOString().substr(0,10) :
                    murMinOpenDate;
            }

            if (afMaxFdDate !== undefined) {
                localVarQueryParameter['af_max_fd_date'] = (afMaxFdDate as any instanceof Date) ?
                    (afMaxFdDate as any).toISOString().substr(0,10) :
                    afMaxFdDate;
            }

            if (afRtbFineAmount !== undefined) {
                localVarQueryParameter['af_rtb_fine_amount'] = afRtbFineAmount;
            }

            if (murNo) {
                localVarQueryParameter['mur_no'] = murNo;
            }

            if (fromHit !== undefined) {
                localVarQueryParameter['from_hit'] = fromHit;
            }

            if (aoRegulatoryCitation) {
                localVarQueryParameter['ao_regulatory_citation'] = aoRegulatoryCitation;
            }

            if (caseRespondents !== undefined) {
                localVarQueryParameter['case_respondents'] = caseRespondents;
            }

            if (aoEntityName) {
                localVarQueryParameter['ao_entity_name'] = aoEntityName;
            }

            if (murElectionCycles !== undefined) {
                localVarQueryParameter['mur_election_cycles'] = murElectionCycles;
            }

            if (afCommitteeId !== undefined) {
                localVarQueryParameter['af_committee_id'] = afCommitteeId;
            }

            if (afFdFineAmount !== undefined) {
                localVarQueryParameter['af_fd_fine_amount'] = afFdFineAmount;
            }

            if (aoMinIssueDate !== undefined) {
                localVarQueryParameter['ao_min_issue_date'] = (aoMinIssueDate as any instanceof Date) ?
                    (aoMinIssueDate as any).toISOString().substr(0,10) :
                    aoMinIssueDate;
            }

            if (aoStatutoryCitation) {
                localVarQueryParameter['ao_statutory_citation'] = aoStatutoryCitation;
            }

            if (caseDispositions) {
                localVarQueryParameter['case_dispositions'] = caseDispositions;
            }

            if (murRespondents !== undefined) {
                localVarQueryParameter['mur_respondents'] = murRespondents;
            }

            if (murMinCloseDate !== undefined) {
                localVarQueryParameter['mur_min_close_date'] = (murMinCloseDate as any instanceof Date) ?
                    (murMinCloseDate as any).toISOString().substr(0,10) :
                    murMinCloseDate;
            }

            if (caseElectionCycles !== undefined) {
                localVarQueryParameter['case_election_cycles'] = caseElectionCycles;
            }

            if (aoName) {
                localVarQueryParameter['ao_name'] = aoName;
            }

            if (aoRequestor !== undefined) {
                localVarQueryParameter['ao_requestor'] = aoRequestor;
            }

            if (caseMinCloseDate !== undefined) {
                localVarQueryParameter['case_min_close_date'] = (caseMinCloseDate as any instanceof Date) ?
                    (caseMinCloseDate as any).toISOString().substr(0,10) :
                    caseMinCloseDate;
            }

            if (aoMaxRequestDate !== undefined) {
                localVarQueryParameter['ao_max_request_date'] = (aoMaxRequestDate as any instanceof Date) ?
                    (aoMaxRequestDate as any).toISOString().substr(0,10) :
                    aoMaxRequestDate;
            }

            if (murMaxOpenDate !== undefined) {
                localVarQueryParameter['mur_max_open_date'] = (murMaxOpenDate as any instanceof Date) ?
                    (murMaxOpenDate as any).toISOString().substr(0,10) :
                    murMaxOpenDate;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (afMinRtbDate !== undefined) {
                localVarQueryParameter['af_min_rtb_date'] = (afMinRtbDate as any instanceof Date) ?
                    (afMinRtbDate as any).toISOString().substr(0,10) :
                    afMinRtbDate;
            }

            if (murDocumentCategory) {
                localVarQueryParameter['mur_document_category'] = murDocumentCategory;
            }

            if (afMaxRtbDate !== undefined) {
                localVarQueryParameter['af_max_rtb_date'] = (afMaxRtbDate as any instanceof Date) ?
                    (afMaxRtbDate as any).toISOString().substr(0,10) :
                    afMaxRtbDate;
            }

            if (caseNo) {
                localVarQueryParameter['case_no'] = caseNo;
            }

            if (caseDocumentCategory) {
                localVarQueryParameter['case_document_category'] = caseDocumentCategory;
            }

            if (afReportYear !== undefined) {
                localVarQueryParameter['af_report_year'] = afReportYear;
            }

            if (afMinFdDate !== undefined) {
                localVarQueryParameter['af_min_fd_date'] = (afMinFdDate as any instanceof Date) ?
                    (afMinFdDate as any).toISOString().substr(0,10) :
                    afMinFdDate;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LegalApi - functional programming interface
 * @export
 */
export const LegalApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  Search legal documents by type, or across all document types using keywords, parameter values and ranges. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<'F' | 'V' | 'D' | 'R' | 'W' | 'C' | 'S'>} [aoCategory] Category of the document
         * @param {string} [aoMaxIssueDate] Latest issue date of advisory opinion
         * @param {string} [caseMaxOpenDate] Filter cases by latest date opened
         * @param {Array<string>} [aoNo] Force advisory opinion number
         * @param {string} [q] Text to search legal documents for.
         * @param {boolean} [aoIsPending] AO is pending
         * @param {string} [aoStatus] Status of AO (pending, withdrawn, or final)
         * @param {Array<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16>} [aoRequestorType] Code of the advisory opinion requestor type.
         * @param {boolean} [aoCitationRequireAll] Require all citations to be in document (default behavior is any)
         * @param {string} [caseMinOpenDate] Filter cases by earliest date opened
         * @param {string} [aoMinRequestDate] Earliest request date of advisory opinion
         * @param {string} [type] Document type to refine search by
         * @param {string} [caseMaxCloseDate] Filter cases by latest date closed
         * @param {number} [hitsReturned] Number of results to return (max 10).
         * @param {Array<string>} [murDispositions] Filter MURs by dispositions
         * @param {Array<string>} [afName] Admin fine committee name
         * @param {string} [murMaxCloseDate] Filter MURs by latest date closed
         * @param {string} [murMinOpenDate] Filter MURs by earliest date opened
         * @param {string} [afMaxFdDate] Filter cases by latest Final Determination date
         * @param {number} [afRtbFineAmount] Filter cases by Reason to Believe fine amount
         * @param {Array<string>} [murNo] Filter MURs by case number
         * @param {number} [fromHit] Get results starting from this index.
         * @param {Array<string>} [aoRegulatoryCitation] Search for regulatory citations
         * @param {string} [caseRespondents] Filter cases by respondents
         * @param {Array<string>} [aoEntityName] Search by name of commenter or representative
         * @param {number} [murElectionCycles] Filter MURs by election cycles
         * @param {string} [afCommitteeId] Admin fine committee ID
         * @param {number} [afFdFineAmount] Filter cases by Final Determination fine amount
         * @param {string} [aoMinIssueDate] Earliest issue date of advisory opinion
         * @param {Array<string>} [aoStatutoryCitation] Search for statutory citations
         * @param {Array<string>} [caseDispositions] Filter cases by dispositions
         * @param {string} [murRespondents] Filter MURs by respondents
         * @param {string} [murMinCloseDate] Filter MURs by earliest date closed
         * @param {number} [caseElectionCycles] Filter cases by election cycles
         * @param {Array<string>} [aoName] Force advisory opinion name
         * @param {string} [aoRequestor] The requestor of the advisory opinion
         * @param {string} [caseMinCloseDate] Filter cases by earliest date closed
         * @param {string} [aoMaxRequestDate] Latest request date of advisory opinion
         * @param {string} [murMaxOpenDate] Filter MURs by latest date opened
         * @param {string} [afMinRtbDate] Filter cases by earliest Reason to Believe date
         * @param {Array<string>} [murDocumentCategory] Filter MURs by category of associated documents
         * @param {string} [afMaxRtbDate] Filter cases by latest Reason to Believe date
         * @param {Array<string>} [caseNo] Enforcement matter case number
         * @param {Array<string>} [caseDocumentCategory] Filter cases by category of associated documents
         * @param {string} [afReportYear] Admin fine report year
         * @param {string} [afMinFdDate] Filter cases by earliest Final Determination date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalSearchGet(apiKey: string, aoCategory?: Array<'F' | 'V' | 'D' | 'R' | 'W' | 'C' | 'S'>, aoMaxIssueDate?: string, caseMaxOpenDate?: string, aoNo?: Array<string>, q?: string, aoIsPending?: boolean, aoStatus?: string, aoRequestorType?: Array<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16>, aoCitationRequireAll?: boolean, caseMinOpenDate?: string, aoMinRequestDate?: string, type?: string, caseMaxCloseDate?: string, hitsReturned?: number, murDispositions?: Array<string>, afName?: Array<string>, murMaxCloseDate?: string, murMinOpenDate?: string, afMaxFdDate?: string, afRtbFineAmount?: number, murNo?: Array<string>, fromHit?: number, aoRegulatoryCitation?: Array<string>, caseRespondents?: string, aoEntityName?: Array<string>, murElectionCycles?: number, afCommitteeId?: string, afFdFineAmount?: number, aoMinIssueDate?: string, aoStatutoryCitation?: Array<string>, caseDispositions?: Array<string>, murRespondents?: string, murMinCloseDate?: string, caseElectionCycles?: number, aoName?: Array<string>, aoRequestor?: string, caseMinCloseDate?: string, aoMaxRequestDate?: string, murMaxOpenDate?: string, afMinRtbDate?: string, murDocumentCategory?: Array<string>, afMaxRtbDate?: string, caseNo?: Array<string>, caseDocumentCategory?: Array<string>, afReportYear?: string, afMinFdDate?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponseDefault1> {
            const localVarAxiosArgs = LegalApiAxiosParamCreator(configuration).legalSearchGet(apiKey, aoCategory, aoMaxIssueDate, caseMaxOpenDate, aoNo, q, aoIsPending, aoStatus, aoRequestorType, aoCitationRequireAll, caseMinOpenDate, aoMinRequestDate, type, caseMaxCloseDate, hitsReturned, murDispositions, afName, murMaxCloseDate, murMinOpenDate, afMaxFdDate, afRtbFineAmount, murNo, fromHit, aoRegulatoryCitation, caseRespondents, aoEntityName, murElectionCycles, afCommitteeId, afFdFineAmount, aoMinIssueDate, aoStatutoryCitation, caseDispositions, murRespondents, murMinCloseDate, caseElectionCycles, aoName, aoRequestor, caseMinCloseDate, aoMaxRequestDate, murMaxOpenDate, afMinRtbDate, murDocumentCategory, afMaxRtbDate, caseNo, caseDocumentCategory, afReportYear, afMinFdDate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LegalApi - factory interface
 * @export
 */
export const LegalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  Search legal documents by type, or across all document types using keywords, parameter values and ranges. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<'F' | 'V' | 'D' | 'R' | 'W' | 'C' | 'S'>} [aoCategory] Category of the document
         * @param {string} [aoMaxIssueDate] Latest issue date of advisory opinion
         * @param {string} [caseMaxOpenDate] Filter cases by latest date opened
         * @param {Array<string>} [aoNo] Force advisory opinion number
         * @param {string} [q] Text to search legal documents for.
         * @param {boolean} [aoIsPending] AO is pending
         * @param {string} [aoStatus] Status of AO (pending, withdrawn, or final)
         * @param {Array<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16>} [aoRequestorType] Code of the advisory opinion requestor type.
         * @param {boolean} [aoCitationRequireAll] Require all citations to be in document (default behavior is any)
         * @param {string} [caseMinOpenDate] Filter cases by earliest date opened
         * @param {string} [aoMinRequestDate] Earliest request date of advisory opinion
         * @param {string} [type] Document type to refine search by
         * @param {string} [caseMaxCloseDate] Filter cases by latest date closed
         * @param {number} [hitsReturned] Number of results to return (max 10).
         * @param {Array<string>} [murDispositions] Filter MURs by dispositions
         * @param {Array<string>} [afName] Admin fine committee name
         * @param {string} [murMaxCloseDate] Filter MURs by latest date closed
         * @param {string} [murMinOpenDate] Filter MURs by earliest date opened
         * @param {string} [afMaxFdDate] Filter cases by latest Final Determination date
         * @param {number} [afRtbFineAmount] Filter cases by Reason to Believe fine amount
         * @param {Array<string>} [murNo] Filter MURs by case number
         * @param {number} [fromHit] Get results starting from this index.
         * @param {Array<string>} [aoRegulatoryCitation] Search for regulatory citations
         * @param {string} [caseRespondents] Filter cases by respondents
         * @param {Array<string>} [aoEntityName] Search by name of commenter or representative
         * @param {number} [murElectionCycles] Filter MURs by election cycles
         * @param {string} [afCommitteeId] Admin fine committee ID
         * @param {number} [afFdFineAmount] Filter cases by Final Determination fine amount
         * @param {string} [aoMinIssueDate] Earliest issue date of advisory opinion
         * @param {Array<string>} [aoStatutoryCitation] Search for statutory citations
         * @param {Array<string>} [caseDispositions] Filter cases by dispositions
         * @param {string} [murRespondents] Filter MURs by respondents
         * @param {string} [murMinCloseDate] Filter MURs by earliest date closed
         * @param {number} [caseElectionCycles] Filter cases by election cycles
         * @param {Array<string>} [aoName] Force advisory opinion name
         * @param {string} [aoRequestor] The requestor of the advisory opinion
         * @param {string} [caseMinCloseDate] Filter cases by earliest date closed
         * @param {string} [aoMaxRequestDate] Latest request date of advisory opinion
         * @param {string} [murMaxOpenDate] Filter MURs by latest date opened
         * @param {string} [afMinRtbDate] Filter cases by earliest Reason to Believe date
         * @param {Array<string>} [murDocumentCategory] Filter MURs by category of associated documents
         * @param {string} [afMaxRtbDate] Filter cases by latest Reason to Believe date
         * @param {Array<string>} [caseNo] Enforcement matter case number
         * @param {Array<string>} [caseDocumentCategory] Filter cases by category of associated documents
         * @param {string} [afReportYear] Admin fine report year
         * @param {string} [afMinFdDate] Filter cases by earliest Final Determination date
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        legalSearchGet(apiKey: string, aoCategory?: Array<'F' | 'V' | 'D' | 'R' | 'W' | 'C' | 'S'>, aoMaxIssueDate?: string, caseMaxOpenDate?: string, aoNo?: Array<string>, q?: string, aoIsPending?: boolean, aoStatus?: string, aoRequestorType?: Array<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16>, aoCitationRequireAll?: boolean, caseMinOpenDate?: string, aoMinRequestDate?: string, type?: string, caseMaxCloseDate?: string, hitsReturned?: number, murDispositions?: Array<string>, afName?: Array<string>, murMaxCloseDate?: string, murMinOpenDate?: string, afMaxFdDate?: string, afRtbFineAmount?: number, murNo?: Array<string>, fromHit?: number, aoRegulatoryCitation?: Array<string>, caseRespondents?: string, aoEntityName?: Array<string>, murElectionCycles?: number, afCommitteeId?: string, afFdFineAmount?: number, aoMinIssueDate?: string, aoStatutoryCitation?: Array<string>, caseDispositions?: Array<string>, murRespondents?: string, murMinCloseDate?: string, caseElectionCycles?: number, aoName?: Array<string>, aoRequestor?: string, caseMinCloseDate?: string, aoMaxRequestDate?: string, murMaxOpenDate?: string, afMinRtbDate?: string, murDocumentCategory?: Array<string>, afMaxRtbDate?: string, caseNo?: Array<string>, caseDocumentCategory?: Array<string>, afReportYear?: string, afMinFdDate?: string, options?: any) {
            return LegalApiFp(configuration).legalSearchGet(apiKey, aoCategory, aoMaxIssueDate, caseMaxOpenDate, aoNo, q, aoIsPending, aoStatus, aoRequestorType, aoCitationRequireAll, caseMinOpenDate, aoMinRequestDate, type, caseMaxCloseDate, hitsReturned, murDispositions, afName, murMaxCloseDate, murMinOpenDate, afMaxFdDate, afRtbFineAmount, murNo, fromHit, aoRegulatoryCitation, caseRespondents, aoEntityName, murElectionCycles, afCommitteeId, afFdFineAmount, aoMinIssueDate, aoStatutoryCitation, caseDispositions, murRespondents, murMinCloseDate, caseElectionCycles, aoName, aoRequestor, caseMinCloseDate, aoMaxRequestDate, murMaxOpenDate, afMinRtbDate, murDocumentCategory, afMaxRtbDate, caseNo, caseDocumentCategory, afReportYear, afMinFdDate, options)(axios, basePath);
        },
    };
};

/**
 * LegalApi - object-oriented interface
 * @export
 * @class LegalApi
 * @extends {BaseAPI}
 */
export class LegalApi extends BaseAPI {
    /**
     *  Search legal documents by type, or across all document types using keywords, parameter values and ranges. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<'F' | 'V' | 'D' | 'R' | 'W' | 'C' | 'S'>} [aoCategory] Category of the document
     * @param {string} [aoMaxIssueDate] Latest issue date of advisory opinion
     * @param {string} [caseMaxOpenDate] Filter cases by latest date opened
     * @param {Array<string>} [aoNo] Force advisory opinion number
     * @param {string} [q] Text to search legal documents for.
     * @param {boolean} [aoIsPending] AO is pending
     * @param {string} [aoStatus] Status of AO (pending, withdrawn, or final)
     * @param {Array<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16>} [aoRequestorType] Code of the advisory opinion requestor type.
     * @param {boolean} [aoCitationRequireAll] Require all citations to be in document (default behavior is any)
     * @param {string} [caseMinOpenDate] Filter cases by earliest date opened
     * @param {string} [aoMinRequestDate] Earliest request date of advisory opinion
     * @param {string} [type] Document type to refine search by
     * @param {string} [caseMaxCloseDate] Filter cases by latest date closed
     * @param {number} [hitsReturned] Number of results to return (max 10).
     * @param {Array<string>} [murDispositions] Filter MURs by dispositions
     * @param {Array<string>} [afName] Admin fine committee name
     * @param {string} [murMaxCloseDate] Filter MURs by latest date closed
     * @param {string} [murMinOpenDate] Filter MURs by earliest date opened
     * @param {string} [afMaxFdDate] Filter cases by latest Final Determination date
     * @param {number} [afRtbFineAmount] Filter cases by Reason to Believe fine amount
     * @param {Array<string>} [murNo] Filter MURs by case number
     * @param {number} [fromHit] Get results starting from this index.
     * @param {Array<string>} [aoRegulatoryCitation] Search for regulatory citations
     * @param {string} [caseRespondents] Filter cases by respondents
     * @param {Array<string>} [aoEntityName] Search by name of commenter or representative
     * @param {number} [murElectionCycles] Filter MURs by election cycles
     * @param {string} [afCommitteeId] Admin fine committee ID
     * @param {number} [afFdFineAmount] Filter cases by Final Determination fine amount
     * @param {string} [aoMinIssueDate] Earliest issue date of advisory opinion
     * @param {Array<string>} [aoStatutoryCitation] Search for statutory citations
     * @param {Array<string>} [caseDispositions] Filter cases by dispositions
     * @param {string} [murRespondents] Filter MURs by respondents
     * @param {string} [murMinCloseDate] Filter MURs by earliest date closed
     * @param {number} [caseElectionCycles] Filter cases by election cycles
     * @param {Array<string>} [aoName] Force advisory opinion name
     * @param {string} [aoRequestor] The requestor of the advisory opinion
     * @param {string} [caseMinCloseDate] Filter cases by earliest date closed
     * @param {string} [aoMaxRequestDate] Latest request date of advisory opinion
     * @param {string} [murMaxOpenDate] Filter MURs by latest date opened
     * @param {string} [afMinRtbDate] Filter cases by earliest Reason to Believe date
     * @param {Array<string>} [murDocumentCategory] Filter MURs by category of associated documents
     * @param {string} [afMaxRtbDate] Filter cases by latest Reason to Believe date
     * @param {Array<string>} [caseNo] Enforcement matter case number
     * @param {Array<string>} [caseDocumentCategory] Filter cases by category of associated documents
     * @param {string} [afReportYear] Admin fine report year
     * @param {string} [afMinFdDate] Filter cases by earliest Final Determination date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LegalApi
     */
    public legalSearchGet(apiKey: string, aoCategory?: Array<'F' | 'V' | 'D' | 'R' | 'W' | 'C' | 'S'>, aoMaxIssueDate?: string, caseMaxOpenDate?: string, aoNo?: Array<string>, q?: string, aoIsPending?: boolean, aoStatus?: string, aoRequestorType?: Array<1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16>, aoCitationRequireAll?: boolean, caseMinOpenDate?: string, aoMinRequestDate?: string, type?: string, caseMaxCloseDate?: string, hitsReturned?: number, murDispositions?: Array<string>, afName?: Array<string>, murMaxCloseDate?: string, murMinOpenDate?: string, afMaxFdDate?: string, afRtbFineAmount?: number, murNo?: Array<string>, fromHit?: number, aoRegulatoryCitation?: Array<string>, caseRespondents?: string, aoEntityName?: Array<string>, murElectionCycles?: number, afCommitteeId?: string, afFdFineAmount?: number, aoMinIssueDate?: string, aoStatutoryCitation?: Array<string>, caseDispositions?: Array<string>, murRespondents?: string, murMinCloseDate?: string, caseElectionCycles?: number, aoName?: Array<string>, aoRequestor?: string, caseMinCloseDate?: string, aoMaxRequestDate?: string, murMaxOpenDate?: string, afMinRtbDate?: string, murDocumentCategory?: Array<string>, afMaxRtbDate?: string, caseNo?: Array<string>, caseDocumentCategory?: Array<string>, afReportYear?: string, afMinFdDate?: string, options?: any) {
        return LegalApiFp(this.configuration).legalSearchGet(apiKey, aoCategory, aoMaxIssueDate, caseMaxOpenDate, aoNo, q, aoIsPending, aoStatus, aoRequestorType, aoCitationRequireAll, caseMinOpenDate, aoMinRequestDate, type, caseMaxCloseDate, hitsReturned, murDispositions, afName, murMaxCloseDate, murMinOpenDate, afMaxFdDate, afRtbFineAmount, murNo, fromHit, aoRegulatoryCitation, caseRespondents, aoEntityName, murElectionCycles, afCommitteeId, afFdFineAmount, aoMinIssueDate, aoStatutoryCitation, caseDispositions, murRespondents, murMinCloseDate, caseElectionCycles, aoName, aoRequestor, caseMinCloseDate, aoMaxRequestDate, murMaxOpenDate, afMinRtbDate, murDocumentCategory, afMaxRtbDate, caseNo, caseDocumentCategory, afReportYear, afMinFdDate, options)(this.axios, this.basePath);
    }

}


/**
 * LoansApi - axios parameter creator
 * @export
 */
export const LoansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {Array<string>} [candidateName] Name of candidate running for office
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minDate] Minimum date
         * @param {Array<string>} [loanerName] Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,other line of credit, or personal funds of the candidate
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [minPaymentToDate] Minimum payment to date
         * @param {string} [minImageNumber] 
         * @param {number} [maxPaymentToDate] Maximum payment to date
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleCGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, candidateName?: Array<string>, sort?: string, sortHideNull?: boolean, maxAmount?: string, page?: number, minDate?: string, loanerName?: Array<string>, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minPaymentToDate?: number, minImageNumber?: string, maxPaymentToDate?: number, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleCGet.');
            }
            const localVarPath = `/schedules/schedule_c/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (lineNumber !== undefined) {
                localVarQueryParameter['line_number'] = lineNumber;
            }

            if (maxImageNumber !== undefined) {
                localVarQueryParameter['max_image_number'] = maxImageNumber;
            }

            if (candidateName) {
                localVarQueryParameter['candidate_name'] = candidateName;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (loanerName) {
                localVarQueryParameter['loaner_name'] = loanerName;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (minPaymentToDate !== undefined) {
                localVarQueryParameter['min_payment_to_date'] = minPaymentToDate;
            }

            if (minImageNumber !== undefined) {
                localVarQueryParameter['min_image_number'] = minImageNumber;
            }

            if (maxPaymentToDate !== undefined) {
                localVarQueryParameter['max_payment_to_date'] = maxPaymentToDate;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleCSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleCSubIdGet.');
            }
            // verify required parameter 'subId' is not null or undefined
            if (subId === null || subId === undefined) {
                throw new RequiredError('subId','Required parameter subId was null or undefined when calling schedulesScheduleCSubIdGet.');
            }
            const localVarPath = `/schedules/schedule_c/{sub_id}/`
                .replace(`{${"sub_id"}}`, encodeURIComponent(String(subId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoansApi - functional programming interface
 * @export
 */
export const LoansApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {Array<string>} [candidateName] Name of candidate running for office
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minDate] Minimum date
         * @param {Array<string>} [loanerName] Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,other line of credit, or personal funds of the candidate
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [minPaymentToDate] Minimum payment to date
         * @param {string} [minImageNumber] 
         * @param {number} [maxPaymentToDate] Maximum payment to date
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleCGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, candidateName?: Array<string>, sort?: string, sortHideNull?: boolean, maxAmount?: string, page?: number, minDate?: string, loanerName?: Array<string>, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minPaymentToDate?: number, minImageNumber?: string, maxPaymentToDate?: number, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponseDefault3> {
            const localVarAxiosArgs = LoansApiAxiosParamCreator(configuration).schedulesScheduleCGet(apiKey, minAmount, maxDate, committeeId, lineNumber, maxImageNumber, candidateName, sort, sortHideNull, maxAmount, page, minDate, loanerName, sortNullOnly, imageNumber, perPage, minPaymentToDate, minImageNumber, maxPaymentToDate, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleCSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponseDefault3> {
            const localVarAxiosArgs = LoansApiAxiosParamCreator(configuration).schedulesScheduleCSubIdGet(apiKey, subId, perPage, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoansApi - factory interface
 * @export
 */
export const LoansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {Array<string>} [candidateName] Name of candidate running for office
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minDate] Minimum date
         * @param {Array<string>} [loanerName] Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,other line of credit, or personal funds of the candidate
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [minPaymentToDate] Minimum payment to date
         * @param {string} [minImageNumber] 
         * @param {number} [maxPaymentToDate] Maximum payment to date
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleCGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, candidateName?: Array<string>, sort?: string, sortHideNull?: boolean, maxAmount?: string, page?: number, minDate?: string, loanerName?: Array<string>, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minPaymentToDate?: number, minImageNumber?: string, maxPaymentToDate?: number, sortNullsLast?: boolean, options?: any) {
            return LoansApiFp(configuration).schedulesScheduleCGet(apiKey, minAmount, maxDate, committeeId, lineNumber, maxImageNumber, candidateName, sort, sortHideNull, maxAmount, page, minDate, loanerName, sortNullOnly, imageNumber, perPage, minPaymentToDate, minImageNumber, maxPaymentToDate, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleCSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options?: any) {
            return LoansApiFp(configuration).schedulesScheduleCSubIdGet(apiKey, subId, perPage, page, options)(axios, basePath);
        },
    };
};

/**
 * LoansApi - object-oriented interface
 * @export
 * @class LoansApi
 * @extends {BaseAPI}
 */
export class LoansApi extends BaseAPI {
    /**
     *  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {string} [maxDate] Maximum date
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
     * @param {string} [maxImageNumber] 
     * @param {Array<string>} [candidateName] Name of candidate running for office
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {string} [minDate] Minimum date
     * @param {Array<string>} [loanerName] Source of the loan (i.e., bank loan, brokerage account, credit card, home equity line of credit,other line of credit, or personal funds of the candidate
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {number} [minPaymentToDate] Minimum payment to date
     * @param {string} [minImageNumber] 
     * @param {number} [maxPaymentToDate] Maximum payment to date
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoansApi
     */
    public schedulesScheduleCGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, candidateName?: Array<string>, sort?: string, sortHideNull?: boolean, maxAmount?: string, page?: number, minDate?: string, loanerName?: Array<string>, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minPaymentToDate?: number, minImageNumber?: string, maxPaymentToDate?: number, sortNullsLast?: boolean, options?: any) {
        return LoansApiFp(this.configuration).schedulesScheduleCGet(apiKey, minAmount, maxDate, committeeId, lineNumber, maxImageNumber, candidateName, sort, sortHideNull, maxAmount, page, minDate, loanerName, sortNullOnly, imageNumber, perPage, minPaymentToDate, minImageNumber, maxPaymentToDate, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} subId 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoansApi
     */
    public schedulesScheduleCSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options?: any) {
        return LoansApiFp(this.configuration).schedulesScheduleCSubIdGet(apiKey, subId, perPage, page, options)(this.axios, this.basePath);
    }

}


/**
 * PartyCoordinatedExpendituresApi - axios parameter creator
 * @export
 */
export const PartyCoordinatedExpendituresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [payeeName] 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [minImageNumber] 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleFGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, payeeName?: Array<string>, sortHideNull?: boolean, maxAmount?: string, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minImageNumber?: string, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleFGet.');
            }
            const localVarPath = `/schedules/schedule_f/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (lineNumber !== undefined) {
                localVarQueryParameter['line_number'] = lineNumber;
            }

            if (maxImageNumber !== undefined) {
                localVarQueryParameter['max_image_number'] = maxImageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (payeeName) {
                localVarQueryParameter['payee_name'] = payeeName;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (minImageNumber !== undefined) {
                localVarQueryParameter['min_image_number'] = minImageNumber;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleFSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleFSubIdGet.');
            }
            // verify required parameter 'subId' is not null or undefined
            if (subId === null || subId === undefined) {
                throw new RequiredError('subId','Required parameter subId was null or undefined when calling schedulesScheduleFSubIdGet.');
            }
            const localVarPath = `/schedules/schedule_f/{sub_id}/`
                .replace(`{${"sub_id"}}`, encodeURIComponent(String(subId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartyCoordinatedExpendituresApi - functional programming interface
 * @export
 */
export const PartyCoordinatedExpendituresApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [payeeName] 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [minImageNumber] 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleFGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, payeeName?: Array<string>, sortHideNull?: boolean, maxAmount?: string, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minImageNumber?: string, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponseDefault5> {
            const localVarAxiosArgs = PartyCoordinatedExpendituresApiAxiosParamCreator(configuration).schedulesScheduleFGet(apiKey, minAmount, maxDate, committeeId, lineNumber, maxImageNumber, sort, payeeName, sortHideNull, maxAmount, page, candidateId, minDate, sortNullOnly, imageNumber, perPage, minImageNumber, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleFSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponseDefault5> {
            const localVarAxiosArgs = PartyCoordinatedExpendituresApiAxiosParamCreator(configuration).schedulesScheduleFSubIdGet(apiKey, subId, perPage, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PartyCoordinatedExpendituresApi - factory interface
 * @export
 */
export const PartyCoordinatedExpendituresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [payeeName] 
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {string} [minImageNumber] 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleFGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, payeeName?: Array<string>, sortHideNull?: boolean, maxAmount?: string, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minImageNumber?: string, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return PartyCoordinatedExpendituresApiFp(configuration).schedulesScheduleFGet(apiKey, minAmount, maxDate, committeeId, lineNumber, maxImageNumber, sort, payeeName, sortHideNull, maxAmount, page, candidateId, minDate, sortNullOnly, imageNumber, perPage, minImageNumber, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleFSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options?: any) {
            return PartyCoordinatedExpendituresApiFp(configuration).schedulesScheduleFSubIdGet(apiKey, subId, perPage, page, options)(axios, basePath);
        },
    };
};

/**
 * PartyCoordinatedExpendituresApi - object-oriented interface
 * @export
 * @class PartyCoordinatedExpendituresApi
 * @extends {BaseAPI}
 */
export class PartyCoordinatedExpendituresApi extends BaseAPI {
    /**
     *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {string} [maxDate] Maximum date
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
     * @param {string} [maxImageNumber] 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {Array<string>} [payeeName] 
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {Array<string>} [candidateId]  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {string} [minDate] Minimum date
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {string} [minImageNumber] 
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyCoordinatedExpendituresApi
     */
    public schedulesScheduleFGet(apiKey: string, minAmount?: string, maxDate?: string, committeeId?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, payeeName?: Array<string>, sortHideNull?: boolean, maxAmount?: string, page?: number, candidateId?: Array<string>, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, minImageNumber?: string, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return PartyCoordinatedExpendituresApiFp(this.configuration).schedulesScheduleFGet(apiKey, minAmount, maxDate, committeeId, lineNumber, maxImageNumber, sort, payeeName, sortHideNull, maxAmount, page, candidateId, minDate, sortNullOnly, imageNumber, perPage, minImageNumber, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} subId 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartyCoordinatedExpendituresApi
     */
    public schedulesScheduleFSubIdGet(apiKey: string, subId: string, perPage?: number, page?: number, options?: any) {
        return PartyCoordinatedExpendituresApiFp(this.configuration).schedulesScheduleFSubIdGet(apiKey, subId, perPage, page, options)(this.axios, this.basePath);
    }

}


/**
 * ReceiptsApi - axios parameter creator
 * @export
 */
export const ReceiptsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [employer] Employer of contributor as reported on the committee\&#39;s filing
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByEmployerGet(apiKey: string, committeeId: string, employer?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdSchedulesScheduleAByEmployerGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdSchedulesScheduleAByEmployerGet.');
            }
            const localVarPath = `/committee/{committee_id}/schedules/schedule_a/by_employer/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (employer) {
                localVarQueryParameter['employer'] = employer;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [occupation] Occupation of contributor as reported on the committee\&#39;s filing
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByOccupationGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, cycle?: Array<number>, perPage?: number, occupation?: Array<string>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdSchedulesScheduleAByOccupationGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdSchedulesScheduleAByOccupationGet.');
            }
            const localVarPath = `/committee/{committee_id}/schedules/schedule_a/by_occupation/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (occupation) {
                localVarQueryParameter['occupation'] = occupation;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint aggregates Schedule A donations based on size: ```  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + ``` In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<0 | 200 | 500 | 1000 | 2000>} [size]  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category. 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleABySizeGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, size?: Array<0 | 200 | 500 | 1000 | 2000>, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdSchedulesScheduleABySizeGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdSchedulesScheduleABySizeGet.');
            }
            const localVarPath = `/committee/{committee_id}/schedules/schedule_a/by_size/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (size) {
                localVarQueryParameter['size'] = size;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [state] State of contributor
         * @param {boolean} [hideNull] Exclude values with missing state
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByStateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, state?: Array<string>, hideNull?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdSchedulesScheduleAByStateGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdSchedulesScheduleAByStateGet.');
            }
            const localVarPath = `/committee/{committee_id}/schedules/schedule_a/by_state/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (hideNull !== undefined) {
                localVarQueryParameter['hide_null'] = hideNull;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [zip] Zip code
         * @param {Array<string>} [state] State of contributor
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByZipGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, zip?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling committeeCommitteeIdSchedulesScheduleAByZipGet.');
            }
            // verify required parameter 'committeeId' is not null or undefined
            if (committeeId === null || committeeId === undefined) {
                throw new RequiredError('committeeId','Required parameter committeeId was null or undefined when calling committeeCommitteeIdSchedulesScheduleAByZipGet.');
            }
            const localVarPath = `/committee/{committee_id}/schedules/schedule_a/by_zip/`
                .replace(`{${"committee_id"}}`, encodeURIComponent(String(committeeId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (zip) {
                localVarQueryParameter['zip'] = zip;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [employer] Employer of contributor as reported on the committee\&#39;s filing
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByEmployerGet(apiKey: string, employer?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleAByEmployerGet.');
            }
            const localVarPath = `/schedules/schedule_a/by_employer/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (employer) {
                localVarQueryParameter['employer'] = employer;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [occupation] Occupation of contributor as reported on the committee\&#39;s filing
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByOccupationGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, cycle?: Array<number>, perPage?: number, occupation?: Array<string>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleAByOccupationGet.');
            }
            const localVarPath = `/schedules/schedule_a/by_occupation/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (occupation) {
                localVarQueryParameter['occupation'] = occupation;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule A receipts aggregated by contribution size for a candidate. 
         * @param {Array<string>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleABySizeByCandidateGet(candidateId: Array<string>, apiKey: string, cycle: Array<number>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'candidateId' is not null or undefined
            if (candidateId === null || candidateId === undefined) {
                throw new RequiredError('candidateId','Required parameter candidateId was null or undefined when calling schedulesScheduleABySizeByCandidateGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleABySizeByCandidateGet.');
            }
            // verify required parameter 'cycle' is not null or undefined
            if (cycle === null || cycle === undefined) {
                throw new RequiredError('cycle','Required parameter cycle was null or undefined when calling schedulesScheduleABySizeByCandidateGet.');
            }
            const localVarPath = `/schedules/schedule_a/by_size/by_candidate/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  This endpoint aggregates Schedule A donations based on size: ```  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + ``` In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<0 | 200 | 500 | 1000 | 2000>} [size]  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category. 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleABySizeGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, size?: Array<0 | 200 | 500 | 1000 | 2000>, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleABySizeGet.');
            }
            const localVarPath = `/schedules/schedule_a/by_size/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (size) {
                localVarQueryParameter['size'] = size;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule A receipts aggregated by contribution state for a candidate. 
         * @param {Array<string>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByStateByCandidateGet(candidateId: Array<string>, apiKey: string, cycle: Array<number>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'candidateId' is not null or undefined
            if (candidateId === null || candidateId === undefined) {
                throw new RequiredError('candidateId','Required parameter candidateId was null or undefined when calling schedulesScheduleAByStateByCandidateGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleAByStateByCandidateGet.');
            }
            // verify required parameter 'cycle' is not null or undefined
            if (cycle === null || cycle === undefined) {
                throw new RequiredError('cycle','Required parameter cycle was null or undefined when calling schedulesScheduleAByStateByCandidateGet.');
            }
            const localVarPath = `/schedules/schedule_a/by_state/by_candidate/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (candidateId) {
                localVarQueryParameter['candidate_id'] = candidateId;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (electionFull !== undefined) {
                localVarQueryParameter['election_full'] = electionFull;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [state] State of contributor
         * @param {boolean} [hideNull] Exclude values with missing state
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByStateGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, state?: Array<string>, hideNull?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleAByStateGet.');
            }
            const localVarPath = `/schedules/schedule_a/by_state/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (hideNull !== undefined) {
                localVarQueryParameter['hide_null'] = hideNull;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals.  These receipts are then added together by committee type for the total amount of each type, grouped by state and cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account         - all All Committee Types         - all_candidates All Candidate Committee Types (H, S, P)         - all_pacs All PAC Committee Types (N, O, Q, V, W) 
         * @param {Array<string>} [state] US state or territory
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByStateTotalsGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeType?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleAByStateTotalsGet.');
            }
            const localVarPath = `/schedules/schedule_a/by_state/totals/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (committeeType) {
                localVarQueryParameter['committee_type'] = committeeType;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [zip] Zip code
         * @param {Array<string>} [state] State of contributor
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByZipGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, zip?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleAByZipGet.');
            }
            const localVarPath = `/schedules/schedule_a/by_zip/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (zip) {
                localVarQueryParameter['zip'] = zip;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (state) {
                localVarQueryParameter['state'] = state;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (cycle) {
                localVarQueryParameter['cycle'] = cycle;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minImageNumber] 
         * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [contributorState] State of contributor
         * @param {Array<string>} [contributorCity] City of contributor
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [contributorName] Name of contributor
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAEfileGet(apiKey: string, minImageNumber?: string, contributorEmployer?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, maxAmount?: string, page?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorOccupation?: Array<string>, sortNullsLast?: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleAEfileGet.');
            }
            const localVarPath = `/schedules/schedule_a/efile/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (minImageNumber !== undefined) {
                localVarQueryParameter['min_image_number'] = minImageNumber;
            }

            if (contributorEmployer) {
                localVarQueryParameter['contributor_employer'] = contributorEmployer;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (contributorState) {
                localVarQueryParameter['contributor_state'] = contributorState;
            }

            if (contributorCity) {
                localVarQueryParameter['contributor_city'] = contributorCity;
            }

            if (lineNumber !== undefined) {
                localVarQueryParameter['line_number'] = lineNumber;
            }

            if (maxImageNumber !== undefined) {
                localVarQueryParameter['max_image_number'] = maxImageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (contributorName) {
                localVarQueryParameter['contributor_name'] = contributorName;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (contributorOccupation) {
                localVarQueryParameter['contributor_occupation'] = contributorOccupation;
            }

            if (sortNullsLast !== undefined) {
                localVarQueryParameter['sort_nulls_last'] = sortNullsLast;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee\'s percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee\'s percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [recipientCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {number} [lastContributorAggregateYtd] When sorting by &#x60;contributor_aggregate_ytd&#x60;, this is populated with the &#x60;contributor_aggregate_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [contributorState] State of contributor
         * @param {Array<string>} [contributorCity] City of contributor
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [contributorName] Name of contributor
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [isIndividual] Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {string} [lastContributionReceiptDate] When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [contributorId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {number} [lastContributionReceiptAmount] When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minImageNumber] 
         * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
         * @param {Array<string>} [contributorZip] Zip code of contributor
         * @param {Array<'individual' | 'committee'>} [contributorType] Filters individual or committee contributions based on line number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAGet(twoYearTransactionPeriod: number, apiKey: string, lastIndex?: number, recipientCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, contributorEmployer?: Array<string>, minAmount?: string, lastContributorAggregateYtd?: number, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, isIndividual?: boolean, maxAmount?: string, lastContributionReceiptDate?: string, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorId?: Array<string>, lastContributionReceiptAmount?: number, minImageNumber?: string, contributorOccupation?: Array<string>, contributorZip?: Array<string>, contributorType?: Array<'individual' | 'committee'>, options: any = {}): RequestArgs {
            // verify required parameter 'twoYearTransactionPeriod' is not null or undefined
            if (twoYearTransactionPeriod === null || twoYearTransactionPeriod === undefined) {
                throw new RequiredError('twoYearTransactionPeriod','Required parameter twoYearTransactionPeriod was null or undefined when calling schedulesScheduleAGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleAGet.');
            }
            const localVarPath = `/schedules/schedule_a/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (lastIndex !== undefined) {
                localVarQueryParameter['last_index'] = lastIndex;
            }

            if (recipientCommitteeType) {
                localVarQueryParameter['recipient_committee_type'] = recipientCommitteeType;
            }

            if (contributorEmployer) {
                localVarQueryParameter['contributor_employer'] = contributorEmployer;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (lastContributorAggregateYtd !== undefined) {
                localVarQueryParameter['last_contributor_aggregate_ytd'] = lastContributorAggregateYtd;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (twoYearTransactionPeriod !== undefined) {
                localVarQueryParameter['two_year_transaction_period'] = twoYearTransactionPeriod;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (contributorState) {
                localVarQueryParameter['contributor_state'] = contributorState;
            }

            if (contributorCity) {
                localVarQueryParameter['contributor_city'] = contributorCity;
            }

            if (lineNumber !== undefined) {
                localVarQueryParameter['line_number'] = lineNumber;
            }

            if (maxImageNumber !== undefined) {
                localVarQueryParameter['max_image_number'] = maxImageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (contributorName) {
                localVarQueryParameter['contributor_name'] = contributorName;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (isIndividual !== undefined) {
                localVarQueryParameter['is_individual'] = isIndividual;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (lastContributionReceiptDate !== undefined) {
                localVarQueryParameter['last_contribution_receipt_date'] = (lastContributionReceiptDate as any instanceof Date) ?
                    (lastContributionReceiptDate as any).toISOString().substr(0,10) :
                    lastContributionReceiptDate;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (contributorId) {
                localVarQueryParameter['contributor_id'] = contributorId;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (lastContributionReceiptAmount !== undefined) {
                localVarQueryParameter['last_contribution_receipt_amount'] = lastContributionReceiptAmount;
            }

            if (minImageNumber !== undefined) {
                localVarQueryParameter['min_image_number'] = minImageNumber;
            }

            if (contributorOccupation) {
                localVarQueryParameter['contributor_occupation'] = contributorOccupation;
            }

            if (contributorZip) {
                localVarQueryParameter['contributor_zip'] = contributorZip;
            }

            if (contributorType) {
                localVarQueryParameter['contributor_type'] = contributorType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee\'s percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee\'s percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [recipientCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {number} [lastContributorAggregateYtd] When sorting by &#x60;contributor_aggregate_ytd&#x60;, this is populated with the &#x60;contributor_aggregate_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [contributorState] State of contributor
         * @param {Array<string>} [contributorCity] City of contributor
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [contributorName] Name of contributor
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [isIndividual] Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {string} [lastContributionReceiptDate] When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [contributorId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {number} [lastContributionReceiptAmount] When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minImageNumber] 
         * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
         * @param {Array<string>} [contributorZip] Zip code of contributor
         * @param {Array<'individual' | 'committee'>} [contributorType] Filters individual or committee contributions based on line number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleASubIdGet(twoYearTransactionPeriod: number, apiKey: string, subId: string, lastIndex?: number, recipientCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, contributorEmployer?: Array<string>, minAmount?: string, lastContributorAggregateYtd?: number, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, isIndividual?: boolean, maxAmount?: string, lastContributionReceiptDate?: string, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorId?: Array<string>, lastContributionReceiptAmount?: number, minImageNumber?: string, contributorOccupation?: Array<string>, contributorZip?: Array<string>, contributorType?: Array<'individual' | 'committee'>, options: any = {}): RequestArgs {
            // verify required parameter 'twoYearTransactionPeriod' is not null or undefined
            if (twoYearTransactionPeriod === null || twoYearTransactionPeriod === undefined) {
                throw new RequiredError('twoYearTransactionPeriod','Required parameter twoYearTransactionPeriod was null or undefined when calling schedulesScheduleASubIdGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling schedulesScheduleASubIdGet.');
            }
            // verify required parameter 'subId' is not null or undefined
            if (subId === null || subId === undefined) {
                throw new RequiredError('subId','Required parameter subId was null or undefined when calling schedulesScheduleASubIdGet.');
            }
            const localVarPath = `/schedules/schedule_a/{sub_id}/`
                .replace(`{${"sub_id"}}`, encodeURIComponent(String(subId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (lastIndex !== undefined) {
                localVarQueryParameter['last_index'] = lastIndex;
            }

            if (recipientCommitteeType) {
                localVarQueryParameter['recipient_committee_type'] = recipientCommitteeType;
            }

            if (contributorEmployer) {
                localVarQueryParameter['contributor_employer'] = contributorEmployer;
            }

            if (minAmount !== undefined) {
                localVarQueryParameter['min_amount'] = minAmount;
            }

            if (lastContributorAggregateYtd !== undefined) {
                localVarQueryParameter['last_contributor_aggregate_ytd'] = lastContributorAggregateYtd;
            }

            if (maxDate !== undefined) {
                localVarQueryParameter['max_date'] = (maxDate as any instanceof Date) ?
                    (maxDate as any).toISOString().substr(0,10) :
                    maxDate;
            }

            if (twoYearTransactionPeriod !== undefined) {
                localVarQueryParameter['two_year_transaction_period'] = twoYearTransactionPeriod;
            }

            if (committeeId) {
                localVarQueryParameter['committee_id'] = committeeId;
            }

            if (contributorState) {
                localVarQueryParameter['contributor_state'] = contributorState;
            }

            if (contributorCity) {
                localVarQueryParameter['contributor_city'] = contributorCity;
            }

            if (lineNumber !== undefined) {
                localVarQueryParameter['line_number'] = lineNumber;
            }

            if (maxImageNumber !== undefined) {
                localVarQueryParameter['max_image_number'] = maxImageNumber;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (contributorName) {
                localVarQueryParameter['contributor_name'] = contributorName;
            }

            if (sortHideNull !== undefined) {
                localVarQueryParameter['sort_hide_null'] = sortHideNull;
            }

            if (isIndividual !== undefined) {
                localVarQueryParameter['is_individual'] = isIndividual;
            }

            if (maxAmount !== undefined) {
                localVarQueryParameter['max_amount'] = maxAmount;
            }

            if (lastContributionReceiptDate !== undefined) {
                localVarQueryParameter['last_contribution_receipt_date'] = (lastContributionReceiptDate as any instanceof Date) ?
                    (lastContributionReceiptDate as any).toISOString().substr(0,10) :
                    lastContributionReceiptDate;
            }

            if (minDate !== undefined) {
                localVarQueryParameter['min_date'] = (minDate as any instanceof Date) ?
                    (minDate as any).toISOString().substr(0,10) :
                    minDate;
            }

            if (sortNullOnly !== undefined) {
                localVarQueryParameter['sort_null_only'] = sortNullOnly;
            }

            if (imageNumber) {
                localVarQueryParameter['image_number'] = imageNumber;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (contributorId) {
                localVarQueryParameter['contributor_id'] = contributorId;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }

            if (lastContributionReceiptAmount !== undefined) {
                localVarQueryParameter['last_contribution_receipt_amount'] = lastContributionReceiptAmount;
            }

            if (minImageNumber !== undefined) {
                localVarQueryParameter['min_image_number'] = minImageNumber;
            }

            if (contributorOccupation) {
                localVarQueryParameter['contributor_occupation'] = contributorOccupation;
            }

            if (contributorZip) {
                localVarQueryParameter['contributor_zip'] = contributorZip;
            }

            if (contributorType) {
                localVarQueryParameter['contributor_type'] = contributorType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReceiptsApi - functional programming interface
 * @export
 */
export const ReceiptsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [employer] Employer of contributor as reported on the committee\&#39;s filing
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByEmployerGet(apiKey: string, committeeId: string, employer?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAByEmployerPage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).committeeCommitteeIdSchedulesScheduleAByEmployerGet(apiKey, committeeId, employer, sort, sortHideNull, page, sortNullOnly, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [occupation] Occupation of contributor as reported on the committee\&#39;s filing
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByOccupationGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, cycle?: Array<number>, perPage?: number, occupation?: Array<string>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAByOccupationPage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).committeeCommitteeIdSchedulesScheduleAByOccupationGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, cycle, perPage, occupation, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  This endpoint aggregates Schedule A donations based on size: ```  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + ``` In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<0 | 200 | 500 | 1000 | 2000>} [size]  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category. 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleABySizeGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, size?: Array<0 | 200 | 500 | 1000 | 2000>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleABySizePage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).committeeCommitteeIdSchedulesScheduleABySizeGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, perPage, size, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [state] State of contributor
         * @param {boolean} [hideNull] Exclude values with missing state
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByStateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, state?: Array<string>, hideNull?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAByStatePage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).committeeCommitteeIdSchedulesScheduleAByStateGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, perPage, state, hideNull, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [zip] Zip code
         * @param {Array<string>} [state] State of contributor
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByZipGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, zip?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAByZipPage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).committeeCommitteeIdSchedulesScheduleAByZipGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, zip, state, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [employer] Employer of contributor as reported on the committee\&#39;s filing
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByEmployerGet(apiKey: string, employer?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAByEmployerPage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleAByEmployerGet(apiKey, employer, sort, sortHideNull, page, sortNullOnly, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [occupation] Occupation of contributor as reported on the committee\&#39;s filing
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByOccupationGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, cycle?: Array<number>, perPage?: number, occupation?: Array<string>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAByOccupationPage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleAByOccupationGet(apiKey, sort, sortHideNull, page, sortNullOnly, cycle, perPage, occupation, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule A receipts aggregated by contribution size for a candidate. 
         * @param {Array<string>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleABySizeByCandidateGet(candidateId: Array<string>, apiKey: string, cycle: Array<number>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleABySizeCandidatePage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleABySizeByCandidateGet(candidateId, apiKey, cycle, sort, sortHideNull, page, sortNullOnly, perPage, electionFull, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  This endpoint aggregates Schedule A donations based on size: ```  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + ``` In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<0 | 200 | 500 | 1000 | 2000>} [size]  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category. 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleABySizeGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, size?: Array<0 | 200 | 500 | 1000 | 2000>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleABySizePage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleABySizeGet(apiKey, sort, sortHideNull, page, sortNullOnly, perPage, size, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule A receipts aggregated by contribution state for a candidate. 
         * @param {Array<string>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByStateByCandidateGet(candidateId: Array<string>, apiKey: string, cycle: Array<number>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAByStateCandidatePage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleAByStateByCandidateGet(candidateId, apiKey, cycle, sort, sortHideNull, page, sortNullOnly, perPage, electionFull, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [state] State of contributor
         * @param {boolean} [hideNull] Exclude values with missing state
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByStateGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, state?: Array<string>, hideNull?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAByStatePage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleAByStateGet(apiKey, sort, sortHideNull, page, sortNullOnly, perPage, state, hideNull, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals.  These receipts are then added together by committee type for the total amount of each type, grouped by state and cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account         - all All Committee Types         - all_candidates All Candidate Committee Types (H, S, P)         - all_pacs All PAC Committee Types (N, O, Q, V, W) 
         * @param {Array<string>} [state] US state or territory
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByStateTotalsGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeType?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAByStateRecipientTotalsPage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleAByStateTotalsGet(apiKey, sort, sortHideNull, page, sortNullOnly, committeeType, state, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [zip] Zip code
         * @param {Array<string>} [state] State of contributor
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByZipGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, zip?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAByZipPage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleAByZipGet(apiKey, sort, sortHideNull, page, sortNullOnly, zip, state, perPage, cycle, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minImageNumber] 
         * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [contributorState] State of contributor
         * @param {Array<string>} [contributorCity] City of contributor
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [contributorName] Name of contributor
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAEfileGet(apiKey: string, minImageNumber?: string, contributorEmployer?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, maxAmount?: string, page?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorOccupation?: Array<string>, sortNullsLast?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAEfilePage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleAEfileGet(apiKey, minImageNumber, contributorEmployer, minAmount, maxDate, committeeId, contributorState, contributorCity, lineNumber, maxImageNumber, sort, contributorName, sortHideNull, maxAmount, page, minDate, sortNullOnly, imageNumber, perPage, contributorOccupation, sortNullsLast, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee\'s percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee\'s percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [recipientCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {number} [lastContributorAggregateYtd] When sorting by &#x60;contributor_aggregate_ytd&#x60;, this is populated with the &#x60;contributor_aggregate_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [contributorState] State of contributor
         * @param {Array<string>} [contributorCity] City of contributor
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [contributorName] Name of contributor
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [isIndividual] Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {string} [lastContributionReceiptDate] When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [contributorId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {number} [lastContributionReceiptAmount] When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minImageNumber] 
         * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
         * @param {Array<string>} [contributorZip] Zip code of contributor
         * @param {Array<'individual' | 'committee'>} [contributorType] Filters individual or committee contributions based on line number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAGet(twoYearTransactionPeriod: number, apiKey: string, lastIndex?: number, recipientCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, contributorEmployer?: Array<string>, minAmount?: string, lastContributorAggregateYtd?: number, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, isIndividual?: boolean, maxAmount?: string, lastContributionReceiptDate?: string, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorId?: Array<string>, lastContributionReceiptAmount?: number, minImageNumber?: string, contributorOccupation?: Array<string>, contributorZip?: Array<string>, contributorType?: Array<'individual' | 'committee'>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAPage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleAGet(twoYearTransactionPeriod, apiKey, lastIndex, recipientCommitteeType, contributorEmployer, minAmount, lastContributorAggregateYtd, maxDate, committeeId, contributorState, contributorCity, lineNumber, maxImageNumber, sort, contributorName, sortHideNull, isIndividual, maxAmount, lastContributionReceiptDate, minDate, sortNullOnly, imageNumber, perPage, contributorId, lastContributionReceiptAmount, minImageNumber, contributorOccupation, contributorZip, contributorType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee\'s percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee\'s percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [recipientCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {number} [lastContributorAggregateYtd] When sorting by &#x60;contributor_aggregate_ytd&#x60;, this is populated with the &#x60;contributor_aggregate_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [contributorState] State of contributor
         * @param {Array<string>} [contributorCity] City of contributor
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [contributorName] Name of contributor
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [isIndividual] Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {string} [lastContributionReceiptDate] When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [contributorId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {number} [lastContributionReceiptAmount] When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minImageNumber] 
         * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
         * @param {Array<string>} [contributorZip] Zip code of contributor
         * @param {Array<'individual' | 'committee'>} [contributorType] Filters individual or committee contributions based on line number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleASubIdGet(twoYearTransactionPeriod: number, apiKey: string, subId: string, lastIndex?: number, recipientCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, contributorEmployer?: Array<string>, minAmount?: string, lastContributorAggregateYtd?: number, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, isIndividual?: boolean, maxAmount?: string, lastContributionReceiptDate?: string, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorId?: Array<string>, lastContributionReceiptAmount?: number, minImageNumber?: string, contributorOccupation?: Array<string>, contributorZip?: Array<string>, contributorType?: Array<'individual' | 'committee'>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleAPage> {
            const localVarAxiosArgs = ReceiptsApiAxiosParamCreator(configuration).schedulesScheduleASubIdGet(twoYearTransactionPeriod, apiKey, subId, lastIndex, recipientCommitteeType, contributorEmployer, minAmount, lastContributorAggregateYtd, maxDate, committeeId, contributorState, contributorCity, lineNumber, maxImageNumber, sort, contributorName, sortHideNull, isIndividual, maxAmount, lastContributionReceiptDate, minDate, sortNullOnly, imageNumber, perPage, contributorId, lastContributionReceiptAmount, minImageNumber, contributorOccupation, contributorZip, contributorType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReceiptsApi - factory interface
 * @export
 */
export const ReceiptsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [employer] Employer of contributor as reported on the committee\&#39;s filing
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByEmployerGet(apiKey: string, committeeId: string, employer?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).committeeCommitteeIdSchedulesScheduleAByEmployerGet(apiKey, committeeId, employer, sort, sortHideNull, page, sortNullOnly, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         * Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [occupation] Occupation of contributor as reported on the committee\&#39;s filing
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByOccupationGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, cycle?: Array<number>, perPage?: number, occupation?: Array<string>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).committeeCommitteeIdSchedulesScheduleAByOccupationGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, cycle, perPage, occupation, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  This endpoint aggregates Schedule A donations based on size: ```  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + ``` In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<0 | 200 | 500 | 1000 | 2000>} [size]  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category. 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleABySizeGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, size?: Array<0 | 200 | 500 | 1000 | 2000>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).committeeCommitteeIdSchedulesScheduleABySizeGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, perPage, size, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [state] State of contributor
         * @param {boolean} [hideNull] Exclude values with missing state
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByStateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, state?: Array<string>, hideNull?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).committeeCommitteeIdSchedulesScheduleAByStateGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, perPage, state, hideNull, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         * Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [zip] Zip code
         * @param {Array<string>} [state] State of contributor
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        committeeCommitteeIdSchedulesScheduleAByZipGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, zip?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).committeeCommitteeIdSchedulesScheduleAByZipGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, zip, state, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         * Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<string>} [employer] Employer of contributor as reported on the committee\&#39;s filing
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByEmployerGet(apiKey: string, employer?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleAByEmployerGet(apiKey, employer, sort, sortHideNull, page, sortNullOnly, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         * Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [occupation] Occupation of contributor as reported on the committee\&#39;s filing
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByOccupationGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, cycle?: Array<number>, perPage?: number, occupation?: Array<string>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleAByOccupationGet(apiKey, sort, sortHideNull, page, sortNullOnly, cycle, perPage, occupation, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule A receipts aggregated by contribution size for a candidate. 
         * @param {Array<string>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleABySizeByCandidateGet(candidateId: Array<string>, apiKey: string, cycle: Array<number>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleABySizeByCandidateGet(candidateId, apiKey, cycle, sort, sortHideNull, page, sortNullOnly, perPage, electionFull, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  This endpoint aggregates Schedule A donations based on size: ```  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + ``` In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<0 | 200 | 500 | 1000 | 2000>} [size]  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category. 
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleABySizeGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, size?: Array<0 | 200 | 500 | 1000 | 2000>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleABySizeGet(apiKey, sort, sortHideNull, page, sortNullOnly, perPage, size, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule A receipts aggregated by contribution state for a candidate. 
         * @param {Array<string>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {Array<number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {boolean} [electionFull] Aggregate values over full election period
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByStateByCandidateGet(candidateId: Array<string>, apiKey: string, cycle: Array<number>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleAByStateByCandidateGet(candidateId, apiKey, cycle, sort, sortHideNull, page, sortNullOnly, perPage, electionFull, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [state] State of contributor
         * @param {boolean} [hideNull] Exclude values with missing state
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByStateGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, state?: Array<string>, hideNull?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleAByStateGet(apiKey, sort, sortHideNull, page, sortNullOnly, perPage, state, hideNull, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals.  These receipts are then added together by committee type for the total amount of each type, grouped by state and cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account         - all All Committee Types         - all_candidates All Candidate Committee Types (H, S, P)         - all_pacs All PAC Committee Types (N, O, Q, V, W) 
         * @param {Array<string>} [state] US state or territory
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByStateTotalsGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeType?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleAByStateTotalsGet(apiKey, sort, sortHideNull, page, sortNullOnly, committeeType, state, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         * Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included.
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [zip] Zip code
         * @param {Array<string>} [state] State of contributor
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAByZipGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, zip?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleAByZipGet(apiKey, sort, sortHideNull, page, sortNullOnly, zip, state, perPage, cycle, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} [minImageNumber] 
         * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [contributorState] State of contributor
         * @param {Array<string>} [contributorCity] City of contributor
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [contributorName] Name of contributor
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {number} [page] For paginating through results, starting at page 1
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
         * @param {boolean} [sortNullsLast] Toggle that sorts null values last
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAEfileGet(apiKey: string, minImageNumber?: string, contributorEmployer?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, maxAmount?: string, page?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorOccupation?: Array<string>, sortNullsLast?: boolean, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleAEfileGet(apiKey, minImageNumber, contributorEmployer, minAmount, maxDate, committeeId, contributorState, contributorCity, lineNumber, maxImageNumber, sort, contributorName, sortHideNull, maxAmount, page, minDate, sortNullOnly, imageNumber, perPage, contributorOccupation, sortNullsLast, options)(axios, basePath);
        },
        /**
         *  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee\'s percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee\'s percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [recipientCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {number} [lastContributorAggregateYtd] When sorting by &#x60;contributor_aggregate_ytd&#x60;, this is populated with the &#x60;contributor_aggregate_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [contributorState] State of contributor
         * @param {Array<string>} [contributorCity] City of contributor
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [contributorName] Name of contributor
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [isIndividual] Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {string} [lastContributionReceiptDate] When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [contributorId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {number} [lastContributionReceiptAmount] When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minImageNumber] 
         * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
         * @param {Array<string>} [contributorZip] Zip code of contributor
         * @param {Array<'individual' | 'committee'>} [contributorType] Filters individual or committee contributions based on line number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleAGet(twoYearTransactionPeriod: number, apiKey: string, lastIndex?: number, recipientCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, contributorEmployer?: Array<string>, minAmount?: string, lastContributorAggregateYtd?: number, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, isIndividual?: boolean, maxAmount?: string, lastContributionReceiptDate?: string, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorId?: Array<string>, lastContributionReceiptAmount?: number, minImageNumber?: string, contributorOccupation?: Array<string>, contributorZip?: Array<string>, contributorType?: Array<'individual' | 'committee'>, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleAGet(twoYearTransactionPeriod, apiKey, lastIndex, recipientCommitteeType, contributorEmployer, minAmount, lastContributorAggregateYtd, maxDate, committeeId, contributorState, contributorCity, lineNumber, maxImageNumber, sort, contributorName, sortHideNull, isIndividual, maxAmount, lastContributionReceiptDate, minDate, sortNullOnly, imageNumber, perPage, contributorId, lastContributionReceiptAmount, minImageNumber, contributorOccupation, contributorZip, contributorType, options)(axios, basePath);
        },
        /**
         *  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee\'s percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee\'s percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
         * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {string} subId 
         * @param {number} [lastIndex] Index of last result from previous page
         * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [recipientCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
         * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
         * @param {string} [minAmount] Filter for all amounts greater than a value.
         * @param {number} [lastContributorAggregateYtd] When sorting by &#x60;contributor_aggregate_ytd&#x60;, this is populated with the &#x60;contributor_aggregate_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [maxDate] Maximum date
         * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
         * @param {Array<string>} [contributorState] State of contributor
         * @param {Array<string>} [contributorCity] City of contributor
         * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
         * @param {string} [maxImageNumber] 
         * @param {string} [sort] Provide a field to sort by. Use - for descending order.
         * @param {Array<string>} [contributorName] Name of contributor
         * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
         * @param {boolean} [isIndividual] Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
         * @param {string} [maxAmount] Filter for all amounts less than a value.
         * @param {string} [lastContributionReceiptDate] When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minDate] Minimum date
         * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
         * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
         * @param {number} [perPage] The number of results returned per page. Defaults to 20.
         * @param {Array<string>} [contributorId] The FEC identifier should be represented here if the contributor is registered with the FEC.
         * @param {number} [lastContributionReceiptAmount] When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
         * @param {string} [minImageNumber] 
         * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
         * @param {Array<string>} [contributorZip] Zip code of contributor
         * @param {Array<'individual' | 'committee'>} [contributorType] Filters individual or committee contributions based on line number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schedulesScheduleASubIdGet(twoYearTransactionPeriod: number, apiKey: string, subId: string, lastIndex?: number, recipientCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, contributorEmployer?: Array<string>, minAmount?: string, lastContributorAggregateYtd?: number, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, isIndividual?: boolean, maxAmount?: string, lastContributionReceiptDate?: string, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorId?: Array<string>, lastContributionReceiptAmount?: number, minImageNumber?: string, contributorOccupation?: Array<string>, contributorZip?: Array<string>, contributorType?: Array<'individual' | 'committee'>, options?: any) {
            return ReceiptsApiFp(configuration).schedulesScheduleASubIdGet(twoYearTransactionPeriod, apiKey, subId, lastIndex, recipientCommitteeType, contributorEmployer, minAmount, lastContributorAggregateYtd, maxDate, committeeId, contributorState, contributorCity, lineNumber, maxImageNumber, sort, contributorName, sortHideNull, isIndividual, maxAmount, lastContributionReceiptDate, minDate, sortNullOnly, imageNumber, perPage, contributorId, lastContributionReceiptAmount, minImageNumber, contributorOccupation, contributorZip, contributorType, options)(axios, basePath);
        },
    };
};

/**
 * ReceiptsApi - object-oriented interface
 * @export
 * @class ReceiptsApi
 * @extends {BaseAPI}
 */
export class ReceiptsApi extends BaseAPI {
    /**
     * Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<string>} [employer] Employer of contributor as reported on the committee\&#39;s filing
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public committeeCommitteeIdSchedulesScheduleAByEmployerGet(apiKey: string, committeeId: string, employer?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).committeeCommitteeIdSchedulesScheduleAByEmployerGet(apiKey, committeeId, employer, sort, sortHideNull, page, sortNullOnly, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     * Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [occupation] Occupation of contributor as reported on the committee\&#39;s filing
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public committeeCommitteeIdSchedulesScheduleAByOccupationGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, cycle?: Array<number>, perPage?: number, occupation?: Array<string>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).committeeCommitteeIdSchedulesScheduleAByOccupationGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, cycle, perPage, occupation, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  This endpoint aggregates Schedule A donations based on size: ```  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + ``` In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<0 | 200 | 500 | 1000 | 2000>} [size]  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category. 
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public committeeCommitteeIdSchedulesScheduleABySizeGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, size?: Array<0 | 200 | 500 | 1000 | 2000>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).committeeCommitteeIdSchedulesScheduleABySizeGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, perPage, size, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [state] State of contributor
     * @param {boolean} [hideNull] Exclude values with missing state
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public committeeCommitteeIdSchedulesScheduleAByStateGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, state?: Array<string>, hideNull?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).committeeCommitteeIdSchedulesScheduleAByStateGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, perPage, state, hideNull, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     * Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} committeeId  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [zip] Zip code
     * @param {Array<string>} [state] State of contributor
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public committeeCommitteeIdSchedulesScheduleAByZipGet(apiKey: string, committeeId: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, zip?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).committeeCommitteeIdSchedulesScheduleAByZipGet(apiKey, committeeId, sort, sortHideNull, page, sortNullOnly, zip, state, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     * Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<string>} [employer] Employer of contributor as reported on the committee\&#39;s filing
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleAByEmployerGet(apiKey: string, employer?: Array<string>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleAByEmployerGet(apiKey, employer, sort, sortHideNull, page, sortNullOnly, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     * Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [occupation] Occupation of contributor as reported on the committee\&#39;s filing
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleAByOccupationGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, cycle?: Array<number>, perPage?: number, occupation?: Array<string>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleAByOccupationGet(apiKey, sort, sortHideNull, page, sortNullOnly, cycle, perPage, occupation, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule A receipts aggregated by contribution size for a candidate. 
     * @param {Array<string>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleABySizeByCandidateGet(candidateId: Array<string>, apiKey: string, cycle: Array<number>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleABySizeByCandidateGet(candidateId, apiKey, cycle, sort, sortHideNull, page, sortNullOnly, perPage, electionFull, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  This endpoint aggregates Schedule A donations based on size: ```  - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 + ``` In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<0 | 200 | 500 | 1000 | 2000>} [size]  The total all contributions in the following ranges: &#x60;&#x60;&#x60;   -0    $200 and under   -200  $200.01 - $499.99   -500  $500 - $999.99   -1000 $1000 - $1999.99   -2000 $2000 + &#x60;&#x60;&#x60; Unitemized contributions are included in the &#x60;0&#x60; category. 
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleABySizeGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, size?: Array<0 | 200 | 500 | 1000 | 2000>, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleABySizeGet(apiKey, sort, sortHideNull, page, sortNullOnly, perPage, size, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule A receipts aggregated by contribution state for a candidate. 
     * @param {Array<string>} candidateId  A unique identifier assigned to each candidate registered with the FEC. If a person runs for several offices, that person will have separate candidate IDs for each office. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {Array<number>} cycle  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {boolean} [electionFull] Aggregate values over full election period
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleAByStateByCandidateGet(candidateId: Array<string>, apiKey: string, cycle: Array<number>, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, electionFull?: boolean, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleAByStateByCandidateGet(candidateId, apiKey, cycle, sort, sortHideNull, page, sortNullOnly, perPage, electionFull, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [state] State of contributor
     * @param {boolean} [hideNull] Exclude values with missing state
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleAByStateGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, perPage?: number, state?: Array<string>, hideNull?: boolean, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleAByStateGet(apiKey, sort, sortHideNull, page, sortNullOnly, perPage, state, hideNull, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals.  These receipts are then added together by committee type for the total amount of each type, grouped by state and cycle. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [committeeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account         - all All Committee Types         - all_candidates All Candidate Committee Types (H, S, P)         - all_pacs All PAC Committee Types (N, O, Q, V, W) 
     * @param {Array<string>} [state] US state or territory
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleAByStateTotalsGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, committeeType?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleAByStateTotalsGet(apiKey, sort, sortHideNull, page, sortNullOnly, committeeType, state, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     * Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included.
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [zip] Zip code
     * @param {Array<string>} [state] State of contributor
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<number>} [cycle]  Filter records to only those that were applicable to a given two-year period.The cycle begins with an odd year and is named for its ending, even year. 
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleAByZipGet(apiKey: string, sort?: string, sortHideNull?: boolean, page?: number, sortNullOnly?: boolean, zip?: Array<string>, state?: Array<string>, perPage?: number, cycle?: Array<number>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleAByZipGet(apiKey, sort, sortHideNull, page, sortNullOnly, zip, state, perPage, cycle, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don\'t contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} [minImageNumber] 
     * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {string} [maxDate] Maximum date
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<string>} [contributorState] State of contributor
     * @param {Array<string>} [contributorCity] City of contributor
     * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
     * @param {string} [maxImageNumber] 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {Array<string>} [contributorName] Name of contributor
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {number} [page] For paginating through results, starting at page 1
     * @param {string} [minDate] Minimum date
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
     * @param {boolean} [sortNullsLast] Toggle that sorts null values last
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleAEfileGet(apiKey: string, minImageNumber?: string, contributorEmployer?: Array<string>, minAmount?: string, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, maxAmount?: string, page?: number, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorOccupation?: Array<string>, sortNullsLast?: boolean, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleAEfileGet(apiKey, minImageNumber, contributorEmployer, minAmount, maxDate, committeeId, contributorState, contributorCity, lineNumber, maxImageNumber, sort, contributorName, sortHideNull, maxAmount, page, minDate, sortNullOnly, imageNumber, perPage, contributorOccupation, sortNullsLast, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee\'s percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee\'s percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {number} [lastIndex] Index of last result from previous page
     * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [recipientCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {number} [lastContributorAggregateYtd] When sorting by &#x60;contributor_aggregate_ytd&#x60;, this is populated with the &#x60;contributor_aggregate_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [maxDate] Maximum date
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<string>} [contributorState] State of contributor
     * @param {Array<string>} [contributorCity] City of contributor
     * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
     * @param {string} [maxImageNumber] 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {Array<string>} [contributorName] Name of contributor
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {boolean} [isIndividual] Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {string} [lastContributionReceiptDate] When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [minDate] Minimum date
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [contributorId] The FEC identifier should be represented here if the contributor is registered with the FEC.
     * @param {number} [lastContributionReceiptAmount] When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [minImageNumber] 
     * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
     * @param {Array<string>} [contributorZip] Zip code of contributor
     * @param {Array<'individual' | 'committee'>} [contributorType] Filters individual or committee contributions based on line number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleAGet(twoYearTransactionPeriod: number, apiKey: string, lastIndex?: number, recipientCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, contributorEmployer?: Array<string>, minAmount?: string, lastContributorAggregateYtd?: number, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, isIndividual?: boolean, maxAmount?: string, lastContributionReceiptDate?: string, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorId?: Array<string>, lastContributionReceiptAmount?: number, minImageNumber?: string, contributorOccupation?: Array<string>, contributorZip?: Array<string>, contributorType?: Array<'individual' | 'committee'>, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleAGet(twoYearTransactionPeriod, apiKey, lastIndex, recipientCommitteeType, contributorEmployer, minAmount, lastContributorAggregateYtd, maxDate, committeeId, contributorState, contributorCity, lineNumber, maxImageNumber, sort, contributorName, sortHideNull, isIndividual, maxAmount, lastContributionReceiptDate, minDate, sortNullOnly, imageNumber, perPage, contributorId, lastContributionReceiptAmount, minImageNumber, contributorOccupation, contributorZip, contributorType, options)(this.axios, this.basePath);
    }

    /**
     *  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee\'s percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee\'s percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned. 
     * @param {number} twoYearTransactionPeriod  This is a two-year period that is derived from the year a transaction took place in the Itemized Schedule A and Schedule B tables. In cases where we have the date of the transaction (contribution_receipt_date in schedules/schedule_a, disbursement_date in schedules/schedule_b) the two_year_transaction_period is named after the ending, even-numbered year. If we do not have the date  of the transaction, we fall back to using the report year (report_year in both tables) instead,  making the same cycle adjustment as necessary. If no transaction year is specified, the results default to the most current cycle. 
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {string} subId 
     * @param {number} [lastIndex] Index of last result from previous page
     * @param {Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>} [recipientCommitteeType] The one-letter type code of the organization:         - C communication cost         - D delegate         - E electioneering communication         - H House         - I independent expenditor (person or group)         - N PAC - nonqualified         - O independent expenditure-only (super PACs)         - P presidential         - Q PAC - qualified         - S Senate         - U single candidate independent expenditure         - V PAC with non-contribution account, nonqualified         - W PAC with non-contribution account, qualified         - X party, nonqualified         - Y party, qualified         - Z national party non-federal account 
     * @param {Array<string>} [contributorEmployer] Employer of contributor, filers need to make an effort to gather this information
     * @param {string} [minAmount] Filter for all amounts greater than a value.
     * @param {number} [lastContributorAggregateYtd] When sorting by &#x60;contributor_aggregate_ytd&#x60;, this is populated with the &#x60;contributor_aggregate_ytd&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [maxDate] Maximum date
     * @param {Array<string>} [committeeId]  A unique identifier assigned to each committee or filer registered with the FEC. In general committee id\&#39;s begin with the letter C which is followed by eight digits. 
     * @param {Array<string>} [contributorState] State of contributor
     * @param {Array<string>} [contributorCity] City of contributor
     * @param {string} [lineNumber] Filter for form and line number using the following format: &#x60;FORM-LINENUMBER&#x60;.  For example an argument such as &#x60;F3X-16&#x60; would filter down to all entries from form &#x60;F3X&#x60; line number &#x60;16&#x60;.
     * @param {string} [maxImageNumber] 
     * @param {string} [sort] Provide a field to sort by. Use - for descending order.
     * @param {Array<string>} [contributorName] Name of contributor
     * @param {boolean} [sortHideNull] Hide null values on sorted column(s).
     * @param {boolean} [isIndividual] Restrict to non-earmarked individual contributions where memo code is true. Filtering individuals is useful to make sure contributions are not double reported and in creating breakdowns of the amount of money coming from individuals.
     * @param {string} [maxAmount] Filter for all amounts less than a value.
     * @param {string} [lastContributionReceiptDate] When sorting by &#x60;contribution_receipt_date&#x60;, this is populated with the &#x60;contribution_receipt_date&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [minDate] Minimum date
     * @param {boolean} [sortNullOnly] Toggle that filters out all rows having sort column that is non-null
     * @param {Array<string>} [imageNumber] The image number of the page where the schedule item is reported
     * @param {number} [perPage] The number of results returned per page. Defaults to 20.
     * @param {Array<string>} [contributorId] The FEC identifier should be represented here if the contributor is registered with the FEC.
     * @param {number} [lastContributionReceiptAmount] When sorting by &#x60;contribution_receipt_amount&#x60;, this is populated with the &#x60;contribution_receipt_amount&#x60; of the last result. However, you will need to pass the index of that last result to &#x60;last_index&#x60; to get the next page.
     * @param {string} [minImageNumber] 
     * @param {Array<string>} [contributorOccupation] Occupation of contributor, filers need to make an effort to gather this information
     * @param {Array<string>} [contributorZip] Zip code of contributor
     * @param {Array<'individual' | 'committee'>} [contributorType] Filters individual or committee contributions based on line number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceiptsApi
     */
    public schedulesScheduleASubIdGet(twoYearTransactionPeriod: number, apiKey: string, subId: string, lastIndex?: number, recipientCommitteeType?: Array<'' | 'C' | 'D' | 'E' | 'H' | 'I' | 'N' | 'O' | 'P' | 'Q' | 'S' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'>, contributorEmployer?: Array<string>, minAmount?: string, lastContributorAggregateYtd?: number, maxDate?: string, committeeId?: Array<string>, contributorState?: Array<string>, contributorCity?: Array<string>, lineNumber?: string, maxImageNumber?: string, sort?: string, contributorName?: Array<string>, sortHideNull?: boolean, isIndividual?: boolean, maxAmount?: string, lastContributionReceiptDate?: string, minDate?: string, sortNullOnly?: boolean, imageNumber?: Array<string>, perPage?: number, contributorId?: Array<string>, lastContributionReceiptAmount?: number, minImageNumber?: string, contributorOccupation?: Array<string>, contributorZip?: Array<string>, contributorType?: Array<'individual' | 'committee'>, options?: any) {
        return ReceiptsApiFp(this.configuration).schedulesScheduleASubIdGet(twoYearTransactionPeriod, apiKey, subId, lastIndex, recipientCommitteeType, contributorEmployer, minAmount, lastContributorAggregateYtd, maxDate, committeeId, contributorState, contributorCity, lineNumber, maxImageNumber, sort, contributorName, sortHideNull, isIndividual, maxAmount, lastContributionReceiptDate, minDate, sortNullOnly, imageNumber, perPage, contributorId, lastContributionReceiptAmount, minImageNumber, contributorOccupation, contributorZip, contributorType, options)(this.axios, this.basePath);
    }

}


/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesCandidatesGet(q: Array<string>, apiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q','Required parameter q was null or undefined when calling namesCandidatesGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling namesCandidatesGet.');
            }
            const localVarPath = `/names/candidates/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (q) {
                localVarQueryParameter['q'] = q;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesCommitteesGet(q: Array<string>, apiKey: string, options: any = {}): RequestArgs {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q','Required parameter q was null or undefined when calling namesCommitteesGet.');
            }
            // verify required parameter 'apiKey' is not null or undefined
            if (apiKey === null || apiKey === undefined) {
                throw new RequiredError('apiKey','Required parameter apiKey was null or undefined when calling namesCommitteesGet.');
            }
            const localVarPath = `/names/committees/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication apiKey required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarQueryParameter["api_key"] = localVarApiKeyValue;
            }

            if (q) {
                localVarQueryParameter['q'] = q;
            }

            if (apiKey !== undefined) {
                localVarQueryParameter['api_key'] = apiKey;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    return {
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesCandidatesGet(q: Array<string>, apiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CandidateSearchList> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).namesCandidatesGet(q, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesCommitteesGet(q: Array<string>, apiKey: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommitteeSearchList> {
            const localVarAxiosArgs = SearchApiAxiosParamCreator(configuration).namesCommitteesGet(q, apiKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesCandidatesGet(q: Array<string>, apiKey: string, options?: any) {
            return SearchApiFp(configuration).namesCandidatesGet(q, apiKey, options)(axios, basePath);
        },
        /**
         *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
         * @param {Array<string>} q Name (candidate or committee) to search for
         * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        namesCommitteesGet(q: Array<string>, apiKey: string, options?: any) {
            return SearchApiFp(configuration).namesCommitteesGet(q, apiKey, options)(axios, basePath);
        },
    };
};

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
     * @param {Array<string>} q Name (candidate or committee) to search for
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public namesCandidatesGet(q: Array<string>, apiKey: string, options?: any) {
        return SearchApiFp(this.configuration).namesCandidatesGet(q, apiKey, options)(this.axios, this.basePath);
    }

    /**
     *  Search for candidates or committees by name. If you\'re looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step. 
     * @param {Array<string>} q Name (candidate or committee) to search for
     * @param {string} apiKey  API key for https://api.data.gov. Get one at https://api.data.gov/signup. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public namesCommitteesGet(q: Array<string>, apiKey: string, options?: any) {
        return SearchApiFp(this.configuration).namesCommitteesGet(q, apiKey, options)(this.axios, this.basePath);
    }

}


