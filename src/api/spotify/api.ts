// tslint:disable
/**
 * Spotify
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Album
 */
export interface Album {
    /**
     * The type of the album: one of \'album\', \'single\', or \'compilation\'.
     * @type {string}
     * @memberof Album
     */
    albumType?: string;
    /**
     * The artists of the album. Each artist object includes a link in href to more detailed information about the artist.
     * @type {Array<Artist>}
     * @memberof Album
     */
    artists?: Array<Artist>;
    /**
     * The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.
     * @type {Array<string>}
     * @memberof Album
     */
    availableMarkets?: Array<string>;
    /**
     * The copyright statements of the album.
     * @type {Array<AlbumCopyrights>}
     * @memberof Album
     */
    copyrights?: Array<AlbumCopyrights>;
    /**
     * Known external IDs for this album.
     * @type {{ [key: string]: string; }}
     * @memberof Album
     */
    externalIds?: { [key: string]: string; };
    /**
     * Known external URLs for this album.
     * @type {{ [key: string]: string; }}
     * @memberof Album
     */
    externalUrls?: { [key: string]: string; };
    /**
     * A list of the genres used to classify the album. For example: \'Prog Rock\', \'Post-Grunge\'. (If not yet classified, the array is empty.)
     * @type {Array<string>}
     * @memberof Album
     */
    genres?: Array<string>;
    /**
     * A link to the Web API endpoint providing full details of the album.
     * @type {string}
     * @memberof Album
     */
    href?: string;
    /**
     * The Spotify ID for the album.
     * @type {string}
     * @memberof Album
     */
    id?: string;
    /**
     * The cover art for the album in various sizes, widest first.
     * @type {Array<Image>}
     * @memberof Album
     */
    images?: Array<Image>;
    /**
     * The name of the album.
     * @type {string}
     * @memberof Album
     */
    name?: string;
    /**
     * The popularity of the album. The value will be between 0 and 100, with 100 being the most popular. The popularity is calculated from the popularity of the album\'s individual tracks.
     * @type {number}
     * @memberof Album
     */
    popularity?: number;
    /**
     * The date the album was first released, for example \'1981-12-15\'. Depending on the precision, it might be shown as \'1981\' or \'1981-12\'.
     * @type {string}
     * @memberof Album
     */
    releaseDate?: string;
    /**
     * The precision with which release_date value is known: \'year\', \'month\', or \'day\'.
     * @type {string}
     * @memberof Album
     */
    releaseDatePrecision?: string;
    /**
     * 
     * @type {TrackSimplePage}
     * @memberof Album
     */
    tracks?: TrackSimplePage;
    /**
     * The object type: \'album\'.
     * @type {string}
     * @memberof Album
     */
    type?: string;
    /**
     * The Spotify URI for the album.
     * @type {string}
     * @memberof Album
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface AlbumCopyrights
 */
export interface AlbumCopyrights {
    /**
     * The copyright text for this album.
     * @type {string}
     * @memberof AlbumCopyrights
     */
    text?: string;
    /**
     * The type of copyright: C = the copyright, P = the sound recording (performance) copyright.
     * @type {string}
     * @memberof AlbumCopyrights
     */
    type?: string;
}
/**
 * 
 * @export
 * @interface AlbumSimple
 */
export interface AlbumSimple {
    /**
     * The type of the album: one of \'album\', \'single\', or \'compilation\'.
     * @type {string}
     * @memberof AlbumSimple
     */
    albumType?: string;
    /**
     * The markets in which the album is available: ISO 3166-1 alpha-2 country codes. Note that an album is considered available in a market when at least 1 of its tracks is available in that market.
     * @type {Array<string>}
     * @memberof AlbumSimple
     */
    availableMarkets?: Array<string>;
    /**
     * Known external URLs for this album.
     * @type {{ [key: string]: string; }}
     * @memberof AlbumSimple
     */
    externalUrls?: { [key: string]: string; };
    /**
     * A link to the Web API endpoint providing full details of the album.
     * @type {string}
     * @memberof AlbumSimple
     */
    href?: string;
    /**
     * The Spotify ID for the album.
     * @type {string}
     * @memberof AlbumSimple
     */
    id?: string;
    /**
     * The cover art for the album in various sizes, widest first.
     * @type {Array<Image>}
     * @memberof AlbumSimple
     */
    images?: Array<Image>;
    /**
     * The name of the album.
     * @type {string}
     * @memberof AlbumSimple
     */
    name?: string;
    /**
     * The object type: \'album\'.
     * @type {string}
     * @memberof AlbumSimple
     */
    type?: string;
    /**
     * The Spotify URI for the album.
     * @type {string}
     * @memberof AlbumSimple
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface AlbumSimplePage
 */
export interface AlbumSimplePage {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof AlbumSimplePage
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<AlbumSimple>}
     * @memberof AlbumSimplePage
     */
    items?: Array<AlbumSimple>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof AlbumSimplePage
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof AlbumSimplePage
     */
    next?: string;
    /**
     * The offset of the items returned (as set in the query or by default).
     * @type {number}
     * @memberof AlbumSimplePage
     */
    offset?: number;
    /**
     * URL to the previous page of items. (null if none)
     * @type {string}
     * @memberof AlbumSimplePage
     */
    previous?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof AlbumSimplePage
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface AlbumTrackPage
 */
export interface AlbumTrackPage {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof AlbumTrackPage
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<TrackSimple>}
     * @memberof AlbumTrackPage
     */
    items?: Array<TrackSimple>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof AlbumTrackPage
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof AlbumTrackPage
     */
    next?: string;
    /**
     * The offset of the items returned (as set in the query or by default).
     * @type {number}
     * @memberof AlbumTrackPage
     */
    offset?: number;
    /**
     * URL to the previous page of items. (null if none)
     * @type {string}
     * @memberof AlbumTrackPage
     */
    previous?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof AlbumTrackPage
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface Artist
 */
export interface Artist {
    /**
     * Known external URLs for this artist.
     * @type {{ [key: string]: string; }}
     * @memberof Artist
     */
    externalUrls?: { [key: string]: string; };
    /**
     * 
     * @type {Followers}
     * @memberof Artist
     */
    followers?: Followers;
    /**
     * A list of the genres the artist is associated with. For example: \'Prog Rock\', \'Post-Grunge\'. (If not yet classified, the array is empty.)
     * @type {Array<string>}
     * @memberof Artist
     */
    genres?: Array<string>;
    /**
     * A link to the Web API endpoint providing full details of the artist.
     * @type {string}
     * @memberof Artist
     */
    href?: string;
    /**
     * The Spotify ID for the artist.
     * @type {string}
     * @memberof Artist
     */
    id?: string;
    /**
     * Images of the artist in various sizes, widest first.
     * @type {Array<Image>}
     * @memberof Artist
     */
    images?: Array<Image>;
    /**
     * The name of the artist.
     * @type {string}
     * @memberof Artist
     */
    name?: string;
    /**
     * The popularity of the artist. The value will be between 0 and 100, with 100 being the most popular. The artist\'s popularity is calculated from the popularity of all the artist\'s tracks.
     * @type {number}
     * @memberof Artist
     */
    popularity?: number;
    /**
     * The object type: \'artist\'
     * @type {string}
     * @memberof Artist
     */
    type?: string;
    /**
     * The Spotify URI for the artist.
     * @type {string}
     * @memberof Artist
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface ArtistSimple
 */
export interface ArtistSimple {
    /**
     * Known external URLs for this artist.
     * @type {{ [key: string]: string; }}
     * @memberof ArtistSimple
     */
    externalUrls?: { [key: string]: string; };
    /**
     * A link to the Web API endpoint providing full details of the artist.
     * @type {string}
     * @memberof ArtistSimple
     */
    href?: string;
    /**
     * The Spotify ID for the artist.
     * @type {string}
     * @memberof ArtistSimple
     */
    id?: string;
    /**
     * The name of the artist.
     * @type {string}
     * @memberof ArtistSimple
     */
    name?: string;
    /**
     * The object type: \'artist\'
     * @type {string}
     * @memberof ArtistSimple
     */
    type?: string;
    /**
     * The Spotify URI for the artist.
     * @type {string}
     * @memberof ArtistSimple
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * A link to the Web API endpoint returning full details of the category.
     * @type {string}
     * @memberof Category
     */
    href?: string;
    /**
     * 
     * @type {Array<Image>}
     * @memberof Category
     */
    icons?: Array<Image>;
    /**
     * The Spotify category ID of the category.
     * @type {string}
     * @memberof Category
     */
    id?: string;
    /**
     * The name of the category.
     * @type {string}
     * @memberof Category
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface CategoryPage
 */
export interface CategoryPage {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof CategoryPage
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<Category>}
     * @memberof CategoryPage
     */
    items?: Array<Category>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof CategoryPage
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof CategoryPage
     */
    next?: string;
    /**
     * The offset of the items returned (as set in the query or by default).
     * @type {number}
     * @memberof CategoryPage
     */
    offset?: number;
    /**
     * URL to the previous page of items. (null if none)
     * @type {string}
     * @memberof CategoryPage
     */
    previous?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof CategoryPage
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface CurrentUserProfile
 */
export interface CurrentUserProfile {
    /**
     * The user\'s date-of-birth. This field is only available when the current user has granted access to the user-read-birthdate scope.
     * @type {string}
     * @memberof CurrentUserProfile
     */
    birthdate?: string;
    /**
     * The country of the user, as set in the user\'s account profile. An ISO 3166-1 alpha-2 country code. This field is only available when the current user has granted access to the user-read-private scope.
     * @type {string}
     * @memberof CurrentUserProfile
     */
    country?: string;
    /**
     * The name displayed on the user\'s profile.
     * @type {string}
     * @memberof CurrentUserProfile
     */
    displayName?: string;
    /**
     * The user\'s email address, as entered by the user when creating their account. This email address is unverified; there is no proof that it actually belongs to the user. This field is only available when the current user has granted access to the user-read-email scope.
     * @type {string}
     * @memberof CurrentUserProfile
     */
    email?: string;
    /**
     * Known external URLs for this user.
     * @type {{ [key: string]: string; }}
     * @memberof CurrentUserProfile
     */
    externalUrls?: { [key: string]: string; };
    /**
     * 
     * @type {Followers}
     * @memberof CurrentUserProfile
     */
    followers?: Followers;
    /**
     * A link to the Web API endpoint for this user.
     * @type {string}
     * @memberof CurrentUserProfile
     */
    href?: string;
    /**
     * The Spotify ID for this user.
     * @type {string}
     * @memberof CurrentUserProfile
     */
    id?: string;
    /**
     * The user\'s Spotify subscription level: \'premium\', \'free\', etc. (The subscription level \'open\' can be considered the same as \'free\'.) This field is only available when the current user has granted access to the user-read-private scope.
     * @type {string}
     * @memberof CurrentUserProfile
     */
    product?: string;
    /**
     * The object type: \'user\'
     * @type {string}
     * @memberof CurrentUserProfile
     */
    type?: string;
    /**
     * The Spotify URI for the user.
     * @type {string}
     * @memberof CurrentUserProfile
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface FeaturedPlaylists
 */
export interface FeaturedPlaylists {
    /**
     * A sentence describing the context for the featured playlists.
     * @type {string}
     * @memberof FeaturedPlaylists
     */
    message?: string;
    /**
     * 
     * @type {PlaylistSimplePage}
     * @memberof FeaturedPlaylists
     */
    playlists?: PlaylistSimplePage;
}
/**
 * Information about the followers of the artist.
 * @export
 * @interface Followers
 */
export interface Followers {
    /**
     * A link to the Web API endpoint providing full details of the followers; null if not available.
     * @type {string}
     * @memberof Followers
     */
    href?: string;
    /**
     * The total number of followers.
     * @type {number}
     * @memberof Followers
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * The image height in pixels. If unknown: null or not returned.
     * @type {number}
     * @memberof Image
     */
    height?: number;
    /**
     * The source URL of the image.
     * @type {string}
     * @memberof Image
     */
    url?: string;
    /**
     * The image width in pixels. If unknown: null or not returned.
     * @type {number}
     * @memberof Image
     */
    width?: number;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {string}
     * @memberof InlineObject
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject
     */
    _public?: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * 
     * @type {string}
     * @memberof InlineObject1
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject1
     */
    _public?: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineObject2
     */
    _public?: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineObject3
     */
    uris: Array<object>;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * 
     * @type {Array<object>}
     * @memberof InlineObject4
     */
    tracks: Array<object>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<Album>}
     * @memberof InlineResponse200
     */
    albums?: Array<Album>;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<Artist>}
     * @memberof InlineResponse2001
     */
    artists?: Array<Artist>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<Track>}
     * @memberof InlineResponse2002
     */
    tracks?: Array<Track>;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {PlaylistSimplePage}
     * @memberof InlineResponse2003
     */
    playlists?: PlaylistSimplePage;
}
/**
 * 
 * @export
 * @interface Playlist
 */
export interface Playlist {
    /**
     * True if the owner allows other users to modify the playlist.
     * @type {boolean}
     * @memberof Playlist
     */
    collaborative?: boolean;
    /**
     * The playlist description. Only returned for modified, verified playlists, otherwise null.
     * @type {string}
     * @memberof Playlist
     */
    description?: string;
    /**
     * Known external URLs for this album.
     * @type {{ [key: string]: string; }}
     * @memberof Playlist
     */
    externalUrls?: { [key: string]: string; };
    /**
     * 
     * @type {PlaylistFollowers}
     * @memberof Playlist
     */
    followers?: PlaylistFollowers;
    /**
     * A link to the Web API endpoint providing full details of the playlist.
     * @type {string}
     * @memberof Playlist
     */
    href?: string;
    /**
     * The Spotify ID of the playlist.
     * @type {string}
     * @memberof Playlist
     */
    id?: string;
    /**
     * The cover art for the album in various sizes, widest first.
     * @type {Array<Image>}
     * @memberof Playlist
     */
    images?: Array<Image>;
    /**
     * The name of the playlist.
     * @type {string}
     * @memberof Playlist
     */
    name?: string;
    /**
     * 
     * @type {UserProfile}
     * @memberof Playlist
     */
    owner?: UserProfile;
    /**
     * The playlist\'s public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists.
     * @type {boolean}
     * @memberof Playlist
     */
    _public?: boolean;
    /**
     * The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
     * @type {string}
     * @memberof Playlist
     */
    snapshotId?: string;
    /**
     * 
     * @type {PlaylistTrackPage}
     * @memberof Playlist
     */
    tracks?: PlaylistTrackPage;
    /**
     * The object type: \'playlist\'.
     * @type {string}
     * @memberof Playlist
     */
    type?: string;
    /**
     * Spotify URI of the playlist.
     * @type {string}
     * @memberof Playlist
     */
    uri?: string;
}
/**
 * Information about the followers of the playlist.
 * @export
 * @interface PlaylistFollowers
 */
export interface PlaylistFollowers {
    /**
     * A link to the Web API endpoint providing full details of the followers; null if not available.
     * @type {string}
     * @memberof PlaylistFollowers
     */
    href?: string;
    /**
     * The total number of followers.
     * @type {number}
     * @memberof PlaylistFollowers
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface PlaylistSimple
 */
export interface PlaylistSimple {
    /**
     * True if the owner allows other users to modify the playlist.
     * @type {boolean}
     * @memberof PlaylistSimple
     */
    collaborative?: boolean;
    /**
     * Known external URLs for this album.
     * @type {{ [key: string]: string; }}
     * @memberof PlaylistSimple
     */
    externalUrls?: { [key: string]: string; };
    /**
     * A link to the Web API endpoint providing full details of the playlist.
     * @type {string}
     * @memberof PlaylistSimple
     */
    href?: string;
    /**
     * The Spotify ID of the playlist.
     * @type {string}
     * @memberof PlaylistSimple
     */
    id?: string;
    /**
     * The cover art for the album in various sizes, widest first.
     * @type {Array<Image>}
     * @memberof PlaylistSimple
     */
    images?: Array<Image>;
    /**
     * The name of the playlist.
     * @type {string}
     * @memberof PlaylistSimple
     */
    name?: string;
    /**
     * 
     * @type {UserProfile}
     * @memberof PlaylistSimple
     */
    owner?: UserProfile;
    /**
     * The playlist\'s public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists.
     * @type {boolean}
     * @memberof PlaylistSimple
     */
    _public?: boolean;
    /**
     * The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
     * @type {string}
     * @memberof PlaylistSimple
     */
    snapshotId?: string;
    /**
     * 
     * @type {PlaylistSimpleTracks}
     * @memberof PlaylistSimple
     */
    tracks?: PlaylistSimpleTracks;
    /**
     * The object type: \'playlist\'.
     * @type {string}
     * @memberof PlaylistSimple
     */
    type?: string;
    /**
     * Spotify URI of the playlist.
     * @type {string}
     * @memberof PlaylistSimple
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface PlaylistSimplePage
 */
export interface PlaylistSimplePage {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof PlaylistSimplePage
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<PlaylistSimple>}
     * @memberof PlaylistSimplePage
     */
    items?: Array<PlaylistSimple>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof PlaylistSimplePage
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof PlaylistSimplePage
     */
    next?: string;
    /**
     * The offset of the items returned (as set in the query or by default).
     * @type {number}
     * @memberof PlaylistSimplePage
     */
    offset?: number;
    /**
     * URL to the previous page of items. (null if none)
     * @type {string}
     * @memberof PlaylistSimplePage
     */
    previous?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof PlaylistSimplePage
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface PlaylistSimpleTracks
 */
export interface PlaylistSimpleTracks {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof PlaylistSimpleTracks
     */
    href?: string;
    /**
     * The total number of tracks available to return.
     * @type {number}
     * @memberof PlaylistSimpleTracks
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface PlaylistSnapshot
 */
export interface PlaylistSnapshot {
    /**
     * The version identifier for the modified playlist. Can be supplied in other requests to target a specific playlist version.
     * @type {string}
     * @memberof PlaylistSnapshot
     */
    snapshotId?: string;
}
/**
 * 
 * @export
 * @interface PlaylistTrack
 */
export interface PlaylistTrack {
    /**
     * The date and time the track was added in ISO 8601 format. Note that some very old playlists may return null in this field.
     * @type {string}
     * @memberof PlaylistTrack
     */
    addedAt?: string;
    /**
     * 
     * @type {UserProfile}
     * @memberof PlaylistTrack
     */
    addedBy?: UserProfile;
    /**
     * Whether this track is a [local file](https://developer.spotify.com/web-api/local-files-spotify-playlists/) or not.
     * @type {boolean}
     * @memberof PlaylistTrack
     */
    isLocal?: boolean;
    /**
     * 
     * @type {Track}
     * @memberof PlaylistTrack
     */
    track?: Track;
}
/**
 * 
 * @export
 * @interface PlaylistTrackPage
 */
export interface PlaylistTrackPage {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof PlaylistTrackPage
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<PlaylistTrack>}
     * @memberof PlaylistTrackPage
     */
    items?: Array<PlaylistTrack>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof PlaylistTrackPage
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof PlaylistTrackPage
     */
    next?: string;
    /**
     * The offset of the items returned (as set in the query or by default).
     * @type {number}
     * @memberof PlaylistTrackPage
     */
    offset?: number;
    /**
     * URL to the previous page of items. (null if none)
     * @type {string}
     * @memberof PlaylistTrackPage
     */
    previous?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof PlaylistTrackPage
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface SavedTrack
 */
export interface SavedTrack {
    /**
     * The date and time the track was added in ISO 8601 format. Note that some very old playlists may return null in this field.
     * @type {string}
     * @memberof SavedTrack
     */
    addedAt?: string;
    /**
     * 
     * @type {Track}
     * @memberof SavedTrack
     */
    track?: Track;
}
/**
 * 
 * @export
 * @interface SavedTrackPage
 */
export interface SavedTrackPage {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof SavedTrackPage
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<SavedTrack>}
     * @memberof SavedTrackPage
     */
    items?: Array<SavedTrack>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof SavedTrackPage
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof SavedTrackPage
     */
    next?: string;
    /**
     * The offset of the items returned (as set in the query or by default).
     * @type {number}
     * @memberof SavedTrackPage
     */
    offset?: number;
    /**
     * URL to the previous page of items. (null if none)
     * @type {string}
     * @memberof SavedTrackPage
     */
    previous?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof SavedTrackPage
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface Search
 */
export interface Search {
    /**
     * 
     * @type {SearchAlbums}
     * @memberof Search
     */
    albums?: SearchAlbums;
    /**
     * 
     * @type {SearchArtists}
     * @memberof Search
     */
    artists?: SearchArtists;
    /**
     * 
     * @type {SearchTracks}
     * @memberof Search
     */
    tracks?: SearchTracks;
}
/**
 * Present if the type of search includes \'album\'.
 * @export
 * @interface SearchAlbums
 */
export interface SearchAlbums {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof SearchAlbums
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<AlbumSimple>}
     * @memberof SearchAlbums
     */
    items?: Array<AlbumSimple>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof SearchAlbums
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof SearchAlbums
     */
    next?: string;
    /**
     * The offset of the items returned (as set in the query or by default).
     * @type {number}
     * @memberof SearchAlbums
     */
    offset?: number;
    /**
     * URL to the previous page of items. (null if none)
     * @type {string}
     * @memberof SearchAlbums
     */
    previous?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof SearchAlbums
     */
    total?: number;
}
/**
 * Present if the type of search includes \'artist\'.
 * @export
 * @interface SearchArtists
 */
export interface SearchArtists {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof SearchArtists
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<Artist>}
     * @memberof SearchArtists
     */
    items?: Array<Artist>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof SearchArtists
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof SearchArtists
     */
    next?: string;
    /**
     * The offset of the items returned (as set in the query or by default).
     * @type {number}
     * @memberof SearchArtists
     */
    offset?: number;
    /**
     * URL to the previous page of items. (null if none)
     * @type {string}
     * @memberof SearchArtists
     */
    previous?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof SearchArtists
     */
    total?: number;
}
/**
 * Present if the type of search includes \'track\'.
 * @export
 * @interface SearchTracks
 */
export interface SearchTracks {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof SearchTracks
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<Track>}
     * @memberof SearchTracks
     */
    items?: Array<Track>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof SearchTracks
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof SearchTracks
     */
    next?: string;
    /**
     * The offset of the items returned (as set in the query or by default).
     * @type {number}
     * @memberof SearchTracks
     */
    offset?: number;
    /**
     * URL to the previous page of items. (null if none)
     * @type {string}
     * @memberof SearchTracks
     */
    previous?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof SearchTracks
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface Track
 */
export interface Track {
    /**
     * 
     * @type {AlbumSimple}
     * @memberof Track
     */
    album?: AlbumSimple;
    /**
     * The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.
     * @type {Array<ArtistSimple>}
     * @memberof Track
     */
    artists?: Array<ArtistSimple>;
    /**
     * A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code. 
     * @type {Array<string>}
     * @memberof Track
     */
    availableMarkets?: Array<string>;
    /**
     * The disc number (usually 1 unless the album consists of more than one disc).
     * @type {number}
     * @memberof Track
     */
    discNumber?: number;
    /**
     * The track length in milliseconds.
     * @type {number}
     * @memberof Track
     */
    durationMs?: number;
    /**
     * Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown).
     * @type {boolean}
     * @memberof Track
     */
    explicit?: boolean;
    /**
     * Known external IDs for the track.
     * @type {{ [key: string]: string; }}
     * @memberof Track
     */
    externalIds?: { [key: string]: string; };
    /**
     * Known external URLs for this track.
     * @type {{ [key: string]: string; }}
     * @memberof Track
     */
    externalUrls?: { [key: string]: string; };
    /**
     * A link to the Web API endpoint providing full details of the track.
     * @type {string}
     * @memberof Track
     */
    href?: string;
    /**
     * The Spotify ID for the track.
     * @type {string}
     * @memberof Track
     */
    id?: string;
    /**
     * Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.
     * @type {boolean}
     * @memberof Track
     */
    isPlayable?: boolean;
    /**
     * 
     * @type {TrackLinkedFrom}
     * @memberof Track
     */
    linkedFrom?: TrackLinkedFrom;
    /**
     * The name of the track.
     * @type {string}
     * @memberof Track
     */
    name?: string;
    /**
     * A URL to a 30 second preview (MP3 format) of the track.
     * @type {string}
     * @memberof Track
     */
    previewUrl?: string;
    /**
     * The number of the track. If an album has several discs, the track number is the number on the specified disc.
     * @type {number}
     * @memberof Track
     */
    trackNumber?: number;
    /**
     * The object type: \'track\'.
     * @type {string}
     * @memberof Track
     */
    type?: string;
    /**
     * The Spotify URI for the track.
     * @type {string}
     * @memberof Track
     */
    uri?: string;
}
/**
 * Part of the response when Track Relinking is applied, and the requested track has been replaced with different track. The track in the linked_from object contains information about the originally requested track.
 * @export
 * @interface TrackLinkedFrom
 */
export interface TrackLinkedFrom {
    /**
     * Known external URLs for this track.
     * @type {{ [key: string]: string; }}
     * @memberof TrackLinkedFrom
     */
    externalUrls?: { [key: string]: string; };
    /**
     * A link to the Web API endpoint providing full details of the track.
     * @type {string}
     * @memberof TrackLinkedFrom
     */
    href?: string;
    /**
     * The Spotify ID for the track.
     * @type {string}
     * @memberof TrackLinkedFrom
     */
    id?: string;
    /**
     * The object type: \'track\'.
     * @type {string}
     * @memberof TrackLinkedFrom
     */
    type?: string;
    /**
     * The Spotify URI for the track.
     * @type {string}
     * @memberof TrackLinkedFrom
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface TrackSimple
 */
export interface TrackSimple {
    /**
     * The artists who performed the track. Each artist object includes a link in href to more detailed information about the artist.
     * @type {Array<ArtistSimple>}
     * @memberof TrackSimple
     */
    artists?: Array<ArtistSimple>;
    /**
     * A list of the countries in which the track can be played, identified by their ISO 3166-1 alpha-2 code. 
     * @type {Array<string>}
     * @memberof TrackSimple
     */
    availableMarkets?: Array<string>;
    /**
     * The disc number (usually 1 unless the album consists of more than one disc).
     * @type {number}
     * @memberof TrackSimple
     */
    discNumber?: number;
    /**
     * The track length in milliseconds.
     * @type {number}
     * @memberof TrackSimple
     */
    durationMs?: number;
    /**
     * Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown).
     * @type {boolean}
     * @memberof TrackSimple
     */
    explicit?: boolean;
    /**
     * Known external URLs for this track.
     * @type {{ [key: string]: string; }}
     * @memberof TrackSimple
     */
    externalUrls?: { [key: string]: string; };
    /**
     * A link to the Web API endpoint providing full details of the track.
     * @type {string}
     * @memberof TrackSimple
     */
    href?: string;
    /**
     * The Spotify ID for the track.
     * @type {string}
     * @memberof TrackSimple
     */
    id?: string;
    /**
     * Part of the response when Track Relinking is applied. If true, the track is playable in the given market. Otherwise false.
     * @type {boolean}
     * @memberof TrackSimple
     */
    isPlayable?: boolean;
    /**
     * 
     * @type {TrackLinkedFrom}
     * @memberof TrackSimple
     */
    linkedFrom?: TrackLinkedFrom;
    /**
     * The name of the track.
     * @type {string}
     * @memberof TrackSimple
     */
    name?: string;
    /**
     * A URL to a 30 second preview (MP3 format) of the track.
     * @type {string}
     * @memberof TrackSimple
     */
    previewUrl?: string;
    /**
     * The number of the track. If an album has several discs, the track number is the number on the specified disc.
     * @type {number}
     * @memberof TrackSimple
     */
    trackNumber?: number;
    /**
     * The object type: \'track\'.
     * @type {string}
     * @memberof TrackSimple
     */
    type?: string;
    /**
     * The Spotify URI for the track.
     * @type {string}
     * @memberof TrackSimple
     */
    uri?: string;
}
/**
 * 
 * @export
 * @interface TrackSimplePage
 */
export interface TrackSimplePage {
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof TrackSimplePage
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<TrackSimple>}
     * @memberof TrackSimplePage
     */
    items?: Array<TrackSimple>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof TrackSimplePage
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof TrackSimplePage
     */
    next?: string;
    /**
     * The offset of the items returned (as set in the query or by default).
     * @type {number}
     * @memberof TrackSimplePage
     */
    offset?: number;
    /**
     * URL to the previous page of items. (null if none)
     * @type {string}
     * @memberof TrackSimplePage
     */
    previous?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof TrackSimplePage
     */
    total?: number;
}
/**
 * 
 * @export
 * @interface UserFollowed
 */
export interface UserFollowed {
    /**
     * 
     * @type {UserFollowedArtists}
     * @memberof UserFollowed
     */
    artists?: UserFollowedArtists;
}
/**
 * Present if the type of followe items is \'artist\'.
 * @export
 * @interface UserFollowedArtists
 */
export interface UserFollowedArtists {
    /**
     * 
     * @type {UserFollowedArtistsCursor}
     * @memberof UserFollowedArtists
     */
    cursor?: UserFollowedArtistsCursor;
    /**
     * A link to the Web API endpoint returning the full result of the request.
     * @type {string}
     * @memberof UserFollowedArtists
     */
    href?: string;
    /**
     * The requested data.
     * @type {Array<Artist>}
     * @memberof UserFollowedArtists
     */
    items?: Array<Artist>;
    /**
     * The maximum number of items in the response (as set in the query or by default).
     * @type {number}
     * @memberof UserFollowedArtists
     */
    limit?: number;
    /**
     * URL to the next page of items. (null if none)
     * @type {string}
     * @memberof UserFollowedArtists
     */
    next?: string;
    /**
     * The total number of items available to return.
     * @type {number}
     * @memberof UserFollowedArtists
     */
    total?: number;
}
/**
 * The cursors used to find the next set of items.
 * @export
 * @interface UserFollowedArtistsCursor
 */
export interface UserFollowedArtistsCursor {
    /**
     * The cursor to use as key to find the next page of items.
     * @type {string}
     * @memberof UserFollowedArtistsCursor
     */
    after?: string;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * The name displayed on the user\'s profile.
     * @type {string}
     * @memberof UserProfile
     */
    displayName?: string;
    /**
     * Known external URLs for this user.
     * @type {{ [key: string]: string; }}
     * @memberof UserProfile
     */
    externalUrls?: { [key: string]: string; };
    /**
     * 
     * @type {Followers}
     * @memberof UserProfile
     */
    followers?: Followers;
    /**
     * A link to the Web API endpoint for this user.
     * @type {string}
     * @memberof UserProfile
     */
    href?: string;
    /**
     * The Spotify ID for this user.
     * @type {string}
     * @memberof UserProfile
     */
    id?: string;
    /**
     * The object type: \'user\'
     * @type {string}
     * @memberof UserProfile
     */
    type?: string;
    /**
     * The Spotify URI for the user.
     * @type {string}
     * @memberof UserProfile
     */
    uri?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsGet(ids: string, market?: string, options: any = {}): RequestArgs {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling albumsGet.');
            }
            const localVarPath = `/albums`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get an Album](https://developer.spotify.com/web-api/get-album/) 
         * @param {string} id The Spotify ID for the album
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsIdGet(id: string, market?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling albumsIdGet.');
            }
            const localVarPath = `/albums/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get an Album\'s Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) 
         * @param {string} id The Spotify ID for the album
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsIdTracksGet(id: string, limit?: number, offset?: number, market?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling albumsIdTracksGet.');
            }
            const localVarPath = `/albums/{id}/tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsGet(ids: string, options: any = {}): RequestArgs {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling artistsGet.');
            }
            const localVarPath = `/artists`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get an Artist\'s Albums](https://developer.spotify.com/web-api/get-artists-albums/) 
         * @param {string} id The Spotify ID for the artist
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [albumType] Filter by album types
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdAlbumsGet(id: string, limit?: number, offset?: number, albumType?: string, market?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling artistsIdAlbumsGet.');
            }
            const localVarPath = `/artists/{id}/albums`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (albumType !== undefined) {
                localVarQueryParameter['album_type'] = albumType;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get an Artist](https://developer.spotify.com/web-api/get-artist/) 
         * @param {string} id The Spotify ID for the artist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdGet(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling artistsIdGet.');
            }
            const localVarPath = `/artists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get an Artist\'s Related Artists](https://developer.spotify.com/web-api/get-related-artists/) 
         * @param {string} id The Spotify ID for the artist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdRelatedArtistsGet(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling artistsIdRelatedArtistsGet.');
            }
            const localVarPath = `/artists/{id}/related-artists`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get an Artist\'s Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) 
         * @param {string} id The Spotify ID for the artist
         * @param {string} country The country (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdTopTracksGet(id: string, country: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling artistsIdTopTracksGet.');
            }
            // verify required parameter 'country' is not null or undefined
            if (country === null || country === undefined) {
                throw new RequiredError('country','Required parameter country was null or undefined when calling artistsIdTopTracksGet.');
            }
            const localVarPath = `/artists/{id}/top-tracks`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/) 
         * @param {string} categoryId The Spotify ID of the category you wish to fetch.
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseCategoriesCategoryIdGet(categoryId: string, country?: string, locale?: string, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling browseCategoriesCategoryIdGet.');
            }
            const localVarPath = `/browse/categories/{category_id}`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get a Category\'s playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) 
         * @param {string} categoryId The Spotify ID of the category you wish to fetch.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseCategoriesCategoryIdPlaylistsGet(categoryId: string, limit?: number, offset?: number, country?: string, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling browseCategoriesCategoryIdPlaylistsGet.');
            }
            const localVarPath = `/browse/categories/{category_id}/playlists`
                .replace(`{${"category_id"}}`, encodeURIComponent(String(categoryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseCategoriesGet(limit?: number, offset?: number, country?: string, locale?: string, accept?: string, options: any = {}): RequestArgs {
            const localVarPath = `/browse/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
         * @param {string} [timestamp] A timestamp in ISO 8601 format (yyyy-MM-dd\&#39;T\&#39;HH:mm:ss) with the user\&#39;s local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: \&quot;2014-10-23T09:00:00\&quot; for a user whose local time is 9AM. 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseFeaturedPlaylistsGet(limit?: number, offset?: number, country?: string, locale?: string, timestamp?: string, accept?: string, options: any = {}): RequestArgs {
            const localVarPath = `/browse/featured-playlists`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseNewReleasesGet(limit?: number, offset?: number, country?: string, accept?: string, options: any = {}): RequestArgs {
            const localVarPath = `/browse/new-releases`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/) 
         * @param {'artist' | 'user'} type The type to follow.
         * @param {string} ids A comma-separated string of the artists or users ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingContainsGet(type: 'artist' | 'user', ids: string, options: any = {}): RequestArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling meFollowingContainsGet.');
            }
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meFollowingContainsGet.');
            }
            const localVarPath = `/me/following/contains`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) 
         * @param {'artist' | 'user'} type The type to unfollow.
         * @param {string} ids A comma-separated list of the artists or users ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingDelete(type: 'artist' | 'user', ids: string, options: any = {}): RequestArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling meFollowingDelete.');
            }
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meFollowingDelete.');
            }
            const localVarPath = `/me/following`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get User\'s Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) 
         * @param {'artist'} type The ID type, currently only artist is supported.
         * @param {number} [limit] The maximum number of items to return
         * @param {string} [after] The last artist ID retrieved from the previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingGet(type: 'artist', limit?: number, after?: string, options: any = {}): RequestArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling meFollowingGet.');
            }
            const localVarPath = `/me/following`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) 
         * @param {'artist' | 'user'} type The type to follow.
         * @param {string} ids A comma-separated list of the artists or users ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingPut(type: 'artist' | 'user', ids: string, options: any = {}): RequestArgs {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling meFollowingPut.');
            }
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meFollowingPut.');
            }
            const localVarPath = `/me/following`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get Current User\'s Profile](https://developer.spotify.com/web-api/get-current-users-profile/) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet(options: any = {}): RequestArgs {
            const localVarPath = `/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Check Current User\'s Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksContainsGet(ids: string, options: any = {}): RequestArgs {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meTracksContainsGet.');
            }
            const localVarPath = `/me/tracks/contains`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksDelete(ids: string, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meTracksDelete.');
            }
            const localVarPath = `/me/tracks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get Current User\'s Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksGet(limit?: number, offset?: number, market?: string, accept?: string, options: any = {}): RequestArgs {
            const localVarPath = `/me/tracks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksPut(ids: string, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling meTracksPut.');
            }
            const localVarPath = `/me/tracks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Search for an Item](https://developer.spotify.com/web-api/search-item/) 
         * @param {string} q The search query\&#39;s keywords (and optional field filters). The search is not case-sensitive: \&#39;roadhouse\&#39; will match \&#39;Roadhouse\&#39;, \&#39;roadHouse\&#39;, etc. Keywords will be matched in any order unless surrounded by quotes, thus q&#x3D;roadhouse&amp;20blues will match both \&#39;Blues Roadhouse\&#39; and \&#39;Roadhouse of the Blues\&#39;. Quotation marks can be used to limit the match to a phrase: q&#x3D;roadhouse&amp;20blues will match \&#39;My Roadhouse Blues\&#39; but not \&#39;Roadhouse of the Blues\&#39;. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q&#x3D;album:gold%20artist:abba&amp;type&#x3D;album will search for albums with the text \&#39;gold\&#39; in the album name and the text \&#39;abba\&#39; in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q&#x3D;damian%20genre:reggae-pop&amp;type&#x3D;artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist\&#39;s name and/or description.
         * @param {string} type A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q&#x3D;name:abacab&amp;type&#x3D;album,track will return both albums and tracks with \&quot;abacab\&quot; in their name.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(q: string, type: string, limit?: number, offset?: number, market?: string, options: any = {}): RequestArgs {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q','Required parameter q was null or undefined when calling searchGet.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling searchGet.');
            }
            const localVarPath = `/search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tracksGet(ids: string, market?: string, options: any = {}): RequestArgs {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling tracksGet.');
            }
            const localVarPath = `/tracks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get a Track](https://developer.spotify.com/web-api/get-track/) 
         * @param {string} id 
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tracksIdGet(id: string, market?: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tracksIdGet.');
            }
            const localVarPath = `/tracks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get a User\'s Profile](https://developer.spotify.com/web-api/get-users-profile/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(userId: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdGet.');
            }
            const localVarPath = `/users/{user_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get a List of a User\'s Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsGet(userId: string, limit?: number, offset?: number, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsGet.');
            }
            const localVarPath = `/users/{user_id}/playlists`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {string} ids A comma-separated list of users ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId: string, playlistId: string, ids: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersContainsGet.');
            }
            // verify required parameter 'playlistId' is not null or undefined
            if (playlistId === null || playlistId === undefined) {
                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersContainsGet.');
            }
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersContainsGet.');
            }
            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/followers/contains`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (ids !== undefined) {
                localVarQueryParameter['ids'] = ids;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdFollowersDelete(userId: string, playlistId: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersDelete.');
            }
            // verify required parameter 'playlistId' is not null or undefined
            if (playlistId === null || playlistId === undefined) {
                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersDelete.');
            }
            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/followers`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdFollowersPut(userId: string, playlistId: string, body: InlineObject2, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersPut.');
            }
            // verify required parameter 'playlistId' is not null or undefined
            if (playlistId === null || playlistId === undefined) {
                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPlaylistsPlaylistIdFollowersPut.');
            }
            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/followers`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {string} [fields] A comma-separated list of fields to filter query
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdGet(userId: string, playlistId: string, fields?: string, market?: string, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdGet.');
            }
            // verify required parameter 'playlistId' is not null or undefined
            if (playlistId === null || playlistId === undefined) {
                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdGet.');
            }
            const localVarPath = `/users/{user_id}/playlists/{playlist_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Change a Playlist\'s Details](https://developer.spotify.com/web-api/change-playlist-details/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject1} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdPut(userId: string, playlistId: string, body: InlineObject1, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdPut.');
            }
            // verify required parameter 'playlistId' is not null or undefined
            if (playlistId === null || playlistId === undefined) {
                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPlaylistsPlaylistIdPut.');
            }
            const localVarPath = `/users/{user_id}/playlists/{playlist_id}`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject4} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksDelete(userId: string, playlistId: string, body: InlineObject4, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksDelete.');
            }
            // verify required parameter 'playlistId' is not null or undefined
            if (playlistId === null || playlistId === undefined) {
                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksDelete.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksDelete.');
            }
            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/tracks`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Get a Playlist\'s Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [fields] A comma-separated list of fields to filter query
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksGet(userId: string, playlistId: string, limit?: number, offset?: number, fields?: string, market?: string, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksGet.');
            }
            // verify required parameter 'playlistId' is not null or undefined
            if (playlistId === null || playlistId === undefined) {
                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksGet.');
            }
            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/tracks`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (market !== undefined) {
                localVarQueryParameter['market'] = market;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {string} uris A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.
         * @param {number} [position] The position to insert the tracks, a zero-based index
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksPost(userId: string, playlistId: string, uris: string, position?: number, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPost.');
            }
            // verify required parameter 'playlistId' is not null or undefined
            if (playlistId === null || playlistId === undefined) {
                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPost.');
            }
            // verify required parameter 'uris' is not null or undefined
            if (uris === null || uris === undefined) {
                throw new RequiredError('uris','Required parameter uris was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPost.');
            }
            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/tracks`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (position !== undefined) {
                localVarQueryParameter['position'] = position;
            }

            if (uris !== undefined) {
                localVarQueryParameter['uris'] = uris;
            }

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Reorder or replace a Playlist\'s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject3} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksPut(userId: string, playlistId: string, body: InlineObject3, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPut.');
            }
            // verify required parameter 'playlistId' is not null or undefined
            if (playlistId === null || playlistId === undefined) {
                throw new RequiredError('playlistId','Required parameter playlistId was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPlaylistsPlaylistIdTracksPut.');
            }
            const localVarPath = `/users/{user_id}/playlists/{playlist_id}/tracks`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"playlist_id"}}`, encodeURIComponent(String(playlistId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {InlineObject} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPost(userId: string, body: InlineObject, accept?: string, options: any = {}): RequestArgs {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling usersUserIdPlaylistsPost.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling usersUserIdPlaylistsPost.');
            }
            const localVarPath = `/users/{user_id}/playlists`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accept !== undefined && accept !== null) {
                localVarHeaderParameter['Accept'] = String(accept);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsGet(ids: string, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).albumsGet(ids, market, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get an Album](https://developer.spotify.com/web-api/get-album/) 
         * @param {string} id The Spotify ID for the album
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsIdGet(id: string, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Album> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).albumsIdGet(id, market, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get an Album\'s Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) 
         * @param {string} id The Spotify ID for the album
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsIdTracksGet(id: string, limit?: number, offset?: number, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrackSimplePage> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).albumsIdTracksGet(id, limit, offset, market, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsGet(ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).artistsGet(ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get an Artist\'s Albums](https://developer.spotify.com/web-api/get-artists-albums/) 
         * @param {string} id The Spotify ID for the artist
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [albumType] Filter by album types
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdAlbumsGet(id: string, limit?: number, offset?: number, albumType?: string, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumSimplePage> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).artistsIdAlbumsGet(id, limit, offset, albumType, market, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get an Artist](https://developer.spotify.com/web-api/get-artist/) 
         * @param {string} id The Spotify ID for the artist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Artist> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).artistsIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get an Artist\'s Related Artists](https://developer.spotify.com/web-api/get-related-artists/) 
         * @param {string} id The Spotify ID for the artist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdRelatedArtistsGet(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).artistsIdRelatedArtistsGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get an Artist\'s Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) 
         * @param {string} id The Spotify ID for the artist
         * @param {string} country The country (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdTopTracksGet(id: string, country: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).artistsIdTopTracksGet(id, country, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/) 
         * @param {string} categoryId The Spotify ID of the category you wish to fetch.
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseCategoriesCategoryIdGet(categoryId: string, country?: string, locale?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Category> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).browseCategoriesCategoryIdGet(categoryId, country, locale, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get a Category\'s playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) 
         * @param {string} categoryId The Spotify ID of the category you wish to fetch.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseCategoriesCategoryIdPlaylistsGet(categoryId: string, limit?: number, offset?: number, country?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).browseCategoriesCategoryIdPlaylistsGet(categoryId, limit, offset, country, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseCategoriesGet(limit?: number, offset?: number, country?: string, locale?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryPage> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).browseCategoriesGet(limit, offset, country, locale, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
         * @param {string} [timestamp] A timestamp in ISO 8601 format (yyyy-MM-dd\&#39;T\&#39;HH:mm:ss) with the user\&#39;s local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: \&quot;2014-10-23T09:00:00\&quot; for a user whose local time is 9AM. 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseFeaturedPlaylistsGet(limit?: number, offset?: number, country?: string, locale?: string, timestamp?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeaturedPlaylists> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).browseFeaturedPlaylistsGet(limit, offset, country, locale, timestamp, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseNewReleasesGet(limit?: number, offset?: number, country?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AlbumSimplePage> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).browseNewReleasesGet(limit, offset, country, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/) 
         * @param {'artist' | 'user'} type The type to follow.
         * @param {string} ids A comma-separated string of the artists or users ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingContainsGet(type: 'artist' | 'user', ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meFollowingContainsGet(type, ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) 
         * @param {'artist' | 'user'} type The type to unfollow.
         * @param {string} ids A comma-separated list of the artists or users ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingDelete(type: 'artist' | 'user', ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meFollowingDelete(type, ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get User\'s Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) 
         * @param {'artist'} type The ID type, currently only artist is supported.
         * @param {number} [limit] The maximum number of items to return
         * @param {string} [after] The last artist ID retrieved from the previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingGet(type: 'artist', limit?: number, after?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserFollowed> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meFollowingGet(type, limit, after, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) 
         * @param {'artist' | 'user'} type The type to follow.
         * @param {string} ids A comma-separated list of the artists or users ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingPut(type: 'artist' | 'user', ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meFollowingPut(type, ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get Current User\'s Profile](https://developer.spotify.com/web-api/get-current-users-profile/) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUserProfile> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Check Current User\'s Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksContainsGet(ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meTracksContainsGet(ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksDelete(ids: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meTracksDelete(ids, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get Current User\'s Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksGet(limit?: number, offset?: number, market?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedTrackPage> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meTracksGet(limit, offset, market, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksPut(ids: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).meTracksPut(ids, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Search for an Item](https://developer.spotify.com/web-api/search-item/) 
         * @param {string} q The search query\&#39;s keywords (and optional field filters). The search is not case-sensitive: \&#39;roadhouse\&#39; will match \&#39;Roadhouse\&#39;, \&#39;roadHouse\&#39;, etc. Keywords will be matched in any order unless surrounded by quotes, thus q&#x3D;roadhouse&amp;20blues will match both \&#39;Blues Roadhouse\&#39; and \&#39;Roadhouse of the Blues\&#39;. Quotation marks can be used to limit the match to a phrase: q&#x3D;roadhouse&amp;20blues will match \&#39;My Roadhouse Blues\&#39; but not \&#39;Roadhouse of the Blues\&#39;. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q&#x3D;album:gold%20artist:abba&amp;type&#x3D;album will search for albums with the text \&#39;gold\&#39; in the album name and the text \&#39;abba\&#39; in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q&#x3D;damian%20genre:reggae-pop&amp;type&#x3D;artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist\&#39;s name and/or description.
         * @param {string} type A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q&#x3D;name:abacab&amp;type&#x3D;album,track will return both albums and tracks with \&quot;abacab\&quot; in their name.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(q: string, type: string, limit?: number, offset?: number, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Search> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).searchGet(q, type, limit, offset, market, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tracksGet(ids: string, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tracksGet(ids, market, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get a Track](https://developer.spotify.com/web-api/get-track/) 
         * @param {string} id 
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tracksIdGet(id: string, market?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Track> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).tracksIdGet(id, market, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get a User\'s Profile](https://developer.spotify.com/web-api/get-users-profile/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfile> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get a List of a User\'s Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsGet(userId: string, limit?: number, offset?: number, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistSimplePage> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsGet(userId, limit, offset, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {string} ids A comma-separated list of users ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId: string, playlistId: string, ids: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<boolean>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId, playlistId, ids, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdFollowersDelete(userId: string, playlistId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdFollowersDelete(userId, playlistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdFollowersPut(userId: string, playlistId: string, body: InlineObject2, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdFollowersPut(userId, playlistId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {string} [fields] A comma-separated list of fields to filter query
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdGet(userId: string, playlistId: string, fields?: string, market?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Playlist> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdGet(userId, playlistId, fields, market, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Change a Playlist\'s Details](https://developer.spotify.com/web-api/change-playlist-details/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject1} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdPut(userId: string, playlistId: string, body: InlineObject1, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdPut(userId, playlistId, body, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject4} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksDelete(userId: string, playlistId: string, body: InlineObject4, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistSnapshot> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdTracksDelete(userId, playlistId, body, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Get a Playlist\'s Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [fields] A comma-separated list of fields to filter query
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksGet(userId: string, playlistId: string, limit?: number, offset?: number, fields?: string, market?: string, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistTrackPage> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdTracksGet(userId, playlistId, limit, offset, fields, market, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {string} uris A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.
         * @param {number} [position] The position to insert the tracks, a zero-based index
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksPost(userId: string, playlistId: string, uris: string, position?: number, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistSnapshot> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdTracksPost(userId, playlistId, uris, position, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Reorder or replace a Playlist\'s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject3} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksPut(userId: string, playlistId: string, body: InlineObject3, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlaylistSnapshot> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPlaylistIdTracksPut(userId, playlistId, body, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {InlineObject} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPost(userId: string, body: InlineObject, accept?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Playlist> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).usersUserIdPlaylistsPost(userId, body, accept, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsGet(ids: string, market?: string, options?: any) {
            return DefaultApiFp(configuration).albumsGet(ids, market, options)(axios, basePath);
        },
        /**
         * [Get an Album](https://developer.spotify.com/web-api/get-album/) 
         * @param {string} id The Spotify ID for the album
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsIdGet(id: string, market?: string, options?: any) {
            return DefaultApiFp(configuration).albumsIdGet(id, market, options)(axios, basePath);
        },
        /**
         * [Get an Album\'s Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) 
         * @param {string} id The Spotify ID for the album
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        albumsIdTracksGet(id: string, limit?: number, offset?: number, market?: string, options?: any) {
            return DefaultApiFp(configuration).albumsIdTracksGet(id, limit, offset, market, options)(axios, basePath);
        },
        /**
         * [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsGet(ids: string, options?: any) {
            return DefaultApiFp(configuration).artistsGet(ids, options)(axios, basePath);
        },
        /**
         * [Get an Artist\'s Albums](https://developer.spotify.com/web-api/get-artists-albums/) 
         * @param {string} id The Spotify ID for the artist
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [albumType] Filter by album types
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdAlbumsGet(id: string, limit?: number, offset?: number, albumType?: string, market?: string, options?: any) {
            return DefaultApiFp(configuration).artistsIdAlbumsGet(id, limit, offset, albumType, market, options)(axios, basePath);
        },
        /**
         * [Get an Artist](https://developer.spotify.com/web-api/get-artist/) 
         * @param {string} id The Spotify ID for the artist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdGet(id: string, options?: any) {
            return DefaultApiFp(configuration).artistsIdGet(id, options)(axios, basePath);
        },
        /**
         * [Get an Artist\'s Related Artists](https://developer.spotify.com/web-api/get-related-artists/) 
         * @param {string} id The Spotify ID for the artist
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdRelatedArtistsGet(id: string, options?: any) {
            return DefaultApiFp(configuration).artistsIdRelatedArtistsGet(id, options)(axios, basePath);
        },
        /**
         * [Get an Artist\'s Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) 
         * @param {string} id The Spotify ID for the artist
         * @param {string} country The country (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        artistsIdTopTracksGet(id: string, country: string, options?: any) {
            return DefaultApiFp(configuration).artistsIdTopTracksGet(id, country, options)(axios, basePath);
        },
        /**
         * [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/) 
         * @param {string} categoryId The Spotify ID of the category you wish to fetch.
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseCategoriesCategoryIdGet(categoryId: string, country?: string, locale?: string, accept?: string, options?: any) {
            return DefaultApiFp(configuration).browseCategoriesCategoryIdGet(categoryId, country, locale, accept, options)(axios, basePath);
        },
        /**
         * [Get a Category\'s playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) 
         * @param {string} categoryId The Spotify ID of the category you wish to fetch.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseCategoriesCategoryIdPlaylistsGet(categoryId: string, limit?: number, offset?: number, country?: string, accept?: string, options?: any) {
            return DefaultApiFp(configuration).browseCategoriesCategoryIdPlaylistsGet(categoryId, limit, offset, country, accept, options)(axios, basePath);
        },
        /**
         * [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseCategoriesGet(limit?: number, offset?: number, country?: string, locale?: string, accept?: string, options?: any) {
            return DefaultApiFp(configuration).browseCategoriesGet(limit, offset, country, locale, accept, options)(axios, basePath);
        },
        /**
         * [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
         * @param {string} [timestamp] A timestamp in ISO 8601 format (yyyy-MM-dd\&#39;T\&#39;HH:mm:ss) with the user\&#39;s local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: \&quot;2014-10-23T09:00:00\&quot; for a user whose local time is 9AM. 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseFeaturedPlaylistsGet(limit?: number, offset?: number, country?: string, locale?: string, timestamp?: string, accept?: string, options?: any) {
            return DefaultApiFp(configuration).browseFeaturedPlaylistsGet(limit, offset, country, locale, timestamp, accept, options)(axios, basePath);
        },
        /**
         * [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        browseNewReleasesGet(limit?: number, offset?: number, country?: string, accept?: string, options?: any) {
            return DefaultApiFp(configuration).browseNewReleasesGet(limit, offset, country, accept, options)(axios, basePath);
        },
        /**
         * [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/) 
         * @param {'artist' | 'user'} type The type to follow.
         * @param {string} ids A comma-separated string of the artists or users ids.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingContainsGet(type: 'artist' | 'user', ids: string, options?: any) {
            return DefaultApiFp(configuration).meFollowingContainsGet(type, ids, options)(axios, basePath);
        },
        /**
         * [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) 
         * @param {'artist' | 'user'} type The type to unfollow.
         * @param {string} ids A comma-separated list of the artists or users ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingDelete(type: 'artist' | 'user', ids: string, options?: any) {
            return DefaultApiFp(configuration).meFollowingDelete(type, ids, options)(axios, basePath);
        },
        /**
         * [Get User\'s Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) 
         * @param {'artist'} type The ID type, currently only artist is supported.
         * @param {number} [limit] The maximum number of items to return
         * @param {string} [after] The last artist ID retrieved from the previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingGet(type: 'artist', limit?: number, after?: string, options?: any) {
            return DefaultApiFp(configuration).meFollowingGet(type, limit, after, options)(axios, basePath);
        },
        /**
         * [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) 
         * @param {'artist' | 'user'} type The type to follow.
         * @param {string} ids A comma-separated list of the artists or users ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meFollowingPut(type: 'artist' | 'user', ids: string, options?: any) {
            return DefaultApiFp(configuration).meFollowingPut(type, ids, options)(axios, basePath);
        },
        /**
         * [Get Current User\'s Profile](https://developer.spotify.com/web-api/get-current-users-profile/) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet(options?: any) {
            return DefaultApiFp(configuration).meGet(options)(axios, basePath);
        },
        /**
         * [Check Current User\'s Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksContainsGet(ids: string, options?: any) {
            return DefaultApiFp(configuration).meTracksContainsGet(ids, options)(axios, basePath);
        },
        /**
         * [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksDelete(ids: string, accept?: string, options?: any) {
            return DefaultApiFp(configuration).meTracksDelete(ids, accept, options)(axios, basePath);
        },
        /**
         * [Get Current User\'s Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) 
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksGet(limit?: number, offset?: number, market?: string, accept?: string, options?: any) {
            return DefaultApiFp(configuration).meTracksGet(limit, offset, market, accept, options)(axios, basePath);
        },
        /**
         * [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meTracksPut(ids: string, accept?: string, options?: any) {
            return DefaultApiFp(configuration).meTracksPut(ids, accept, options)(axios, basePath);
        },
        /**
         * [Search for an Item](https://developer.spotify.com/web-api/search-item/) 
         * @param {string} q The search query\&#39;s keywords (and optional field filters). The search is not case-sensitive: \&#39;roadhouse\&#39; will match \&#39;Roadhouse\&#39;, \&#39;roadHouse\&#39;, etc. Keywords will be matched in any order unless surrounded by quotes, thus q&#x3D;roadhouse&amp;20blues will match both \&#39;Blues Roadhouse\&#39; and \&#39;Roadhouse of the Blues\&#39;. Quotation marks can be used to limit the match to a phrase: q&#x3D;roadhouse&amp;20blues will match \&#39;My Roadhouse Blues\&#39; but not \&#39;Roadhouse of the Blues\&#39;. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q&#x3D;album:gold%20artist:abba&amp;type&#x3D;album will search for albums with the text \&#39;gold\&#39; in the album name and the text \&#39;abba\&#39; in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q&#x3D;damian%20genre:reggae-pop&amp;type&#x3D;artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist\&#39;s name and/or description.
         * @param {string} type A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q&#x3D;name:abacab&amp;type&#x3D;album,track will return both albums and tracks with \&quot;abacab\&quot; in their name.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(q: string, type: string, limit?: number, offset?: number, market?: string, options?: any) {
            return DefaultApiFp(configuration).searchGet(q, type, limit, offset, market, options)(axios, basePath);
        },
        /**
         * [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) 
         * @param {string} ids A comma-separated list of IDs
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tracksGet(ids: string, market?: string, options?: any) {
            return DefaultApiFp(configuration).tracksGet(ids, market, options)(axios, basePath);
        },
        /**
         * [Get a Track](https://developer.spotify.com/web-api/get-track/) 
         * @param {string} id 
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tracksIdGet(id: string, market?: string, options?: any) {
            return DefaultApiFp(configuration).tracksIdGet(id, market, options)(axios, basePath);
        },
        /**
         * [Get a User\'s Profile](https://developer.spotify.com/web-api/get-users-profile/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdGet(userId: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdGet(userId, options)(axios, basePath);
        },
        /**
         * [Get a List of a User\'s Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsGet(userId: string, limit?: number, offset?: number, accept?: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsGet(userId, limit, offset, accept, options)(axios, basePath);
        },
        /**
         * [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {string} ids A comma-separated list of users ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId: string, playlistId: string, ids: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId, playlistId, ids, options)(axios, basePath);
        },
        /**
         * [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdFollowersDelete(userId: string, playlistId: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdFollowersDelete(userId, playlistId, options)(axios, basePath);
        },
        /**
         * [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject2} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdFollowersPut(userId: string, playlistId: string, body: InlineObject2, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdFollowersPut(userId, playlistId, body, options)(axios, basePath);
        },
        /**
         * [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {string} [fields] A comma-separated list of fields to filter query
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdGet(userId: string, playlistId: string, fields?: string, market?: string, accept?: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdGet(userId, playlistId, fields, market, accept, options)(axios, basePath);
        },
        /**
         * [Change a Playlist\'s Details](https://developer.spotify.com/web-api/change-playlist-details/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject1} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdPut(userId: string, playlistId: string, body: InlineObject1, accept?: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdPut(userId, playlistId, body, accept, options)(axios, basePath);
        },
        /**
         * [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject4} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksDelete(userId: string, playlistId: string, body: InlineObject4, accept?: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdTracksDelete(userId, playlistId, body, accept, options)(axios, basePath);
        },
        /**
         * [Get a Playlist\'s Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {number} [limit] The maximum number of items to return
         * @param {number} [offset] The index of the first item to return
         * @param {string} [fields] A comma-separated list of fields to filter query
         * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksGet(userId: string, playlistId: string, limit?: number, offset?: number, fields?: string, market?: string, accept?: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdTracksGet(userId, playlistId, limit, offset, fields, market, accept, options)(axios, basePath);
        },
        /**
         * [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {string} uris A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.
         * @param {number} [position] The position to insert the tracks, a zero-based index
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksPost(userId: string, playlistId: string, uris: string, position?: number, accept?: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdTracksPost(userId, playlistId, uris, position, accept, options)(axios, basePath);
        },
        /**
         * [Reorder or replace a Playlist\'s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {string} playlistId The Spotify playlist ID.
         * @param {InlineObject3} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPlaylistIdTracksPut(userId: string, playlistId: string, body: InlineObject3, accept?: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsPlaylistIdTracksPut(userId, playlistId, body, accept, options)(axios, basePath);
        },
        /**
         * [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) 
         * @param {string} userId The user\&#39;s Spotify user ID.
         * @param {InlineObject} body 
         * @param {string} [accept] It is used to set specified media type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersUserIdPlaylistsPost(userId: string, body: InlineObject, accept?: string, options?: any) {
            return DefaultApiFp(configuration).usersUserIdPlaylistsPost(userId, body, accept, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/) 
     * @param {string} ids A comma-separated list of IDs
     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public albumsGet(ids: string, market?: string, options?: any) {
        return DefaultApiFp(this.configuration).albumsGet(ids, market, options)(this.axios, this.basePath);
    }

    /**
     * [Get an Album](https://developer.spotify.com/web-api/get-album/) 
     * @param {string} id The Spotify ID for the album
     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public albumsIdGet(id: string, market?: string, options?: any) {
        return DefaultApiFp(this.configuration).albumsIdGet(id, market, options)(this.axios, this.basePath);
    }

    /**
     * [Get an Album\'s Tracks](https://developer.spotify.com/web-api/get-albums-tracks/) 
     * @param {string} id The Spotify ID for the album
     * @param {number} [limit] The maximum number of items to return
     * @param {number} [offset] The index of the first item to return
     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public albumsIdTracksGet(id: string, limit?: number, offset?: number, market?: string, options?: any) {
        return DefaultApiFp(this.configuration).albumsIdTracksGet(id, limit, offset, market, options)(this.axios, this.basePath);
    }

    /**
     * [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/) 
     * @param {string} ids A comma-separated list of IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public artistsGet(ids: string, options?: any) {
        return DefaultApiFp(this.configuration).artistsGet(ids, options)(this.axios, this.basePath);
    }

    /**
     * [Get an Artist\'s Albums](https://developer.spotify.com/web-api/get-artists-albums/) 
     * @param {string} id The Spotify ID for the artist
     * @param {number} [limit] The maximum number of items to return
     * @param {number} [offset] The index of the first item to return
     * @param {string} [albumType] Filter by album types
     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public artistsIdAlbumsGet(id: string, limit?: number, offset?: number, albumType?: string, market?: string, options?: any) {
        return DefaultApiFp(this.configuration).artistsIdAlbumsGet(id, limit, offset, albumType, market, options)(this.axios, this.basePath);
    }

    /**
     * [Get an Artist](https://developer.spotify.com/web-api/get-artist/) 
     * @param {string} id The Spotify ID for the artist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public artistsIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).artistsIdGet(id, options)(this.axios, this.basePath);
    }

    /**
     * [Get an Artist\'s Related Artists](https://developer.spotify.com/web-api/get-related-artists/) 
     * @param {string} id The Spotify ID for the artist
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public artistsIdRelatedArtistsGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).artistsIdRelatedArtistsGet(id, options)(this.axios, this.basePath);
    }

    /**
     * [Get an Artist\'s Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/) 
     * @param {string} id The Spotify ID for the artist
     * @param {string} country The country (an ISO 3166-1 alpha-2 country code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public artistsIdTopTracksGet(id: string, country: string, options?: any) {
        return DefaultApiFp(this.configuration).artistsIdTopTracksGet(id, country, options)(this.axios, this.basePath);
    }

    /**
     * [Get a Single Browse Category](https://developer.spotify.com/web-api/get-category/) 
     * @param {string} categoryId The Spotify ID of the category you wish to fetch.
     * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
     * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public browseCategoriesCategoryIdGet(categoryId: string, country?: string, locale?: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).browseCategoriesCategoryIdGet(categoryId, country, locale, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Get a Category\'s playlists](https://developer.spotify.com/web-api/get-categorys-playlists/) 
     * @param {string} categoryId The Spotify ID of the category you wish to fetch.
     * @param {number} [limit] The maximum number of items to return
     * @param {number} [offset] The index of the first item to return
     * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public browseCategoriesCategoryIdPlaylistsGet(categoryId: string, limit?: number, offset?: number, country?: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).browseCategoriesCategoryIdPlaylistsGet(categoryId, limit, offset, country, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Get a List of Browse Categories](https://developer.spotify.com/web-api/get-list-categories/) 
     * @param {number} [limit] The maximum number of items to return
     * @param {number} [offset] The index of the first item to return
     * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
     * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public browseCategoriesGet(limit?: number, offset?: number, country?: string, locale?: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).browseCategoriesGet(limit, offset, country, locale, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Get a List of Featured Playlists](https://developer.spotify.com/web-api/get-list-featured-playlists/) 
     * @param {number} [limit] The maximum number of items to return
     * @param {number} [offset] The index of the first item to return
     * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
     * @param {string} [locale] The desired language, consisting of an ISO 639 language code and an ISO 3166-1 alpha-2 country code, joined by an underscore. For example: es_MX, meaning \&quot;Spanish (Mexico)\&quot;. 
     * @param {string} [timestamp] A timestamp in ISO 8601 format (yyyy-MM-dd\&#39;T\&#39;HH:mm:ss) with the user\&#39;s local time to get results tailored to a specific date and time in the day. If not provided, it defaults to the current UTC time. Example: \&quot;2014-10-23T09:00:00\&quot; for a user whose local time is 9AM. 
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public browseFeaturedPlaylistsGet(limit?: number, offset?: number, country?: string, locale?: string, timestamp?: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).browseFeaturedPlaylistsGet(limit, offset, country, locale, timestamp, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Get a List of New Releases](https://developer.spotify.com/web-api/get-list-new-releases/) 
     * @param {number} [limit] The maximum number of items to return
     * @param {number} [offset] The index of the first item to return
     * @param {string} [country] The country (an ISO 3166-1 alpha-2 country code)
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public browseNewReleasesGet(limit?: number, offset?: number, country?: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).browseNewReleasesGet(limit, offset, country, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Check if Current User Follows Artists or Users](https://developer.spotify.com/web-api/check-current-user-follows/) 
     * @param {'artist' | 'user'} type The type to follow.
     * @param {string} ids A comma-separated string of the artists or users ids.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meFollowingContainsGet(type: 'artist' | 'user', ids: string, options?: any) {
        return DefaultApiFp(this.configuration).meFollowingContainsGet(type, ids, options)(this.axios, this.basePath);
    }

    /**
     * [Unfollow Artists or Users](https://developer.spotify.com/web-api/unfollow-artists-users/) 
     * @param {'artist' | 'user'} type The type to unfollow.
     * @param {string} ids A comma-separated list of the artists or users ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meFollowingDelete(type: 'artist' | 'user', ids: string, options?: any) {
        return DefaultApiFp(this.configuration).meFollowingDelete(type, ids, options)(this.axios, this.basePath);
    }

    /**
     * [Get User\'s Followed Artists](https://developer.spotify.com/web-api/get-followed-artists/) 
     * @param {'artist'} type The ID type, currently only artist is supported.
     * @param {number} [limit] The maximum number of items to return
     * @param {string} [after] The last artist ID retrieved from the previous request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meFollowingGet(type: 'artist', limit?: number, after?: string, options?: any) {
        return DefaultApiFp(this.configuration).meFollowingGet(type, limit, after, options)(this.axios, this.basePath);
    }

    /**
     * [Follow Artists or Users](https://developer.spotify.com/web-api/follow-artists-users/) 
     * @param {'artist' | 'user'} type The type to follow.
     * @param {string} ids A comma-separated list of the artists or users ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meFollowingPut(type: 'artist' | 'user', ids: string, options?: any) {
        return DefaultApiFp(this.configuration).meFollowingPut(type, ids, options)(this.axios, this.basePath);
    }

    /**
     * [Get Current User\'s Profile](https://developer.spotify.com/web-api/get-current-users-profile/) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meGet(options?: any) {
        return DefaultApiFp(this.configuration).meGet(options)(this.axios, this.basePath);
    }

    /**
     * [Check Current User\'s Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/) 
     * @param {string} ids A comma-separated list of IDs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meTracksContainsGet(ids: string, options?: any) {
        return DefaultApiFp(this.configuration).meTracksContainsGet(ids, options)(this.axios, this.basePath);
    }

    /**
     * [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/) 
     * @param {string} ids A comma-separated list of IDs
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meTracksDelete(ids: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).meTracksDelete(ids, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Get Current User\'s Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/) 
     * @param {number} [limit] The maximum number of items to return
     * @param {number} [offset] The index of the first item to return
     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meTracksGet(limit?: number, offset?: number, market?: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).meTracksGet(limit, offset, market, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/) 
     * @param {string} ids A comma-separated list of IDs
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meTracksPut(ids: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).meTracksPut(ids, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Search for an Item](https://developer.spotify.com/web-api/search-item/) 
     * @param {string} q The search query\&#39;s keywords (and optional field filters). The search is not case-sensitive: \&#39;roadhouse\&#39; will match \&#39;Roadhouse\&#39;, \&#39;roadHouse\&#39;, etc. Keywords will be matched in any order unless surrounded by quotes, thus q&#x3D;roadhouse&amp;20blues will match both \&#39;Blues Roadhouse\&#39; and \&#39;Roadhouse of the Blues\&#39;. Quotation marks can be used to limit the match to a phrase: q&#x3D;roadhouse&amp;20blues will match \&#39;My Roadhouse Blues\&#39; but not \&#39;Roadhouse of the Blues\&#39;. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q&#x3D;album:gold%20artist:abba&amp;type&#x3D;album will search for albums with the text \&#39;gold\&#39; in the album name and the text \&#39;abba\&#39; in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q&#x3D;damian%20genre:reggae-pop&amp;type&#x3D;artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string. Searching for playlists will return results matching the playlist\&#39;s name and/or description.
     * @param {string} type A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q&#x3D;name:abacab&amp;type&#x3D;album,track will return both albums and tracks with \&quot;abacab\&quot; in their name.
     * @param {number} [limit] The maximum number of items to return
     * @param {number} [offset] The index of the first item to return
     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code).  If given, only items with content playable in that market will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public searchGet(q: string, type: string, limit?: number, offset?: number, market?: string, options?: any) {
        return DefaultApiFp(this.configuration).searchGet(q, type, limit, offset, market, options)(this.axios, this.basePath);
    }

    /**
     * [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/) 
     * @param {string} ids A comma-separated list of IDs
     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tracksGet(ids: string, market?: string, options?: any) {
        return DefaultApiFp(this.configuration).tracksGet(ids, market, options)(this.axios, this.basePath);
    }

    /**
     * [Get a Track](https://developer.spotify.com/web-api/get-track/) 
     * @param {string} id 
     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public tracksIdGet(id: string, market?: string, options?: any) {
        return DefaultApiFp(this.configuration).tracksIdGet(id, market, options)(this.axios, this.basePath);
    }

    /**
     * [Get a User\'s Profile](https://developer.spotify.com/web-api/get-users-profile/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdGet(userId: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdGet(userId, options)(this.axios, this.basePath);
    }

    /**
     * [Get a List of a User\'s Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {number} [limit] The maximum number of items to return
     * @param {number} [offset] The index of the first item to return
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsGet(userId: string, limit?: number, offset?: number, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsGet(userId, limit, offset, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Check if Users Follow a Playlist](https://developer.spotify.com/web-api/check-user-following-playlist/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {string} playlistId The Spotify playlist ID.
     * @param {string} ids A comma-separated list of users ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId: string, playlistId: string, ids: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdFollowersContainsGet(userId, playlistId, ids, options)(this.axios, this.basePath);
    }

    /**
     * [Unfollow a Playlist](https://developer.spotify.com/web-api/unfollow-playlist/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {string} playlistId The Spotify playlist ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsPlaylistIdFollowersDelete(userId: string, playlistId: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdFollowersDelete(userId, playlistId, options)(this.axios, this.basePath);
    }

    /**
     * [Follow a Playlist](https://developer.spotify.com/web-api/follow-playlist/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {string} playlistId The Spotify playlist ID.
     * @param {InlineObject2} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsPlaylistIdFollowersPut(userId: string, playlistId: string, body: InlineObject2, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdFollowersPut(userId, playlistId, body, options)(this.axios, this.basePath);
    }

    /**
     * [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {string} playlistId The Spotify playlist ID.
     * @param {string} [fields] A comma-separated list of fields to filter query
     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsPlaylistIdGet(userId: string, playlistId: string, fields?: string, market?: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdGet(userId, playlistId, fields, market, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Change a Playlist\'s Details](https://developer.spotify.com/web-api/change-playlist-details/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {string} playlistId The Spotify playlist ID.
     * @param {InlineObject1} body 
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsPlaylistIdPut(userId: string, playlistId: string, body: InlineObject1, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdPut(userId, playlistId, body, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {string} playlistId The Spotify playlist ID.
     * @param {InlineObject4} body 
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsPlaylistIdTracksDelete(userId: string, playlistId: string, body: InlineObject4, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdTracksDelete(userId, playlistId, body, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Get a Playlist\'s Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {string} playlistId The Spotify playlist ID.
     * @param {number} [limit] The maximum number of items to return
     * @param {number} [offset] The index of the first item to return
     * @param {string} [fields] A comma-separated list of fields to filter query
     * @param {string} [market] The market (an ISO 3166-1 alpha-2 country code)
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsPlaylistIdTracksGet(userId: string, playlistId: string, limit?: number, offset?: number, fields?: string, market?: string, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdTracksGet(userId, playlistId, limit, offset, fields, market, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {string} playlistId The Spotify playlist ID.
     * @param {string} uris A comma-separated list of Spotify track URIs to add. A maximum of 100 tracks can be added in one request.
     * @param {number} [position] The position to insert the tracks, a zero-based index
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsPlaylistIdTracksPost(userId: string, playlistId: string, uris: string, position?: number, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdTracksPost(userId, playlistId, uris, position, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Reorder or replace a Playlist\'s Tracks](https://developer.spotify.com/web-api/reorder-playlists-tracks/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {string} playlistId The Spotify playlist ID.
     * @param {InlineObject3} body 
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsPlaylistIdTracksPut(userId: string, playlistId: string, body: InlineObject3, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPlaylistIdTracksPut(userId, playlistId, body, accept, options)(this.axios, this.basePath);
    }

    /**
     * [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/) 
     * @param {string} userId The user\&#39;s Spotify user ID.
     * @param {InlineObject} body 
     * @param {string} [accept] It is used to set specified media type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public usersUserIdPlaylistsPost(userId: string, body: InlineObject, accept?: string, options?: any) {
        return DefaultApiFp(this.configuration).usersUserIdPlaylistsPost(userId, body, accept, options)(this.axios, this.basePath);
    }

}


