// tslint:disable
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Candidate
 */
export interface Candidate {
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    electionYear?: string;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    firstName?: string;
    /**
     * 
     * @type {number}
     * @memberof Candidate
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    lastName?: string;
    /**
     * 
     * @type {number}
     * @memberof Candidate
     */
    nationalPollingAverage?: number;
    /**
     * 
     * @type {string}
     * @memberof Candidate
     */
    party?: CandidatePartyEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CandidatePartyEnum {
    DEMOCRAT = 'DEMOCRAT',
    REPUBLICAN = 'REPUBLICAN',
    INDEPENDENT = 'INDEPENDENT'
}

/**
 * 
 * @export
 * @interface ModelAndView
 */
export interface ModelAndView {
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    empty?: boolean;
    /**
     * 
     * @type {object}
     * @memberof ModelAndView
     */
    model?: object;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ModelAndView
     */
    modelMap?: { [key: string]: object; };
    /**
     * 
     * @type {boolean}
     * @memberof ModelAndView
     */
    reference?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    status?: ModelAndViewStatusEnum;
    /**
     * 
     * @type {View}
     * @memberof ModelAndView
     */
    view?: View;
    /**
     * 
     * @type {string}
     * @memberof ModelAndView
     */
    viewName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ModelAndViewStatusEnum {
    _100CONTINUE = '100 CONTINUE',
    _101SWITCHINGPROTOCOLS = '101 SWITCHING_PROTOCOLS',
    _102PROCESSING = '102 PROCESSING',
    _103CHECKPOINT = '103 CHECKPOINT',
    _200OK = '200 OK',
    _201CREATED = '201 CREATED',
    _202ACCEPTED = '202 ACCEPTED',
    _203NONAUTHORITATIVEINFORMATION = '203 NON_AUTHORITATIVE_INFORMATION',
    _204NOCONTENT = '204 NO_CONTENT',
    _205RESETCONTENT = '205 RESET_CONTENT',
    _206PARTIALCONTENT = '206 PARTIAL_CONTENT',
    _207MULTISTATUS = '207 MULTI_STATUS',
    _208ALREADYREPORTED = '208 ALREADY_REPORTED',
    _226IMUSED = '226 IM_USED',
    _300MULTIPLECHOICES = '300 MULTIPLE_CHOICES',
    _301MOVEDPERMANENTLY = '301 MOVED_PERMANENTLY',
    _302FOUND = '302 FOUND',
    _302MOVEDTEMPORARILY = '302 MOVED_TEMPORARILY',
    _303SEEOTHER = '303 SEE_OTHER',
    _304NOTMODIFIED = '304 NOT_MODIFIED',
    _305USEPROXY = '305 USE_PROXY',
    _307TEMPORARYREDIRECT = '307 TEMPORARY_REDIRECT',
    _308PERMANENTREDIRECT = '308 PERMANENT_REDIRECT',
    _400BADREQUEST = '400 BAD_REQUEST',
    _401UNAUTHORIZED = '401 UNAUTHORIZED',
    _402PAYMENTREQUIRED = '402 PAYMENT_REQUIRED',
    _403FORBIDDEN = '403 FORBIDDEN',
    _404NOTFOUND = '404 NOT_FOUND',
    _405METHODNOTALLOWED = '405 METHOD_NOT_ALLOWED',
    _406NOTACCEPTABLE = '406 NOT_ACCEPTABLE',
    _407PROXYAUTHENTICATIONREQUIRED = '407 PROXY_AUTHENTICATION_REQUIRED',
    _408REQUESTTIMEOUT = '408 REQUEST_TIMEOUT',
    _409CONFLICT = '409 CONFLICT',
    _410GONE = '410 GONE',
    _411LENGTHREQUIRED = '411 LENGTH_REQUIRED',
    _412PRECONDITIONFAILED = '412 PRECONDITION_FAILED',
    _413PAYLOADTOOLARGE = '413 PAYLOAD_TOO_LARGE',
    _413REQUESTENTITYTOOLARGE = '413 REQUEST_ENTITY_TOO_LARGE',
    _414URITOOLONG = '414 URI_TOO_LONG',
    _414REQUESTURITOOLONG = '414 REQUEST_URI_TOO_LONG',
    _415UNSUPPORTEDMEDIATYPE = '415 UNSUPPORTED_MEDIA_TYPE',
    _416REQUESTEDRANGENOTSATISFIABLE = '416 REQUESTED_RANGE_NOT_SATISFIABLE',
    _417EXPECTATIONFAILED = '417 EXPECTATION_FAILED',
    _418IAMATEAPOT = '418 I_AM_A_TEAPOT',
    _419INSUFFICIENTSPACEONRESOURCE = '419 INSUFFICIENT_SPACE_ON_RESOURCE',
    _420METHODFAILURE = '420 METHOD_FAILURE',
    _421DESTINATIONLOCKED = '421 DESTINATION_LOCKED',
    _422UNPROCESSABLEENTITY = '422 UNPROCESSABLE_ENTITY',
    _423LOCKED = '423 LOCKED',
    _424FAILEDDEPENDENCY = '424 FAILED_DEPENDENCY',
    _426UPGRADEREQUIRED = '426 UPGRADE_REQUIRED',
    _428PRECONDITIONREQUIRED = '428 PRECONDITION_REQUIRED',
    _429TOOMANYREQUESTS = '429 TOO_MANY_REQUESTS',
    _431REQUESTHEADERFIELDSTOOLARGE = '431 REQUEST_HEADER_FIELDS_TOO_LARGE',
    _451UNAVAILABLEFORLEGALREASONS = '451 UNAVAILABLE_FOR_LEGAL_REASONS',
    _500INTERNALSERVERERROR = '500 INTERNAL_SERVER_ERROR',
    _501NOTIMPLEMENTED = '501 NOT_IMPLEMENTED',
    _502BADGATEWAY = '502 BAD_GATEWAY',
    _503SERVICEUNAVAILABLE = '503 SERVICE_UNAVAILABLE',
    _504GATEWAYTIMEOUT = '504 GATEWAY_TIMEOUT',
    _505HTTPVERSIONNOTSUPPORTED = '505 HTTP_VERSION_NOT_SUPPORTED',
    _506VARIANTALSONEGOTIATES = '506 VARIANT_ALSO_NEGOTIATES',
    _507INSUFFICIENTSTORAGE = '507 INSUFFICIENT_STORAGE',
    _508LOOPDETECTED = '508 LOOP_DETECTED',
    _509BANDWIDTHLIMITEXCEEDED = '509 BANDWIDTH_LIMIT_EXCEEDED',
    _510NOTEXTENDED = '510 NOT_EXTENDED',
    _511NETWORKAUTHENTICATIONREQUIRED = '511 NETWORK_AUTHENTICATION_REQUIRED'
}

/**
 * 
 * @export
 * @interface View
 */
export interface View {
    /**
     * 
     * @type {string}
     * @memberof View
     */
    contentType?: string;
}

/**
 * BasicErrorControllerApi - axios parameter creator
 * @export
 */
export const BasicErrorControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'OPTIONS', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options: any = {}): RequestArgs {
            const localVarPath = `/error`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BasicErrorControllerApi - functional programming interface
 * @export
 */
export const BasicErrorControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingDELETE(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingGET(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingHEAD(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingOPTIONS(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPATCH(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPOST(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }> {
            const localVarAxiosArgs = BasicErrorControllerApiAxiosParamCreator(configuration).errorUsingPUT(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BasicErrorControllerApi - factory interface
 * @export
 */
export const BasicErrorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingDELETE(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingDELETE(options)(axios, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingGET(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingGET(options)(axios, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingHEAD(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingHEAD(options)(axios, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingOPTIONS(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingOPTIONS(options)(axios, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPATCH(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPATCH(options)(axios, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPOST(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPOST(options)(axios, basePath);
        },
        /**
         * 
         * @summary error
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        errorUsingPUT(options?: any) {
            return BasicErrorControllerApiFp(configuration).errorUsingPUT(options)(axios, basePath);
        },
    };
};

/**
 * BasicErrorControllerApi - object-oriented interface
 * @export
 * @class BasicErrorControllerApi
 * @extends {BaseAPI}
 */
export class BasicErrorControllerApi extends BaseAPI {
    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingDELETE(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingDELETE(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingGET(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingGET(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingHEAD(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingHEAD(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingOPTIONS(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingOPTIONS(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPATCH(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPATCH(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPOST(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPOST(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary error
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BasicErrorControllerApi
     */
    public errorUsingPUT(options?: any) {
        return BasicErrorControllerApiFp(this.configuration).errorUsingPUT(options)(this.axios, this.basePath);
    }

}


/**
 * CandidateControllerApi - axios parameter creator
 * @export
 */
export const CandidateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addCandidate
         * @param {Candidate} candidate candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidate(candidate: Candidate, options: any = {}): RequestArgs {
            // verify required parameter 'candidate' is not null or undefined
            if (candidate === null || candidate === undefined) {
                throw new RequiredError('candidate','Required parameter candidate was null or undefined when calling addCandidate.');
            }
            const localVarPath = `/candidate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof candidate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(candidate !== undefined ? candidate : {}) : (candidate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary deleteCandidate
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCandidate(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCandidate.');
            }
            const localVarPath = `/candidate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getCandidates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates(options: any = {}): RequestArgs {
            const localVarPath = `/candidates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary helloWorld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloWorld(options: any = {}): RequestArgs {
            const localVarPath = `/`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary searchForCandidatesByLastName
         * @param {string} lastName lastName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchForCandidatesByLastName(lastName: string, options: any = {}): RequestArgs {
            // verify required parameter 'lastName' is not null or undefined
            if (lastName === null || lastName === undefined) {
                throw new RequiredError('lastName','Required parameter lastName was null or undefined when calling searchForCandidatesByLastName.');
            }
            const localVarPath = `/candidates/{lastName}`
                .replace(`{${"lastName"}}`, encodeURIComponent(String(lastName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CandidateControllerApi - functional programming interface
 * @export
 */
export const CandidateControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary addCandidate
         * @param {Candidate} candidate candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidate(candidate: Candidate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Candidate> {
            const localVarAxiosArgs = CandidateControllerApiAxiosParamCreator(configuration).addCandidate(candidate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary deleteCandidate
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCandidate(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = CandidateControllerApiAxiosParamCreator(configuration).deleteCandidate(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getCandidates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Candidate>> {
            const localVarAxiosArgs = CandidateControllerApiAxiosParamCreator(configuration).getCandidates(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary helloWorld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloWorld(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = CandidateControllerApiAxiosParamCreator(configuration).helloWorld(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary searchForCandidatesByLastName
         * @param {string} lastName lastName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchForCandidatesByLastName(lastName: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Candidate>> {
            const localVarAxiosArgs = CandidateControllerApiAxiosParamCreator(configuration).searchForCandidatesByLastName(lastName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CandidateControllerApi - factory interface
 * @export
 */
export const CandidateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary addCandidate
         * @param {Candidate} candidate candidate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCandidate(candidate: Candidate, options?: any) {
            return CandidateControllerApiFp(configuration).addCandidate(candidate, options)(axios, basePath);
        },
        /**
         * 
         * @summary deleteCandidate
         * @param {number} id id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCandidate(id: number, options?: any) {
            return CandidateControllerApiFp(configuration).deleteCandidate(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary getCandidates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCandidates(options?: any) {
            return CandidateControllerApiFp(configuration).getCandidates(options)(axios, basePath);
        },
        /**
         * 
         * @summary helloWorld
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        helloWorld(options?: any) {
            return CandidateControllerApiFp(configuration).helloWorld(options)(axios, basePath);
        },
        /**
         * 
         * @summary searchForCandidatesByLastName
         * @param {string} lastName lastName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchForCandidatesByLastName(lastName: string, options?: any) {
            return CandidateControllerApiFp(configuration).searchForCandidatesByLastName(lastName, options)(axios, basePath);
        },
    };
};

/**
 * CandidateControllerApi - object-oriented interface
 * @export
 * @class CandidateControllerApi
 * @extends {BaseAPI}
 */
export class CandidateControllerApi extends BaseAPI {
    /**
     * 
     * @summary addCandidate
     * @param {Candidate} candidate candidate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApi
     */
    public addCandidate(candidate: Candidate, options?: any) {
        return CandidateControllerApiFp(this.configuration).addCandidate(candidate, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary deleteCandidate
     * @param {number} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApi
     */
    public deleteCandidate(id: number, options?: any) {
        return CandidateControllerApiFp(this.configuration).deleteCandidate(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary getCandidates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApi
     */
    public getCandidates(options?: any) {
        return CandidateControllerApiFp(this.configuration).getCandidates(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary helloWorld
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApi
     */
    public helloWorld(options?: any) {
        return CandidateControllerApiFp(this.configuration).helloWorld(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary searchForCandidatesByLastName
     * @param {string} lastName lastName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateControllerApi
     */
    public searchForCandidatesByLastName(lastName: string, options?: any) {
        return CandidateControllerApiFp(this.configuration).searchForCandidatesByLastName(lastName, options)(this.axios, this.basePath);
    }

}


